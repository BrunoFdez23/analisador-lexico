/* The following code was generated by JFlex 1.6.1 */

/* Barrera Alaniz Jose Angel */
/* Fern√°ndez Flores Bruno Eduardo */
/* Sanchez Mora Jose Alfredo */

/* Paquete de ubicacion del archivo en el proyecto */
package practica2;

/* Importaciones necesarias */
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/practica2/lexico.jflex</tt>
 */
class LexerC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\2\1\5\1\6\1\1\22\0\1\3\1\101\1\30"+
    "\1\33\1\50\1\10\1\104\1\32\1\111\1\46\1\7\1\77\1\116"+
    "\1\25\1\23\1\4\1\14\1\21\6\22\2\13\1\110\1\44\1\102"+
    "\1\100\1\103\1\45\1\50\1\71\1\20\1\72\1\17\1\24\1\17"+
    "\1\11\1\12\1\73\4\12\1\74\1\12\1\27\2\12\1\75\1\76"+
    "\3\12\1\15\2\12\1\112\1\31\1\113\1\106\1\66\1\0\1\51"+
    "\1\54\1\36\1\41\1\42\1\16\1\62\1\57\1\34\1\12\1\56"+
    "\1\37\1\60\1\35\1\53\1\26\1\67\1\55\1\43\1\52\1\40"+
    "\1\70\1\64\1\61\1\65\1\63\1\114\1\105\1\115\1\107\6\0"+
    "\1\5\u1fa2\0\1\5\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\1\1\4\1\1\1\5\1\6"+
    "\1\7\2\10\1\7\1\11\1\12\2\13\1\14\7\7"+
    "\1\15\1\16\1\17\1\14\10\7\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\2\1\3\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\2\46\2\10\1\47"+
    "\2\46\1\50\1\51\2\50\2\7\1\0\1\52\1\53"+
    "\1\54\1\55\1\0\1\56\1\57\1\0\1\60\2\0"+
    "\3\2\1\61\7\7\1\62\26\7\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\40"+
    "\1\41\1\2\1\46\1\2\1\0\2\52\1\46\3\50"+
    "\2\0\1\75\1\76\1\0\2\77\1\100\1\7\1\101"+
    "\2\0\1\102\5\2\1\7\1\103\44\7\1\0\1\104"+
    "\1\46\1\47\2\52\1\46\1\50\1\52\1\105\1\106"+
    "\1\77\1\7\1\60\6\2\1\7\1\107\2\7\1\110"+
    "\1\111\4\7\1\112\1\113\7\7\1\114\5\7\1\115"+
    "\12\7\1\116\1\7\1\104\1\52\1\47\3\52\1\0"+
    "\2\106\1\77\1\117\3\2\1\120\1\7\1\121\1\7"+
    "\1\122\10\7\1\123\3\7\1\124\3\7\1\125\1\7"+
    "\1\126\10\7\1\47\2\52\1\0\1\106\1\105\2\106"+
    "\1\2\1\127\3\7\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\136\1\7\1\137\1\7\1\140\12\7\1\0"+
    "\1\106\1\105\2\106\2\7\1\141\1\142\6\7\1\143"+
    "\6\7\1\0\1\105\1\106\1\144\1\145\1\7\1\146"+
    "\1\147\1\150\1\151\1\152\1\153\4\7\1\154\2\7"+
    "\1\155\3\7\1\156\10\7\1\157\1\7\1\160\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u0719"+
    "\0\u0768\0\u07b7\0\117\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3"+
    "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b"+
    "\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\117\0\117\0\117\0\u07b7"+
    "\0\u07b7\0\u07b7\0\u07b7\0\u07b7\0\u07b7\0\u0cf6\0\u07b7\0\u0d45"+
    "\0\u0d94\0\117\0\117\0\u0cf6\0\117\0\u0de3\0\u0e32\0\u0e81"+
    "\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c\0\u105b\0\u10aa\0\u10f9"+
    "\0\u1148\0\u1197\0\u0403\0\u11e6\0\117\0\117\0\u07b7\0\u04a1"+
    "\0\u07b7\0\u07b7\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u13c0"+
    "\0\u140f\0\u02c7\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9"+
    "\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u1812\0\u1861"+
    "\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9"+
    "\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51"+
    "\0\117\0\117\0\117\0\117\0\u07b7\0\u07b7\0\u07b7\0\u07b7"+
    "\0\117\0\117\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b"+
    "\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3"+
    "\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u10f9\0\u237d\0\u02c7"+
    "\0\u23cc\0\u241b\0\u07b7\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6"+
    "\0\u25f5\0\u02c7\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf"+
    "\0\u281e\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u2a47"+
    "\0\u2a96\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf"+
    "\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37"+
    "\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111\0\u3160\0\117"+
    "\0\u31af\0\u31fe\0\u07b7\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389"+
    "\0\u33d8\0\u3427\0\u3476\0\u07b7\0\u34c5\0\u3514\0\u3563\0\u35b2"+
    "\0\u3601\0\u3650\0\u369f\0\u02c7\0\u36ee\0\u373d\0\u02c7\0\u02c7"+
    "\0\u378c\0\u37db\0\u382a\0\u3879\0\u02c7\0\u02c7\0\u38c8\0\u3917"+
    "\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2\0\u02c7\0\u3af1\0\u3b40"+
    "\0\u3b8f\0\u3bde\0\u3c2d\0\u02c7\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69"+
    "\0\u3db8\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u02c7\0\u3f92"+
    "\0\u07b7\0\u3fe1\0\u4030\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb"+
    "\0\u420a\0\u4259\0\u02c7\0\u42a8\0\u42f7\0\u4346\0\u0cf6\0\u4395"+
    "\0\u02c7\0\u43e4\0\u02c7\0\u4433\0\u4482\0\u44d1\0\u4520\0\u456f"+
    "\0\u45be\0\u460d\0\u465c\0\u02c7\0\u46ab\0\u46fa\0\u4749\0\u02c7"+
    "\0\u4798\0\u47e7\0\u4836\0\u02c7\0\u4885\0\u02c7\0\u48d4\0\u4923"+
    "\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b"+
    "\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u07b7\0\u4d26\0\u4d75\0\u02c7"+
    "\0\u4dc4\0\u4e13\0\u4e62\0\u02c7\0\u02c7\0\u02c7\0\u02c7\0\u02c7"+
    "\0\u02c7\0\u02c7\0\u4eb1\0\u4f00\0\u4f4f\0\u02c7\0\u4f9e\0\u4fed"+
    "\0\u503c\0\u508b\0\u50da\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265"+
    "\0\u52b4\0\u5303\0\u5352\0\u53a1\0\u416c\0\u53f0\0\u543f\0\u02c7"+
    "\0\u02c7\0\u548e\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u5619\0\u02c7"+
    "\0\u5668\0\u56b7\0\u5706\0\u5755\0\u57a4\0\u57f3\0\u5842\0\u5891"+
    "\0\u58e0\0\u02c7\0\u02c7\0\u592f\0\u02c7\0\u02c7\0\u02c7\0\u02c7"+
    "\0\u02c7\0\u02c7\0\u597e\0\u59cd\0\u5a1c\0\u5a6b\0\u02c7\0\u5aba"+
    "\0\u5b09\0\u02c7\0\u5b58\0\u5ba7\0\u5bf6\0\u02c7\0\u5c45\0\u5c94"+
    "\0\u5ce3\0\u5d32\0\u5d81\0\u5dd0\0\u5e1f\0\u5e6e\0\u02c7\0\u5ebd"+
    "\0\u02c7\0\u02c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\2\12\1\13\1\14\1\12\1\15\2\12\2\13"+
    "\1\16\1\12\1\17\2\12\1\20\1\2\1\21\1\22"+
    "\1\23\1\12\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\5\1\35\1\36\1\37\1\12"+
    "\1\40\1\41\4\12\1\42\1\12\1\43\1\12\1\44"+
    "\1\12\1\45\6\12\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\2\3\0\5\2\12\66\1\0"+
    "\1\66\1\2\2\66\1\0\1\2\1\0\1\2\10\66"+
    "\1\0\1\2\2\0\1\2\26\66\3\2\2\0\5\2"+
    "\10\0\1\67\115\0\1\67\120\0\1\5\2\0\1\5"+
    "\40\0\1\5\47\0\1\2\3\0\1\70\2\2\1\71"+
    "\1\2\12\66\1\0\1\66\1\2\2\66\1\0\1\2"+
    "\1\0\1\2\10\66\1\0\1\2\2\0\1\2\26\66"+
    "\1\2\1\72\1\2\2\0\5\2\6\0\1\2\2\0"+
    "\1\5\2\2\1\7\2\2\12\66\1\0\1\66\1\2"+
    "\2\66\1\0\1\2\1\0\1\2\10\66\1\0\1\2"+
    "\1\0\1\5\1\2\26\66\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\66\1\0\1\66\1\2\2\66"+
    "\1\0\1\2\1\0\1\2\10\66\1\0\1\2\2\0"+
    "\1\2\26\66\1\2\1\73\1\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\1\74\3\66\2\74\4\66\1\0"+
    "\1\74\1\2\1\74\1\66\1\0\1\2\1\0\1\2"+
    "\3\74\1\66\4\74\1\0\1\2\2\0\1\2\2\66"+
    "\1\74\5\66\2\74\14\66\1\2\1\75\1\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\76\3\0\5\76\2\77\1\100\1\101\4\77\2\100"+
    "\1\102\1\77\1\76\2\77\1\0\1\76\1\0\1\76"+
    "\10\77\1\0\1\76\2\0\1\76\26\77\3\76\2\0"+
    "\5\76\6\0\1\103\3\0\5\103\2\104\1\105\1\106"+
    "\1\107\2\104\1\110\2\106\1\102\1\104\1\103\2\104"+
    "\1\0\1\103\1\0\1\103\10\104\1\0\1\103\2\0"+
    "\1\103\3\104\1\110\4\104\1\107\15\104\3\103\2\0"+
    "\5\103\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\3\12\1\111"+
    "\4\12\1\0\1\2\2\0\1\2\2\12\1\112\23\12"+
    "\3\2\2\0\5\2\21\0\2\113\4\0\2\113\1\0"+
    "\1\114\15\0\1\114\54\0\1\2\3\0\5\2\12\66"+
    "\1\0\1\66\1\115\2\66\1\0\1\2\1\0\1\2"+
    "\10\66\1\0\1\2\2\0\1\2\26\66\1\2\1\116"+
    "\1\2\1\0\1\117\5\2\6\0\2\120\1\121\25\120"+
    "\1\122\1\123\65\120\2\124\1\125\26\124\1\126\1\0"+
    "\64\124\1\2\3\0\5\2\12\66\1\0\1\66\1\2"+
    "\2\66\1\0\1\2\1\0\1\35\1\127\4\66\1\130"+
    "\1\131\1\66\1\0\1\2\2\0\1\35\26\66\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\5\12\1\132"+
    "\4\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\1\12\1\133\6\12\1\0\1\2\2\0\1\2"+
    "\26\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\10\12\1\0\1\2\2\0\1\2\1\134\1\12"+
    "\1\135\3\12\1\136\17\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\2\12\1\137\23\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\1\12\1\140\6\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\6\12\1\141\1\12\1\0"+
    "\1\2\2\0\1\2\2\12\1\142\23\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\1\12\1\143"+
    "\1\12\1\144\4\12\1\0\1\2\2\0\1\2\10\12"+
    "\1\145\15\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\1\146\7\12\1\0\1\2\2\0\1\2"+
    "\1\12\1\147\4\12\1\150\4\12\1\151\12\12\3\2"+
    "\2\0\5\2\125\0\1\2\3\0\5\2\12\66\1\0"+
    "\1\66\1\2\2\66\1\0\1\2\1\0\1\35\10\66"+
    "\1\0\1\2\2\0\1\35\26\66\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\4\12\1\152\3\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\14\12\1\153\11\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\4\12\1\154\21\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\6\12\1\155\1\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\2\12\1\156\23\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\6\12\1\157\17\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\1\160\6\12\1\161\2\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\20\12\1\162\1\163"+
    "\1\164\1\165\1\166\1\167\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\2\12\1\170\23\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\66\1\0\1\66\1\2\2\66"+
    "\1\0\1\2\1\0\1\2\10\66\1\0\1\2\2\0"+
    "\1\2\26\66\1\171\1\172\1\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\66\1\0\1\66\1\2\2\66"+
    "\1\0\1\2\1\0\1\2\10\66\1\0\1\2\2\0"+
    "\1\2\26\66\1\2\1\173\1\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\66\1\0\1\66\1\2\2\66"+
    "\1\0\1\2\1\0\1\2\10\66\1\0\1\2\2\0"+
    "\1\2\26\66\1\2\1\174\1\2\2\0\5\2\106\0"+
    "\1\175\1\0\1\176\114\0\1\177\2\0\1\200\13\0"+
    "\1\2\3\0\5\2\12\66\1\0\1\66\1\2\2\66"+
    "\1\0\1\2\1\0\1\2\10\66\1\0\1\2\2\0"+
    "\1\2\26\66\3\2\2\0\1\201\4\2\6\0\1\2"+
    "\3\0\5\2\12\66\1\0\1\66\1\2\2\66\1\0"+
    "\1\2\1\0\1\2\10\66\1\0\1\2\2\0\1\2"+
    "\26\66\3\2\2\0\1\2\1\202\3\2\17\0\12\66"+
    "\1\0\1\66\1\0\2\66\4\0\10\66\5\0\26\66"+
    "\20\0\1\70\2\0\1\203\1\70\2\2\2\70\14\203"+
    "\1\70\3\203\1\70\1\203\1\70\11\203\1\70\2\203"+
    "\1\70\26\203\3\70\2\203\5\70\6\203\1\71\3\204"+
    "\3\71\1\205\1\71\14\204\1\71\3\204\1\71\1\204"+
    "\1\71\11\204\1\71\2\204\1\71\26\204\3\71\2\204"+
    "\5\71\6\204\1\76\3\0\5\76\2\206\2\66\4\206"+
    "\2\66\1\0\1\206\1\76\2\206\1\0\1\76\1\0"+
    "\1\76\10\206\1\0\1\76\2\0\1\76\26\206\3\76"+
    "\2\0\5\76\6\0\1\76\3\0\5\76\2\77\2\207"+
    "\4\77\2\207\1\0\1\77\1\76\2\77\1\0\1\76"+
    "\1\0\1\76\10\77\1\0\1\76\2\0\1\76\26\77"+
    "\3\76\2\0\5\76\6\0\1\2\3\0\5\2\2\207"+
    "\1\100\1\101\4\207\2\100\1\102\1\207\1\2\2\207"+
    "\1\0\1\2\1\0\1\2\10\207\1\0\1\2\2\0"+
    "\1\2\26\207\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\2\210\2\101\4\210\2\101\1\102\1\210\1\2"+
    "\2\210\1\0\1\2\1\0\1\2\10\210\1\0\1\2"+
    "\2\0\1\2\26\210\3\2\2\0\5\2\6\0\1\211"+
    "\3\0\2\211\2\0\3\211\2\102\4\211\2\102\1\211"+
    "\1\212\1\0\14\211\1\212\2\211\3\0\27\211\1\0"+
    "\11\211\1\0\5\211\1\103\3\0\5\103\2\213\1\214"+
    "\1\66\1\214\2\213\1\214\2\66\1\0\1\213\1\103"+
    "\2\213\1\0\1\103\1\0\1\103\10\213\1\0\1\103"+
    "\2\0\1\103\3\213\1\214\4\213\1\214\15\213\3\103"+
    "\2\0\5\103\6\0\1\103\3\0\5\103\2\104\1\215"+
    "\1\210\1\215\2\104\1\215\2\210\1\0\1\104\1\103"+
    "\2\104\1\0\1\103\1\0\1\103\10\104\1\0\1\103"+
    "\2\0\1\103\3\104\1\215\4\104\1\215\15\104\3\103"+
    "\2\0\5\103\6\0\1\216\3\0\5\216\2\215\1\105"+
    "\1\217\4\215\2\217\1\220\1\215\1\216\2\215\1\0"+
    "\1\216\1\0\1\216\10\215\1\0\1\216\2\0\1\216"+
    "\26\215\3\216\2\0\5\216\6\0\1\216\3\0\5\216"+
    "\2\215\1\105\1\106\4\215\2\106\1\220\1\215\1\216"+
    "\2\215\1\0\1\216\1\0\1\216\10\215\1\0\1\216"+
    "\2\0\1\216\26\215\3\216\2\0\5\216\6\0\1\221"+
    "\3\0\7\221\2\222\1\221\5\222\1\223\1\222\3\221"+
    "\1\0\1\221\1\0\3\221\1\222\2\221\2\222\1\221"+
    "\1\0\1\221\2\0\1\221\1\222\2\221\1\222\14\221"+
    "\2\222\7\221\2\0\5\221\6\0\1\224\3\0\5\224"+
    "\3\225\1\226\4\225\1\226\1\225\1\0\1\225\1\224"+
    "\2\225\1\0\1\224\1\0\1\224\10\225\1\0\1\224"+
    "\2\0\1\224\26\225\3\224\2\0\5\224\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\2\12\1\227\23\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\4\12\1\230\21\12\3\2\2\0\5\2\6\0\1\114"+
    "\3\0\17\114\1\0\4\114\1\0\1\114\1\0\11\114"+
    "\1\0\1\114\2\0\32\114\2\0\5\114\6\0\1\120"+
    "\2\0\2\120\2\0\110\120\2\231\1\0\26\231\1\232"+
    "\1\233\64\231\32\0\1\233\64\0\1\124\2\0\2\124"+
    "\2\0\110\124\11\0\5\66\1\234\4\66\1\0\1\66"+
    "\1\0\2\66\4\0\1\66\1\235\6\66\5\0\26\66"+
    "\31\0\12\66\1\0\1\66\1\0\2\66\4\0\6\66"+
    "\1\236\1\66\5\0\26\66\31\0\12\66\1\0\1\66"+
    "\1\0\2\66\4\0\1\66\1\237\1\66\1\240\4\66"+
    "\5\0\26\66\20\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\3\12"+
    "\1\241\4\12\1\0\1\2\2\0\1\2\1\12\1\242"+
    "\24\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\7\12\1\243\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\1\12\1\244\6\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\1\245\25\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\12"+
    "\1\246\6\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\247"+
    "\6\12\1\250\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\5\12\1\251"+
    "\4\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\10\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\4\12"+
    "\1\252\3\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\4\12"+
    "\1\253\3\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\7\12"+
    "\1\254\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\1\12\1\255\24\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\11\12\1\256\1\257\13\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\1\260\3\12\1\261\21\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\2\12\1\262\23\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\1\263\7\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\1\12\1\264\24\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\1\265\1\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\6\12\1\266"+
    "\1\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\7\12\1\267"+
    "\1\0\1\2\2\0\1\2\1\12\1\270\7\12\1\271"+
    "\14\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\10\12\1\0\1\2\2\0\1\2\1\12\1\272"+
    "\24\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\1\273\7\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\6\12\1\274\1\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\2\12\1\275\23\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\3\12\1\276\4\12\1\0\1\2\2\0\1\2\1\12"+
    "\1\277\24\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\2\12"+
    "\1\300\23\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\7\12"+
    "\1\301\16\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\2\12"+
    "\1\302\23\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\1\12"+
    "\1\303\24\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\6\12"+
    "\1\304\17\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\1\305\2\12\1\306\4\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\203"+
    "\2\0\2\203\2\0\110\203\7\204\1\307\107\204\1\71"+
    "\3\204\1\310\2\71\1\205\1\71\14\204\1\71\3\204"+
    "\1\71\1\204\1\71\11\204\1\71\2\204\1\71\26\204"+
    "\3\71\2\204\5\71\6\204\1\311\3\0\5\311\2\206"+
    "\2\66\4\206\2\66\1\0\1\206\1\311\2\206\1\0"+
    "\1\311\1\0\1\311\10\206\1\0\1\311\2\0\1\311"+
    "\26\206\3\311\2\0\5\311\6\0\1\2\3\0\5\2"+
    "\12\207\1\0\1\207\1\2\2\207\1\0\1\2\1\0"+
    "\1\2\10\207\1\0\1\2\2\0\1\2\26\207\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\210\1\0"+
    "\1\210\1\2\2\210\1\0\1\2\1\0\1\2\10\210"+
    "\1\0\1\2\2\0\1\2\26\210\3\2\2\0\5\2"+
    "\6\0\1\211\3\0\2\211\1\0\40\211\1\0\47\211"+
    "\1\114\3\0\7\114\2\312\4\114\2\312\1\313\1\114"+
    "\1\314\2\114\1\313\1\114\1\313\11\114\1\313\1\114"+
    "\1\313\1\0\27\114\1\314\2\114\2\313\5\114\6\313"+
    "\1\315\3\0\5\315\2\213\1\214\1\66\1\214\2\213"+
    "\1\214\2\66\1\0\1\213\1\315\2\213\1\0\1\315"+
    "\1\0\1\315\10\213\1\0\1\315\2\0\1\315\3\213"+
    "\1\214\4\213\1\214\15\213\3\315\2\0\5\315\6\0"+
    "\1\316\3\0\5\316\3\214\1\66\4\214\2\66\1\0"+
    "\1\214\1\316\2\214\1\0\1\316\1\0\1\316\10\214"+
    "\1\0\1\316\2\0\1\316\26\214\3\316\2\0\5\316"+
    "\6\0\1\216\3\0\5\216\3\215\1\210\4\215\2\210"+
    "\1\0\1\215\1\216\2\215\1\0\1\216\1\0\1\216"+
    "\10\215\1\0\1\216\2\0\1\216\26\215\3\216\2\0"+
    "\5\216\6\0\1\216\3\0\5\216\3\214\1\66\4\214"+
    "\2\66\1\0\1\214\1\216\2\214\1\0\1\216\1\0"+
    "\1\216\10\214\1\0\1\216\2\0\1\216\26\214\3\216"+
    "\2\0\5\216\6\0\1\2\3\0\5\2\2\210\2\217"+
    "\4\210\2\217\1\220\1\210\1\2\2\210\1\0\1\2"+
    "\1\0\1\2\10\210\1\0\1\2\2\0\1\2\26\210"+
    "\3\2\2\0\5\2\6\0\1\211\3\0\2\211\2\0"+
    "\3\211\2\220\4\211\2\220\1\211\1\317\1\0\14\211"+
    "\1\317\2\211\3\0\27\211\1\0\11\211\1\0\5\211"+
    "\1\221\3\0\17\221\1\0\4\221\1\0\1\221\1\0"+
    "\11\221\1\0\1\221\2\0\32\221\2\0\5\221\6\0"+
    "\1\221\3\0\7\221\2\222\1\221\5\222\1\320\1\222"+
    "\3\221\1\0\1\221\1\0\3\221\1\222\2\221\2\222"+
    "\1\221\1\0\1\221\2\0\1\221\1\222\2\221\1\222"+
    "\14\221\2\222\7\221\2\0\5\221\21\0\2\223\1\0"+
    "\5\223\1\0\1\223\1\0\2\321\6\0\1\223\2\0"+
    "\2\223\6\0\1\223\2\0\1\223\14\0\2\223\24\0"+
    "\1\224\3\0\5\224\3\322\1\66\4\322\1\66\1\322"+
    "\1\0\1\322\1\224\2\322\1\0\1\224\1\0\1\224"+
    "\10\322\1\0\1\224\2\0\1\224\26\322\3\224\2\0"+
    "\5\224\6\0\1\224\3\0\5\224\3\225\1\210\4\225"+
    "\1\210\1\225\1\0\1\225\1\224\2\225\1\0\1\224"+
    "\1\0\1\224\10\225\1\0\1\224\2\0\1\224\26\225"+
    "\3\224\2\0\5\224\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\1\323\25\12\3\2"+
    "\2\0\5\2\6\0\2\231\1\0\26\231\1\232\1\324"+
    "\65\231\2\0\2\231\2\0\110\231\11\0\12\66\1\0"+
    "\1\66\1\0\2\66\4\0\1\66\1\325\3\66\1\326"+
    "\2\66\5\0\26\66\31\0\12\66\1\0\1\66\1\0"+
    "\2\66\4\0\2\66\1\327\5\66\5\0\26\66\31\0"+
    "\5\66\1\330\4\66\1\0\1\66\1\0\2\66\4\0"+
    "\10\66\5\0\26\66\31\0\12\66\1\0\1\66\1\0"+
    "\2\66\4\0\5\66\1\331\2\66\5\0\26\66\31\0"+
    "\12\66\1\0\1\66\1\0\2\66\4\0\7\66\1\332"+
    "\5\0\26\66\20\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\333"+
    "\7\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\6\12\1\334"+
    "\1\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\7\12\1\335"+
    "\1\0\1\2\2\0\1\2\1\12\1\336\24\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\4\12\1\337\21\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\11\12\1\340\14\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\2\12\1\341\23\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\342"+
    "\7\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\1\343\25\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\3\12\1\344\22\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\7\12\1\345\16\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\6\12\1\346\1\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\6\12\1\347\1\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\1\12\1\350\6\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\6\12\1\351\1\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\1\12\1\352\24\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\4\12\1\353\3\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\4\12\1\354\21\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\1\12\1\355\24\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\2\12\1\356\23\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\6\12\1\357\1\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\1\360\25\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\1\12\1\361\24\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\4\12\1\362\3\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\1\363\7\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\2\12\1\364\23\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\3\12\1\365\4\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\1\12\1\366\6\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\2\12\1\367\23\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\1\370\7\12\1\0\1\2\2\0"+
    "\1\2\26\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\2\12"+
    "\1\371\23\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\7\12"+
    "\1\372\16\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\1\373"+
    "\25\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\10\12\1\0\1\2\2\0\1\2\4\12\1\374"+
    "\21\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\10\12\1\0\1\2\2\0\1\2\1\375\25\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\4\12\1\376\21\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\5\12\1\377\2\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\1\u0100\25\12\3\2"+
    "\2\0\5\2\6\0\4\204\1\u0101\2\204\1\307\107\204"+
    "\1\311\3\0\7\311\2\0\4\311\3\0\4\311\1\0"+
    "\1\311\1\0\11\311\1\0\1\311\2\0\32\311\2\0"+
    "\5\311\6\0\1\u0102\3\0\2\u0102\2\114\3\u0102\2\u0103"+
    "\4\u0102\2\u0103\1\211\1\u0104\1\114\2\u0102\1\211\1\u0102"+
    "\1\211\7\u0102\1\u0104\1\u0102\1\211\1\114\1\313\1\0"+
    "\27\u0102\1\114\2\u0102\2\211\5\u0102\1\313\5\211\1\114"+
    "\3\0\7\114\2\312\4\114\2\312\1\313\4\114\1\313"+
    "\1\114\1\313\11\114\1\313\1\114\1\313\1\0\32\114"+
    "\2\313\5\114\6\313\1\315\3\0\7\315\1\316\1\0"+
    "\1\316\2\315\1\316\3\0\4\315\1\0\1\315\1\0"+
    "\11\315\1\0\1\315\2\0\4\315\1\316\4\315\1\316"+
    "\20\315\2\0\5\315\6\0\1\316\3\0\10\316\1\0"+
    "\4\316\3\0\4\316\1\0\1\316\1\0\11\316\1\0"+
    "\1\316\2\0\32\316\2\0\5\316\6\0\1\114\3\0"+
    "\7\114\2\u0105\4\114\2\u0105\1\313\1\114\1\u0106\2\114"+
    "\1\313\1\114\1\313\11\114\1\313\1\114\1\313\1\0"+
    "\27\114\1\u0106\2\114\2\313\5\114\6\313\7\u0107\1\0"+
    "\3\u0107\2\320\1\u0107\5\320\1\u0108\1\320\1\0\2\u0109"+
    "\6\u0107\1\320\2\u0107\2\320\2\u0107\2\0\2\u0107\1\320"+
    "\2\u0107\1\320\14\u0107\2\320\4\u0107\1\0\11\u0107\1\0"+
    "\5\u0107\1\321\3\0\17\321\1\0\4\321\1\0\1\321"+
    "\1\0\11\321\1\0\1\321\2\0\32\321\2\0\5\321"+
    "\6\0\1\u010a\3\0\5\u010a\3\322\1\66\4\322\1\66"+
    "\1\322\1\0\1\322\1\u010a\2\322\1\0\1\u010a\1\0"+
    "\1\u010a\10\322\1\0\1\u010a\2\0\1\u010a\26\322\3\u010a"+
    "\2\0\5\u010a\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\1\12\1\u010b\24\12\3\2"+
    "\2\0\5\2\17\0\12\66\1\0\1\66\1\0\2\66"+
    "\4\0\5\66\1\326\2\66\5\0\26\66\31\0\12\66"+
    "\1\0\1\66\1\0\2\66\4\0\6\66\1\u010c\1\66"+
    "\5\0\26\66\31\0\12\66\1\0\1\66\1\0\2\66"+
    "\4\0\3\66\1\u010d\4\66\5\0\26\66\31\0\12\66"+
    "\1\0\1\66\1\0\2\66\4\0\1\u010e\7\66\5\0"+
    "\26\66\31\0\12\66\1\0\1\66\1\0\2\66\4\0"+
    "\1\u010c\7\66\5\0\26\66\31\0\12\66\1\0\1\66"+
    "\1\0\2\66\4\0\6\66\1\u010f\1\66\5\0\26\66"+
    "\20\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\1\12\1\u0110\6\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\1\12\1\u0111\24\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\1\u0112\7\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\1\12\1\u0113\6\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\11\12\1\u0114\14\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\4\12\1\u0115\3\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\3\12\1\u0116\4\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\4\12\1\u0117\21\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\6\12\1\u0118\1\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\2\12\1\u0119\23\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\1\u011a\7\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\2\12\1\u011b\5\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\1\12\1\u011c\24\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\2\12\1\u011d\5\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\5\12\1\u011e\2\12\1\0\1\2"+
    "\2\0\1\2\2\12\1\u011f\23\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\5\12\1\u0120\20\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\4\12\1\u0121\21\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\4\12\1\u0122\21\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\7\12\1\u0123\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\6\12\1\u0124\1\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\6\12\1\u0125\1\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\3\12\1\u0126\4\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\11\12\1\u0127\14\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\7\12\1\u0128\16\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\1\u0129"+
    "\1\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\11\12\1\u012a\14\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\6\12\1\u012b\1\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\1\12\1\u012c\24\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\6\12\1\u012d\1\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\1\12\1\u012e\24\12\3\2\2\0\5\2\6\0\1\u0102"+
    "\3\0\2\u0102\1\114\14\u0102\1\211\4\u0102\1\211\1\u0102"+
    "\1\211\11\u0102\1\211\1\u0102\1\211\1\0\32\u0102\2\211"+
    "\5\u0102\6\211\1\114\3\0\7\114\2\u0103\4\114\2\u0103"+
    "\1\313\1\u0104\3\114\1\313\1\114\1\313\7\114\1\u0104"+
    "\1\114\1\313\1\114\1\313\1\0\32\114\2\313\5\114"+
    "\6\313\1\114\3\0\7\114\2\u012f\4\114\2\u012f\1\0"+
    "\1\114\1\u0130\2\114\1\0\1\114\1\0\11\114\1\0"+
    "\1\114\2\0\27\114\1\u0130\2\114\2\0\5\114\6\0"+
    "\1\u0102\3\0\2\u0102\2\114\3\u0102\2\u0131\4\u0102\2\u0131"+
    "\1\211\2\114\2\u0102\1\211\1\u0102\1\211\7\u0102\1\114"+
    "\1\u0102\1\211\1\114\1\313\1\0\27\u0102\1\114\2\u0102"+
    "\2\211\5\u0102\1\313\5\211\1\114\3\0\7\114\2\u0105"+
    "\4\114\2\u0105\1\313\4\114\1\313\1\114\1\313\11\114"+
    "\1\313\1\114\1\313\1\0\32\114\2\313\5\114\6\313"+
    "\2\0\1\u0132\114\0\1\u0133\1\0\1\u0132\1\0\2\u0133"+
    "\1\0\40\u0133\1\0\47\u0133\1\321\3\0\7\321\2\u0134"+
    "\4\321\2\u0134\1\u0135\1\321\1\u0136\2\321\1\u0135\1\321"+
    "\1\u0135\11\321\1\u0135\1\321\1\u0135\1\0\27\321\1\u0136"+
    "\2\321\2\u0135\5\321\6\u0135\1\u010a\3\0\10\u010a\1\0"+
    "\4\u010a\1\0\1\u010a\1\0\4\u010a\1\0\1\u010a\1\0"+
    "\11\u010a\1\0\1\u010a\2\0\32\u010a\2\0\5\u010a\17\0"+
    "\5\66\1\u010f\4\66\1\0\1\66\1\0\2\66\4\0"+
    "\10\66\5\0\26\66\31\0\12\66\1\0\1\66\1\0"+
    "\2\66\4\0\4\66\1\u0137\3\66\5\0\26\66\31\0"+
    "\12\66\1\0\1\66\1\0\2\66\4\0\1\66\1\332"+
    "\6\66\5\0\26\66\20\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\6\12\1\u0138\1\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\1\12\1\u0139\6\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\1\12\1\u013a\6\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\3\12\1\u013b\4\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\6\12\1\u013c\1\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\1\12\1\u013d\6\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\5\12\1\u013e\2\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\5\12"+
    "\1\u013f\4\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\2\12\1\u0140\5\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\1\12\1\u0141\24\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\6\12\1\u0142\17\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\6\12\1\u0143\1\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\5\12"+
    "\1\u0144\4\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\26\12"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\5\2\12\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\1\u0145\7\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\12"+
    "\1\u0146\6\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\1\12\1\u0147\24\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\4\12\1\u0148\21\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\12"+
    "\1\u0149\6\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\u014a"+
    "\7\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\3\12\1\u014b"+
    "\4\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\1\u014c\7\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\1\12\1\u014d\24\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\1\u014e\7\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\1\u014f\25\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\1\u0150\7\12\1\0\1\2\2\0"+
    "\1\2\26\12\3\2\2\0\5\2\6\0\1\114\3\0"+
    "\7\114\2\u012f\4\114\2\u012f\1\0\1\u0104\3\114\1\0"+
    "\1\114\1\0\7\114\1\u0104\1\114\1\0\1\114\2\0"+
    "\32\114\2\0\5\114\6\0\1\114\3\0\7\114\2\u012f"+
    "\4\114\2\u012f\1\0\4\114\1\0\1\114\1\0\11\114"+
    "\1\0\1\114\2\0\32\114\2\0\5\114\6\0\1\114"+
    "\3\0\7\114\2\u0131\4\114\2\u0131\1\313\4\114\1\313"+
    "\1\114\1\313\11\114\1\313\1\114\1\313\1\0\32\114"+
    "\2\313\5\114\6\313\6\0\1\u0151\110\0\1\u0133\3\0"+
    "\2\u0133\1\0\40\u0133\1\0\47\u0133\1\u0152\3\u0107\3\u0152"+
    "\1\321\3\u0152\2\u0153\1\u0152\3\321\2\u0153\1\u0108\2\321"+
    "\2\u0154\1\u0155\1\u0152\1\u0155\3\u0152\1\321\2\u0152\2\321"+
    "\1\u0152\1\u0155\1\321\1\u0135\1\u0107\1\u0152\1\321\2\u0152"+
    "\1\321\14\u0152\2\321\4\u0152\1\321\2\u0152\2\u0155\5\u0152"+
    "\1\u0135\5\u0155\1\321\3\0\7\321\2\u0134\4\321\2\u0134"+
    "\1\u0135\4\321\1\u0135\1\321\1\u0135\11\321\1\u0135\1\321"+
    "\1\u0135\1\0\32\321\2\u0135\5\321\6\u0135\11\0\12\66"+
    "\1\0\1\66\1\0\2\66\4\0\5\66\1\332\2\66"+
    "\5\0\26\66\20\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\4\12"+
    "\1\u0156\3\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\6\12"+
    "\1\u0157\1\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\1\12\1\u0158\24\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\5\12\1\u0159"+
    "\4\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\10\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\15\12\1\u015a\10\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\2\12"+
    "\1\u015b\5\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\6\12"+
    "\1\u015c\1\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\u015d"+
    "\7\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\1\u015e\1\12\1\u015f\23\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\2\12"+
    "\1\u0160\5\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\6\12"+
    "\1\u0161\1\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\1\12"+
    "\1\u0162\6\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\4\12"+
    "\1\u0163\3\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\2\12"+
    "\1\u0164\5\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\5\12"+
    "\1\u0165\2\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\3\12"+
    "\1\u0166\4\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\7\0\1\u0167\115\0\1\321\1\0\1\u0132"+
    "\1\0\17\321\1\0\4\321\1\0\1\321\1\0\11\321"+
    "\1\0\1\321\2\0\32\321\2\0\5\321\6\0\1\321"+
    "\3\0\7\321\2\u0153\4\321\2\u0153\1\u0135\2\321\2\u0154"+
    "\1\u0135\1\321\1\u0135\11\321\1\u0135\1\321\1\u0135\1\0"+
    "\32\321\2\u0135\5\321\6\u0135\1\321\3\0\7\321\2\u0168"+
    "\4\321\2\u0168\1\0\1\321\1\u0169\2\321\1\0\1\321"+
    "\1\0\11\321\1\0\1\321\2\0\27\321\1\u0169\2\321"+
    "\2\0\5\321\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\6\12"+
    "\1\u016a\1\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\5\12"+
    "\1\u016b\2\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\4\12"+
    "\1\u016c\3\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\1\12\1\u016d\24\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\10\12"+
    "\1\0\1\2\2\0\1\2\4\12\1\u016e\21\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\2\12"+
    "\1\u016f\5\12\1\0\1\2\2\0\1\2\26\12\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\5\2\12\12\1\0"+
    "\1\12\1\2\2\12\1\0\1\2\1\0\1\2\7\12"+
    "\1\u0170\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\5\12\1\u0171\4\12"+
    "\1\0\1\12\1\2\2\12\1\0\1\2\1\0\1\2"+
    "\10\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\10\12\1\u0172\15\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\1\u0173\25\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\4\12\1\u0174\21\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\15\12\1\u0175\10\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\15\12\1\u0176\10\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\6\12\1\u0177\1\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\55\0\1\u0133\47\0\1\321\3\0\7\321\2\u0168\4\321"+
    "\2\u0168\1\0\2\321\2\u0154\1\0\1\321\1\0\11\321"+
    "\1\0\1\321\2\0\32\321\2\0\5\321\6\0\1\321"+
    "\3\0\7\321\2\u0168\4\321\2\u0168\1\0\4\321\1\0"+
    "\1\321\1\0\11\321\1\0\1\321\2\0\32\321\2\0"+
    "\5\321\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\1\12\1\u0178"+
    "\6\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\4\12\1\u0179\21\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\1\12\1\u017a"+
    "\6\12\1\0\1\2\2\0\1\2\26\12\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\5\2\12\12\1\0\1\12"+
    "\1\2\2\12\1\0\1\2\1\0\1\2\10\12\1\0"+
    "\1\2\2\0\1\2\1\u017b\25\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\3\12\1\u017c\4\12"+
    "\1\0\1\2\2\0\1\2\26\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\16\12\1\u017d\7\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\10\12\1\0\1\2"+
    "\2\0\1\2\14\12\1\u017e\11\12\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\5\2\12\12\1\0\1\12\1\2"+
    "\2\12\1\0\1\2\1\0\1\2\7\12\1\u017f\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\10\12\1\0\1\2\2\0"+
    "\1\2\2\12\1\u0180\23\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\4\12\1\u0181\3\12\1\0"+
    "\1\2\2\0\1\2\26\12\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\5\2\12\12\1\0\1\12\1\2\2\12"+
    "\1\0\1\2\1\0\1\2\7\12\1\u0182\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\2\12\1\u0183\5\12\1\0\1\2"+
    "\2\0\1\2\26\12\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\5\2\12\12\1\0\1\12\1\2\2\12\1\0"+
    "\1\2\1\0\1\2\10\12\1\0\1\2\2\0\1\2"+
    "\1\u0184\25\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\6\12\1\u0185\1\12\1\0\1\2\2\0"+
    "\1\2\26\12\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\5\2\12\12\1\0\1\12\1\2\2\12\1\0\1\2"+
    "\1\0\1\2\10\12\1\0\1\2\2\0\1\2\1\u0186"+
    "\25\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\3\12\1\u0187\4\12\1\0\1\2\2\0\1\2"+
    "\26\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\10\12\1\0\1\2\2\0\1\2\4\12\1\u0188"+
    "\21\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\3\12\1\u0189\4\12\1\0\1\2\2\0\1\2"+
    "\26\12\3\2\2\0\5\2\6\0\1\2\3\0\5\2"+
    "\12\12\1\0\1\12\1\2\2\12\1\0\1\2\1\0"+
    "\1\2\10\12\1\0\1\2\2\0\1\2\1\12\1\u018a"+
    "\24\12\3\2\2\0\5\2\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24332];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\1\1\11\1\1\1\11\23\1\6\11\1\1\1\11"+
    "\23\1\1\0\3\1\1\11\1\0\2\11\1\0\1\1"+
    "\2\0\46\1\4\11\7\1\1\0\6\1\2\0\2\1"+
    "\1\0\5\1\2\0\1\11\53\1\1\0\3\1\1\11"+
    "\10\1\1\11\54\1\1\11\5\1\1\0\52\1\1\0"+
    "\2\1\1\11\33\1\1\0\25\1\1\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol symbol (int type, Object value) {
	return new Symbol(type, yyline+1, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Ignorar*/
            }
          case 114: break;
          case 2: 
            { System.err.println("Error l√©xico: [ERRIDENTIFICADOR] Caracter inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRIDENTIFICADOR]");
            }
          case 115: break;
          case 3: 
            { /* Ignorar */
            }
          case 116: break;
          case 4: 
            { System.out.println("Operador: DIVISION"); 
            return symbol(sym.DIVISION, yytext());
            }
          case 117: break;
          case 5: 
            { System.out.println("Operador: MULTIPLICACION"); 
            return symbol(sym.MULTIPLICACION, yytext());
            }
          case 118: break;
          case 6: 
            { System.out.println("Operador: MODULO"); 
            return symbol(sym.MODULO, yytext());
            }
          case 119: break;
          case 7: 
            { System.out.println("Identificador: " + yytext());
                        return symbol(sym.IDENTIFIER, yytext());
            }
          case 120: break;
          case 8: 
            { System.out.println("Literal Numerico: INT_LITERAL " + yytext());
                        return symbol(sym.INT_LITERAL, yytext());
            }
          case 121: break;
          case 9: 
            { System.out.println("Operador: PUNTO"); 
            return symbol(sym.PUNTO, yytext());
            }
          case 122: break;
          case 10: 
            { System.out.println("Operador: RESTA"); 
            return symbol(sym.RESTA, yytext());
            }
          case 123: break;
          case 11: 
            { System.err.println("Error l√©xico: Car√°cter desconocido '" + yytext() + "' en la l√≠nea " + (yyline + 1));
            }
          case 124: break;
          case 12: 
            { System.err.println("Error l√©xico: [ERROPERADOR] Operador no v√°lido '" + yytext() + "' en la linea " + (yyline + 1) + " [ERROPERADOR]");
            }
          case 125: break;
          case 13: 
            { System.out.println("Simbolo: PUNTO Y COMA"); 
            return symbol(sym.PUNTO_Y_COMA, yytext());
            }
          case 126: break;
          case 14: 
            { System.out.println("Operador: CONDICIONAL"); 
            return symbol(sym.CONDICIONAL, yytext());
            }
          case 127: break;
          case 15: 
            { System.out.println("Simbolo: PARENTESIS DER"); 
            return symbol(sym.PARENTESIS_DER, yytext());
            }
          case 128: break;
          case 16: 
            { System.out.println("Operador: SUMA"); 
            return symbol(sym.SUMA, yytext());
            }
          case 129: break;
          case 17: 
            { System.out.println("Operador: ASIGNACION"); 
            return symbol(sym.ASIGNACION, yytext());
            }
          case 130: break;
          case 18: 
            { System.out.println("Operador: NOT LOGICO"); 
            return symbol(sym.NOT, yytext());
            }
          case 131: break;
          case 19: 
            { System.out.println("Operador: MENOR QUE"); 
            return symbol(sym.MENOR_QUE, yytext());
            }
          case 132: break;
          case 20: 
            { System.out.println("Operador: MAYOR QUE"); 
            return symbol(sym.MAYOR_QUE, yytext());
            }
          case 133: break;
          case 21: 
            { System.out.println("Operador: AND BIT A BIT"); 
            return symbol(sym.AND_BIT, yytext());
            }
          case 134: break;
          case 22: 
            { System.out.println("Operador: OR BIT A BIT"); 
            return symbol(sym.OR_BIT, yytext());
            }
          case 135: break;
          case 23: 
            { System.out.println("Operador: XOR BIT A BIT"); 
            return symbol(sym.XOR_BIT, yytext());
            }
          case 136: break;
          case 24: 
            { System.out.println("Operador: NOT BIT A BIT"); 
            return symbol(sym.NOT_BIT, yytext());
            }
          case 137: break;
          case 25: 
            { System.out.println("Operador: DOS PUNTOS"); 
            return symbol(sym.DOS_PUNTOS, yytext());
            }
          case 138: break;
          case 26: 
            { System.out.println("Simbolo: PARENTESIS IZQ"); 
            return symbol(sym.PARENTESIS_IZQ, yytext());
            }
          case 139: break;
          case 27: 
            { System.out.println("Simbolo: CORCHETE IZQ"); 
            return symbol(sym.CORCHETE_IZQ, yytext());
            }
          case 140: break;
          case 28: 
            { System.out.println("Simbolo: CORCHETE DER"); 
            return symbol(sym.CORCHETE_DER, yytext());
            }
          case 141: break;
          case 29: 
            { System.out.println("Simbolo: LLAVE IZQ"); 
            return symbol(sym.LLAVE_IZQ, yytext());
            }
          case 142: break;
          case 30: 
            { System.out.println("Simbolo: LLAVE DER"); 
            return symbol(sym.LLAVE_DER, yytext());
            }
          case 143: break;
          case 31: 
            { System.out.println("Simbolo: COMA"); 
            return symbol(sym.COMA, yytext());
            }
          case 144: break;
          case 32: 
            { System.out.println("Comentario: UNILINEA");
                                return symbol(sym.COMENTARIO_UNILINEA,yytext());
            }
          case 145: break;
          case 33: 
            { System.err.println("Error l√©xico: [ERRCOMMULTILINEA] Comentario multilinea sin cerrar '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRCOMMULTILINEA]");
            }
          case 146: break;
          case 34: 
            { System.out.println("Operador: DIVISION Y ASIGNACION"); 
            return symbol(sym.DIV_ASIGNACION, yytext());
            }
          case 147: break;
          case 35: 
            { System.out.println("Operador: MULTIPLICACION Y ASIGNACION"); 
            return symbol(sym.MULT_ASIGNACION, yytext());
            }
          case 148: break;
          case 36: 
            { System.out.println("Caracter de Formato: " + yytext()); 
                    return symbol(sym.CARACTERDEFORMATO, yytext());
            }
          case 149: break;
          case 37: 
            { System.out.println("Operador: MODULO Y ASIGNACION"); 
            return symbol(sym.MOD_ASIGNACION, yytext());
            }
          case 150: break;
          case 38: 
            { System.err.println("Error l√©xico: [ERRNUMDECIMAL] N√∫mero decimal inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMDECIMAL]");
            }
          case 151: break;
          case 39: 
            { System.out.println("Literal Numerico: DEC_FLOAT_LITERAL en la linea " + (yyline + 1));
                        return symbol(sym.FLOAT_LITERAL, yytext());
            }
          case 152: break;
          case 40: 
            { System.err.println("Error l√©xico: [ERRNUMOCTAL] N√∫mero octal inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMOCTAL]");
            }
          case 153: break;
          case 41: 
            { System.out.println("Literal Numerico: OCT_LITERAL");
                        return symbol(sym.OCT_LITERAL, yytext());
            }
          case 154: break;
          case 42: 
            { System.err.println("Error l√©xico: [ERRNUMFLOTANTE] N√∫mero flotante mal formado '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMFLOTANTE]");
            }
          case 155: break;
          case 43: 
            { System.out.println("Operador: DECREMENTO"); 
            return symbol(sym.DECREMENTO, yytext());
            }
          case 156: break;
          case 44: 
            { System.out.println("Operador: RESTA Y ASIGNACION"); 
            return symbol(sym.RESTA_ASIGNACION, yytext());
            }
          case 157: break;
          case 45: 
            { System.out.println("Operador: ACCESO PUNTERO"); 
            return symbol(sym.ACCESO_PUNTERO, yytext());
            }
          case 158: break;
          case 46: 
            { System.err.println("Error l√©xico: [ERRCADENATEXTO] Cadena de texto sin cerrar '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRCADENATEXTO]");
            }
          case 159: break;
          case 47: 
            { System.out.println("Cadena String: " + yytext()); 
                        return symbol(sym.STRING_LITERAL, yytext());
            }
          case 160: break;
          case 48: 
            { System.err.println("Error l√©xico: [ERRCADENACHAR] Cadena de char sin cerrar '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRCADENACHAR]");
            }
          case 161: break;
          case 49: 
            { System.out.println("Palabra Reservada: IF");
                    return symbol(sym.IF,yytext());
            }
          case 162: break;
          case 50: 
            { System.out.println("Palabra Reservada: DO");
                    return symbol(sym.DO,yytext());
            }
          case 163: break;
          case 51: 
            { System.out.println("Operador: INCREMENTO"); 
            return symbol(sym.INCREMENTO, yytext());
            }
          case 164: break;
          case 52: 
            { System.out.println("Operador: SUMA Y ASIGNACION"); 
            return symbol(sym.SUMA_ASIGNACION, yytext());
            }
          case 165: break;
          case 53: 
            { System.out.println("Operador: IGUALDAD"); 
            return symbol(sym.IGUALDAD, yytext());
            }
          case 166: break;
          case 54: 
            { System.out.println("Operador: DIFERENTE"); 
            return symbol(sym.DIFERENTE, yytext());
            }
          case 167: break;
          case 55: 
            { System.out.println("Operador: MENOR O IGUAL"); 
            return symbol(sym.MENOR_IGUAL, yytext());
            }
          case 168: break;
          case 56: 
            { System.out.println("Operador: DESPLAZAMIENTO IZQUIERDA"); 
            return symbol(sym.DESPLAZA_IZQ, yytext());
            }
          case 169: break;
          case 57: 
            { System.out.println("Operador: MAYOR O IGUAL"); 
            return symbol(sym.MAYOR_IGUAL, yytext());
            }
          case 170: break;
          case 58: 
            { System.out.println("Operador: DESPLAZAMIENTO DERECHA"); 
            return symbol(sym.DESPLAZA_DER, yytext());
            }
          case 171: break;
          case 59: 
            { System.out.println("Operador: AND LOGICO"); 
            return symbol(sym.AND, yytext());
            }
          case 172: break;
          case 60: 
            { System.out.println("Operador: OR LOGICO"); 
            return symbol(sym.OR, yytext());
            }
          case 173: break;
          case 61: 
            { System.err.println("Error l√©xico: [ERRNUMHEXADECIMAL] N√∫mero hexadecimal inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMHEXADECIMAL]");
            }
          case 174: break;
          case 62: 
            { System.out.println("Literal Numerico: HEX_LITERAL");
                        return symbol(sym.HEX_LITERAL, yytext());
            }
          case 175: break;
          case 63: 
            { System.err.println("Error l√©xico: [ERRNUMBINARIO] N√∫mero binario inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMBINARIO]");
            }
          case 176: break;
          case 64: 
            { System.out.println("Literal Numerico: BIN_LITERAL");
                        return symbol(sym.BIN_LITERAL, yytext());
            }
          case 177: break;
          case 65: 
            { System.out.println("Palabra Reservada: FOR");
                    return symbol(sym.FOR,yytext());
            }
          case 178: break;
          case 66: 
            { System.out.println("Cadena Char: " + yytext()); 
                        return symbol(sym.CHAR_LITERAL, yytext());
            }
          case 179: break;
          case 67: 
            { System.out.println("Palabra Reservada: INT");
                    return symbol(sym.INT,yytext());
            }
          case 180: break;
          case 68: 
            { System.out.println("Comentario: MULTILINEA");
                                return symbol(sym.COMENTARIO_MULTILINEA,yytext());
            }
          case 181: break;
          case 69: 
            { System.out.println("Literal Numerico: HEX_FLOAT_LITERAL");
                        return symbol(sym.HEX_FLOAT_LITERAL, yytext());
            }
          case 182: break;
          case 70: 
            { System.err.println("Error l√©xico: [ERRNUMHEXFLOTANTE] N√∫mero flotante mal formado '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMHEXFLOTANTE]");
            }
          case 183: break;
          case 71: 
            { System.out.println("Palabra Reservada: CASE");
                    return symbol(sym.CASE,yytext());
            }
          case 184: break;
          case 72: 
            { System.out.println("Palabra Reservada: CHAR");
                    return symbol(sym.CHAR,yytext());
            }
          case 185: break;
          case 73: 
            { System.out.println("Palabra Reservada: LONG");
                    return symbol(sym.LONG,yytext());
            }
          case 186: break;
          case 74: 
            { System.out.println("Palabra Reservada: ENUM");
                    return symbol(sym.ENUM,yytext());
            }
          case 187: break;
          case 75: 
            { System.out.println("Palabra Reservada: ELSE");
                    return symbol(sym.ELSE,yytext());
            }
          case 188: break;
          case 76: 
            { System.out.println("Palabra Reservada: AUTO");
                    return symbol(sym.AUTO,yytext());
            }
          case 189: break;
          case 77: 
            { System.out.println("Palabra Reservada: GOTO");
                    return symbol(sym.GOTO,yytext());
            }
          case 190: break;
          case 78: 
            { System.out.println("Palabra Reservada: VOID");
                    return symbol(sym.VOID,yytext());
            }
          case 191: break;
          case 79: 
            { System.out.println("Palabra Reservada: FLOAT");
                    return symbol(sym.FLOAT,yytext());
            }
          case 192: break;
          case 80: 
            { System.out.println("Directiva: " + yytext());
                        return symbol(sym.DIRECTIVAS, yytext());
            }
          case 193: break;
          case 81: 
            { System.out.println("Palabra Reservada: CONST");
                    return symbol(sym.CONST,yytext());
            }
          case 194: break;
          case 82: 
            { System.out.println("Palabra Reservada: UNION");
                    return symbol(sym.UNION,yytext());
            }
          case 195: break;
          case 83: 
            { System.out.println("Palabra Reservada: SHORT");
                    return symbol(sym.SHORT,yytext());
            }
          case 196: break;
          case 84: 
            { System.out.println("Palabra Reservada: BREAK");
                    return symbol(sym.BREAK,yytext());
            }
          case 197: break;
          case 85: 
            { System.out.println("Palabra Reservada: WHILE");
                    return symbol(sym.WHILE,yytext());
            }
          case 198: break;
          case 86: 
            { System.out.println("Palabra Reservada: _Bool");
                    return symbol(sym._Bool,yytext());
            }
          case 199: break;
          case 87: 
            { System.out.println("Palabra Reservada: INLINE");
                    return symbol(sym.INLINE,yytext());
            }
          case 200: break;
          case 88: 
            { System.out.println("Palabra Reservada: DOUBLE");
                    return symbol(sym.DOUBLE,yytext());
            }
          case 201: break;
          case 89: 
            { System.out.println("Palabra Reservada: EXTERN");
                    return symbol(sym.EXTERN,yytext());
            }
          case 202: break;
          case 90: 
            { System.out.println("Palabra Reservada: SIGNED");
                    return symbol(sym.SIGNED,yytext());
            }
          case 203: break;
          case 91: 
            { System.out.println("Palabra Reservada: SIZEOF");
                    return symbol(sym.SIZEOF,yytext());
            }
          case 204: break;
          case 92: 
            { System.out.println("Palabra Reservada: STATIC");
                    return symbol(sym.STATIC,yytext());
            }
          case 205: break;
          case 93: 
            { System.out.println("Palabra Reservada: STRUCT");
                    return symbol(sym.STRUCT,yytext());
            }
          case 206: break;
          case 94: 
            { System.out.println("Palabra Reservada: SWITCH");
                    return symbol(sym.SWITCH,yytext());
            }
          case 207: break;
          case 95: 
            { System.out.println("Palabra Reservada: TYPEOF");
                    return symbol(sym.TYPEOF,yytext());
            }
          case 208: break;
          case 96: 
            { System.out.println("Palabra Reservada: RETURN");
                    return symbol(sym.RETURN,yytext());
            }
          case 209: break;
          case 97: 
            { System.out.println("Palabra Reservada: DEFAULT");
                    return symbol(sym.DEFAULT,yytext());
            }
          case 210: break;
          case 98: 
            { System.out.println("Palabra Reservada: TYPEDEF");
                    return symbol(sym.TYPEDEF,yytext());
            }
          case 211: break;
          case 99: 
            { System.out.println("Palabra Reservada: _Atomic");
                    return symbol(sym._Atomic,yytext());
            }
          case 212: break;
          case 100: 
            { System.out.println("Palabra Reservada: CONTINUE");
                    return symbol(sym.CONTINUE,yytext());
            }
          case 213: break;
          case 101: 
            { System.out.println("Palabra Reservada: UNSIGNED");
                    return symbol(sym.UNSIGNED,yytext());
            }
          case 214: break;
          case 102: 
            { System.out.println("Palabra Reservada: RESTRICT");
                    return symbol(sym.RESTRICT,yytext());
            }
          case 215: break;
          case 103: 
            { System.out.println("Palabra Reservada: REGISTER");
                    return symbol(sym.REGISTER,yytext());
            }
          case 216: break;
          case 104: 
            { System.out.println("Palabra Reservada: _Generic");
                    return symbol(sym._Generic,yytext());
            }
          case 217: break;
          case 105: 
            { System.out.println("Palabra Reservada: _Alignas");
                    return symbol(sym._Alignas,yytext());
            }
          case 218: break;
          case 106: 
            { System.out.println("Palabra Reservada: _Alignof");
                    return symbol(sym._Alignof,yytext());
            }
          case 219: break;
          case 107: 
            { System.out.println("Palabra Reservada: _Complex");
                    return symbol(sym._Complex,yytext());
            }
          case 220: break;
          case 108: 
            { System.out.println("Palabra Reservada: VOLATILE");
                    return symbol(sym.VOLATILE,yytext());
            }
          case 221: break;
          case 109: 
            { System.out.println("Palabra Reservada: _Noreturn");
                    return symbol(sym._Noreturn,yytext());
            }
          case 222: break;
          case 110: 
            { System.out.println("Palabra Reservada: _Imaginary");
                    return symbol(sym._Imaginary,yytext());
            }
          case 223: break;
          case 111: 
            { System.out.println("Palabra Reservada: TYPEOF_UNQUAL");
                    return symbol(sym.TYPEOF_UNQUAL,yytext());
            }
          case 224: break;
          case 112: 
            { System.out.println("Palabra Reservada: _Thread_local");
                    return symbol(sym._Thread_local,yytext());
            }
          case 225: break;
          case 113: 
            { System.out.println("Palabra Reservada: _Static_assert");
                    return symbol(sym._Static_assert,yytext());
            }
          case 226: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
