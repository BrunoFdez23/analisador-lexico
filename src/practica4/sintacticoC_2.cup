/* Barrera Alaniz Jose Angel */
/* Fernández Flores Bruno Eduardo */
/* Sanchez Mora Jose Alfredo */

package practica4;

import java_cup.runtime.*;
parser code{:
    @Override
    public void syntax_error(Symbol s){
        System.err.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }
:}

/*  Terminales Palabras Reservadas  */
terminal    AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ELSE,
            ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INLINE, INT, LONG, MAIN, REGISTER,
            RESTRICT, RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH,
            TYPEDEF, TYPEOF, TYPEOF_UNQUAL, UNION, UNSIGNED, VOID, VOLATILE,
            WHILE, _Alignas, _Alignof, _Atomic, _Bool, _Complex, _Generic,
            _Imaginary, _Noreturn, _Static_assert, _Thread_local
            ;

/* Terminales Directivas */
terminal    DIRECTIVA_INCLUDE, DIRECTIVA_DEFINE, DIRECTIVA_IFDEF, 
            DIRECTIVA_IFNDEF, DIRECTIVA_ELSE, DIRECTIVA_ENDIF
            ;

/* Terminales Caracteres de Formato */
terminal    CFORMATO_INTEGER, CFORMATO_UNSIGNED, CFORMATO_FLOTANTE_DECIMAL,
            CFORMATO_NOTACION_EXPONENCIAL, CFORMATO_GENERAL, CFORMATO_HEXADECIMAL,
            CFORMATO_OCTAL, CFORMATO_STRING, CFORMATO_CHAR, CFORMATO_POINTER, 
            CFORMATO_NUM_CARACTERES_PROCESADOS
            ;

/*  Terminales Operadores  */
terminal    SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO, IGUALDAD, DIFERENTE,
            MENOR_QUE, MAYOR_QUE, MENOR_IGUAL, MAYOR_IGUAL, AND, OR, NOT,
            ASIGNACION, SUMA_ASIGNACION, RESTA_ASIGNACION, MULT_ASIGNACION,
            DIV_ASIGNACION, MOD_ASIGNACION, AND_BIT, OR_BIT, XOR_BIT, NOT_BIT,
            DESPLAZA_IZQ, DESPLAZA_DER, INCREMENTO, DECREMENTO, CONDICIONAL,
            DOS_PUNTOS, PUNTO, ACCESO_PUNTERO
            ;

/*  Terminales Simbolos  */
terminal    PARENTESIS_IZQ, PARENTESIS_DER, CORCHETE_IZQ, CORCHETE_DER,
            LLAVE_IZQ, LLAVE_DER, COMA, PUNTO_Y_COMA
            ;

/*  Terminales Expresiones Regulares  */
terminal    FINDELINEA, ESPACIOS, COMENTARIOUNILINEA, COMENTARIOMULTILINEA,
            IDENTIFICADOR, NUMHEXADECIMAL, NUMBINARIO, NUMOCTAL, NUMDECIMAL, 
            NUMFLOTANTEDEC, NUMFLOTANTEHEX, CADENATEXTO, CADENACHAR
            ;

/*  NO TERMINALES  */
non terminal    programa, declaraciones, dec_include, funcion_main, 
                lista_tipo_dato, lista_tipo_flotante, lista_tipo_entero, 
                lista_identificador, declaracion_variable, declaracion_constante,
                valores_validos_numero, valores_validos_texto, operadores_aritmeticos,
                operadores_relacionales1, operadores_relacionales2, operadores_logicos,
                operacion_aritmetica_simple, operacion_aritmetica, operacion_aritmetica_compuesta, 
                operacion_relacional, operacion_logica, operaciones_validas1, 
                operaciones_validas2, operaciones, estructura_control, sentencia_if, 
                sentencia_while, sentencia_for, bloque, sentencia, inicializacion, 
                actualizacion, expresion
                ;
start with programa;

programa::=         programa dec_include
                |   dec_include funcion_main
                ;

dec_include::=  DIRECTIVA_INCLUDE MENOR_QUE IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR_QUE
                {:  System.out.println("[AS-INCLUDE] Esta es una directiva #include");  :}
                ;

funcion_main::= INT MAIN PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER
                {: System.out.println("[AS-MAIN] Esta es la funcion main"); :}
                ;

lista_tipo_entero::=    INT {:/*      System.out.println("[AS-DEC-TD] Esta es un tipo de dato int");*/:}
                    |   SHORT {:/*    System.out.println("[AS-DEC-TD] Esta es un tipo de dato short");*/:}
                    |   LONG {:/*     System.out.println("[AS-DEC-TD] Esta es un tipo de dato long");*/:}
                    ;

lista_tipo_flotante::=  FLOAT {:/*    System.out.println("[AS-DEC-TD] Esta es un tipo de dato float");    */:}
                    |   DOUBLE {:/*   System.out.println("[AS-DEC-TD] Esta es un tipo de dato double");   */:}
                    ;

lista_tipo_dato::=      lista_tipo_entero
                    |   lista_tipo_flotante
                    |   CHAR {:/*     System.out.println("[AS-DEC-TD] Esta es un tipo de dato char");     */:}
                    ;

lista_identificador::=      lista_identificador COMA IDENTIFICADOR
                        |   IDENTIFICADOR
                        |   COMA error
                        ;

declaraciones::=    declaracion_variable declaraciones
                |   declaracion_variable
                |   declaracion_constante declaraciones
                |   declaracion_constante
                ;

declaracion_variable::= lista_tipo_dato lista_identificador PUNTO_Y_COMA
                {:  System.out.println("[AS-DEC-TD] Esta es una declaración de variables"); :}
                |   lista_tipo_dato lista_identificador error
                |   lista_tipo_dato error
                ;

declaracion_constante::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL PUNTO_Y_COMA
                {:  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante entero"); :}
                |   CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC PUNTO_Y_COMA
                {:  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante flotante"); :}
                |   CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR PUNTO_Y_COMA
                {:  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char"); :}
                |   CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO PUNTO_Y_COMA
                {:  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char*"); :}

                |   CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL error
                |   CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC error
                |   CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR error
                |   CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO error

                |   CONST lista_tipo_entero IDENTIFICADOR ASIGNACION error
                |   CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION error
                |   CONST CHAR IDENTIFICADOR ASIGNACION error
                |   CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION error

                |   CONST lista_tipo_entero IDENTIFICADOR error
                |   CONST lista_tipo_flotante IDENTIFICADOR error
                |   CONST CHAR IDENTIFICADOR error
                |   CONST CHAR MULTIPLICACION IDENTIFICADOR error

                |   CONST lista_tipo_entero error
                |   CONST lista_tipo_flotante error
                |   CONST CHAR error
                |   CONST CHAR MULTIPLICACION error

                |   CONST error

                ;

/* Operadores aritméticos */
valores_validos_texto::=    CADENATEXTO
                        |   CADENACHAR
                        ;
valores_validos_numero::= NUMDECIMAL
                        | NUMFLOTANTEDEC
                        ;/*
valores_validos_identificador::= IDENTIFICADOR
                                ;*/
operadores_aritmeticos::= SUMA
                        | RESTA
                        | MULTIPLICACION
                        | DIVISION
                        | MODULO
                        ;
operadores_relacionales1::= IGUALDAD
                        |   DIFERENTE
                        ;
operadores_relacionales2::= MAYOR_QUE
                        |   MENOR_QUE
                        |   MAYOR_IGUAL
                        |   MENOR_IGUAL
                        ;
operadores_logicos::=       AND
                        |   OR
                        |   NOT
                        ;
operacion_aritmetica_simple::= valores_validos_numero
                             | IDENTIFICADOR
                             ;
operacion_aritmetica::= operacion_aritmetica operadores_aritmeticos operacion_aritmetica_simple
                      | operacion_aritmetica_simple 
                      
                      | operadores_aritmeticos error
                      ;
operacion_aritmetica_compuesta::=   PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER operadores_aritmeticos operacion_aritmetica_compuesta
                                |   PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER
                                |   operacion_aritmetica operacion_aritmetica_compuesta
                                |   operacion_aritmetica

                                |   PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER operadores_aritmeticos error
                                |   PARENTESIS_IZQ operacion_aritmetica error
                                |   PARENTESIS_IZQ error
                                /*|   operacion_aritmetica error*/
                                ;
operacion_relacional::=     valores_validos_numero operadores_relacionales1 valores_validos_numero
                        |   valores_validos_numero operadores_relacionales1 IDENTIFICADOR
                        |   valores_validos_texto operadores_relacionales1 valores_validos_texto
                        |   valores_validos_texto operadores_relacionales1 IDENTIFICADOR
                        |   IDENTIFICADOR operadores_relacionales1 IDENTIFICADOR
                        |   IDENTIFICADOR operadores_relacionales1 valores_validos_numero
                        |   IDENTIFICADOR operadores_relacionales1 valores_validos_texto

                        |   valores_validos_numero operadores_relacionales2 valores_validos_numero
                        |   valores_validos_numero operadores_relacionales2 IDENTIFICADOR
                        |   IDENTIFICADOR operadores_relacionales2 IDENTIFICADOR
                        |   IDENTIFICADOR operadores_relacionales2 valores_validos_numero

                        |   valores_validos_numero operadores_relacionales1 error
                        |   valores_validos_numero operadores_relacionales2 error
                        |   valores_validos_texto operadores_relacionales1 error
                        |   IDENTIFICADOR operadores_relacionales1 error
                        |   IDENTIFICADOR operadores_relacionales2 error
                        ;
operacion_logica::=     operacion_relacional operadores_logicos operacion_relacional
                    |   operacion_relacional operadores_logicos error
                    ;
operaciones_validas1::= IDENTIFICADOR ASIGNACION operacion_aritmetica_compuesta
                    {:  System.out.println("[AS-OV-1] Esta es una operacion aritmetica"); :}
/*
                    |   IDENTIFICADOR ASIGNACION operacion_aritmetica_compuesta error*/
                    |   IDENTIFICADOR ASIGNACION error
                    |   IDENTIFICADOR error
                    ;
operaciones_validas2::= operacion_relacional
                    {:  System.out.println("[AS-OV-2] Esta es una operacion relacional"); :}
                    |   operacion_logica
                    {:  System.out.println("[AS-OV-2] Esta es una operacion logica"); :}
                    /*|   operacion_relacional error
                    |   operacion_logica error*/
                    ;
operaciones::=      operaciones_validas1 operaciones
                |   operaciones_validas2 operaciones
                |   operaciones_validas1
                |   operaciones_validas2
                ;

/*  Estructuras de control IF WHILE FOR */

estructura_control::=   sentencia_if 
                    |   sentencia_while 
                    |   sentencia_for
                    ;
sentencia_if::=     IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
                |   IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ bloque LLAVE_DER
                {:  System.out.println("[AS-EC-IF] Esta es una estructura de control IF"); :}

                |   IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ bloque error
                |   IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ error
                |   IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE error
                |   IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque error
                |   IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ error
                |   IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER error
                |   IF PARENTESIS_IZQ operacion_relacional error
                |   IF PARENTESIS_IZQ error
                |   IF error
                ;
sentencia_while::=  WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER
                {:  System.out.println("[AS-EC-WHILE] Esta es una estructura de control WHILE"); :}
                
                |   WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque error
                |   WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ error
                |   WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER error
                |   WHILE PARENTESIS_IZQ operacion_relacional error
                |   WHILE PARENTESIS_IZQ error
                |   WHILE error
                ;
sentencia_for::=    FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER
                {:  System.out.println("[AS-EC-FOR] Esta es una estructura de control FOR"); :}
                
                |   FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ bloque error
                |   FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ error
                |   FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER error
                |   FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 error
                |   FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA error
                |   FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional error
                |   FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA error
                |   FOR PARENTESIS_IZQ inicializacion error
                |   FOR PARENTESIS_IZQ error
                |   FOR error
                ;
bloque::=   sentencia bloque
        |   sentencia
        |   COMENTARIOMULTILINEA bloque
        |   COMENTARIOUNILINEA bloque
        |   COMENTARIOMULTILINEA
        |   COMENTARIOUNILINEA 
        ;

sentencia::=    operaciones_validas1 PUNTO_Y_COMA
            |   estructura_control
            |   declaracion_variable
            |   declaracion_constante
            |   operaciones_validas2

            |   operaciones_validas1 error
            ;
inicializacion::=   lista_tipo_entero operaciones_validas1 
                |   lista_tipo_entero error
                ;