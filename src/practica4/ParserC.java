
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 27 00:56:11 CST 2025
//----------------------------------------------------

package practica4;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 27 00:56:11 CST 2025
  */
public class ParserC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserC() {super();}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\262\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\004\011\000\002\004\010\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\004\000" +
    "\002\005\016\000\002\005\015\000\002\005\013\000\002" +
    "\005\012\000\002\005\015\000\002\005\014\000\002\005" +
    "\012\000\002\005\011\000\002\005\015\000\002\005\014" +
    "\000\002\005\013\000\002\005\012\000\002\005\011\000" +
    "\002\005\010\000\002\005\007\000\002\005\006\000\002" +
    "\005\005\000\002\005\004\000\002\005\012\000\002\005" +
    "\011\000\002\005\010\000\002\005\007\000\002\005\006" +
    "\000\002\005\005\000\002\005\004\000\002\006\014\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\010\003\000\002\010\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\014\005\000\002\014\003" +
    "\000\002\014\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\004\000\002\016\010\000\002\016" +
    "\010\000\002\016\010\000\002\016\011\000\002\016\010" +
    "\000\002\016\010\000\002\016\010\000\002\016\011\000" +
    "\002\016\007\000\002\016\007\000\002\016\007\000\002" +
    "\016\010\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\007\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\006\000\002\016\004\000" +
    "\002\020\003\000\002\020\003\000\002\017\003\000\002" +
    "\017\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\026\004\000\002\027\007\000\002\027\005\000" +
    "\002\027\004\000\002\027\003\000\002\027\007\000\002" +
    "\027\005\000\002\027\004\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\031\005\000\002\031\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\004\000" +
    "\002\033\003\000\002\033\003\000\002\034\004\000\002" +
    "\034\004\000\002\034\003\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\036\011" +
    "\000\002\036\015\000\002\036\015\000\002\036\014\000" +
    "\002\036\013\000\002\036\011\000\002\036\010\000\002" +
    "\036\007\000\002\036\006\000\002\036\005\000\002\036" +
    "\004\000\002\037\011\000\002\037\011\000\002\037\010" +
    "\000\002\037\007\000\002\037\006\000\002\037\005\000" +
    "\002\037\004\000\002\040\015\000\002\040\015\000\002" +
    "\040\014\000\002\040\013\000\002\040\012\000\002\040" +
    "\011\000\002\040\010\000\002\040\007\000\002\040\006" +
    "\000\002\040\005\000\002\040\004\000\002\041\004\000" +
    "\002\041\003\000\002\041\004\000\002\041\004\000\002" +
    "\041\003\000\002\041\003\000\002\042\004\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\004\000\002\043\004\000\002\043\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\004\063\004\001\002\000\004\113\u0131\001" +
    "\002\000\004\002\u0130\001\002\000\020\007\021\014\015" +
    "\020\022\025\010\026\012\033\020\046\014\001\002\000" +
    "\010\003\uffd8\152\uffd8\164\uffd8\001\002\000\010\003\uffde" +
    "\027\u0127\164\uffde\001\002\000\006\003\u010c\164\u010d\001" +
    "\002\000\010\003\uffdc\152\uffdc\164\uffdc\001\002\000\010" +
    "\003\uffd9\152\uffd9\164\uffd9\001\002\000\006\003\372\164" +
    "\373\001\002\000\010\003\uffda\152\uffda\164\uffda\001\002" +
    "\000\020\007\021\014\015\020\022\025\010\026\012\033" +
    "\020\046\024\001\002\000\004\002\000\001\002\000\010" +
    "\003\uffdd\152\uffdd\164\uffdd\001\002\000\010\003\uffd7\152" +
    "\uffd7\164\uffd7\001\002\000\010\003\uffdb\152\uffdb\164\uffdb" +
    "\001\002\000\004\164\351\001\002\000\004\164\026\001" +
    "\002\000\004\002\uffff\001\002\000\004\144\027\001\002" +
    "\000\020\007\021\014\015\020\022\025\030\026\012\033" +
    "\020\145\033\001\002\000\010\003\uffde\152\uffde\164\uffde" +
    "\001\002\000\004\164\350\001\002\000\010\003\ufffa\145" +
    "\ufffa\152\ufffa\001\002\000\004\150\345\001\002\000\006" +
    "\145\036\152\035\001\002\000\020\003\344\007\021\014" +
    "\015\020\022\025\030\026\012\033\020\001\002\000\004" +
    "\150\037\001\002\000\044\007\021\010\060\014\015\020" +
    "\022\021\067\023\050\025\030\026\012\033\020\050\044" +
    "\156\043\157\042\164\062\165\052\166\051\167\071\170" +
    "\070\001\002\000\052\003\uff56\007\uff56\010\uff56\014\uff56" +
    "\020\uff56\021\uff56\023\uff56\025\uff56\026\uff56\032\uff56\033" +
    "\uff56\050\uff56\151\uff56\156\uff56\157\uff56\164\uff56\165\uff56" +
    "\166\uff56\167\uff56\170\uff56\001\002\000\006\111\146\112" +
    "\145\001\002\000\052\003\uff59\007\021\010\060\014\015" +
    "\020\022\021\067\023\050\025\030\026\012\032\uff59\033" +
    "\020\050\044\151\uff59\156\043\157\042\164\062\165\052" +
    "\166\051\167\071\170\070\001\002\000\052\003\uff58\007" +
    "\021\010\060\014\015\020\022\021\067\023\050\025\030" +
    "\026\012\032\uff58\033\020\050\044\151\uff58\156\043\157" +
    "\042\164\062\165\052\166\051\167\071\170\070\001\002" +
    "\000\006\003\321\144\322\001\002\000\052\003\uff7d\007" +
    "\uff7d\010\uff7d\014\uff7d\020\uff7d\021\uff7d\023\uff7d\025\uff7d" +
    "\026\uff7d\032\uff7d\033\uff7d\050\uff7d\151\uff7d\156\uff7d\157" +
    "\uff7d\164\uff7d\165\uff7d\166\uff7d\167\uff7d\170\uff7d\001\002" +
    "\000\010\003\312\152\310\164\313\001\002\000\004\151" +
    "\307\001\002\000\006\003\264\144\265\001\002\000\104" +
    "\003\uffb6\007\uffb6\010\uffb6\014\uffb6\020\uffb6\021\uffb6\023" +
    "\uffb6\025\uffb6\026\uffb6\032\uffb6\033\uffb6\050\uffb6\104\uffb6" +
    "\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\117" +
    "\uffb6\120\uffb6\121\uffb6\144\uffb6\145\uffb6\151\uffb6\153\uffb6" +
    "\156\uffb6\157\uffb6\164\uffb6\165\uffb6\166\uffb6\167\uffb6\170" +
    "\uffb6\001\002\000\104\003\uffb7\007\uffb7\010\uffb7\014\uffb7" +
    "\020\uffb7\021\uffb7\023\uffb7\025\uffb7\026\uffb7\032\uffb7\033" +
    "\uffb7\050\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\117\uffb7\120\uffb7\121\uffb7\144\uffb7\145" +
    "\uffb7\151\uffb7\153\uffb7\156\uffb7\157\uffb7\164\uffb7\165\uffb7" +
    "\166\uffb7\167\uffb7\170\uffb7\001\002\000\052\003\uff5c\007" +
    "\021\010\060\014\015\020\022\021\067\023\050\025\030" +
    "\026\012\032\uff5c\033\020\050\044\151\uff5c\156\043\157" +
    "\042\164\062\165\052\166\051\167\071\170\070\001\002" +
    "\000\060\003\uff83\007\uff83\010\uff83\014\uff83\020\uff83\021" +
    "\uff83\023\uff83\025\uff83\026\uff83\032\uff83\033\uff83\050\uff83" +
    "\117\256\120\260\121\255\151\uff83\156\uff83\157\uff83\164" +
    "\uff83\165\uff83\166\uff83\167\uff83\170\uff83\001\002\000\052" +
    "\003\uff7b\007\uff7b\010\uff7b\014\uff7b\020\uff7b\021\uff7b\023" +
    "\uff7b\025\uff7b\026\uff7b\032\uff7b\033\uff7b\050\uff7b\151\uff7b" +
    "\156\uff7b\157\uff7b\164\uff7b\165\uff7b\166\uff7b\167\uff7b\170" +
    "\uff7b\001\002\000\016\111\146\112\145\113\144\114\143" +
    "\115\147\116\151\001\002\000\052\003\uff82\007\uff82\010" +
    "\uff82\014\uff82\020\uff82\021\uff82\023\uff82\025\uff82\026\uff82" +
    "\032\uff82\033\uff82\050\uff82\151\uff82\156\uff82\157\uff82\164" +
    "\uff82\165\uff82\166\uff82\167\uff82\170\uff82\001\002\000\020" +
    "\003\202\007\203\014\015\020\022\025\030\026\012\033" +
    "\020\001\002\000\052\003\uff7c\007\uff7c\010\uff7c\014\uff7c" +
    "\020\uff7c\021\uff7c\023\uff7c\025\uff7c\026\uff7c\032\uff7c\033" +
    "\uff7c\050\uff7c\151\uff7c\156\uff7c\157\uff7c\164\uff7c\165\uff7c" +
    "\166\uff7c\167\uff7c\170\uff7c\001\002\000\022\003\103\111" +
    "\146\112\145\113\144\114\143\115\147\116\151\122\102" +
    "\001\002\000\052\003\uff55\007\uff55\010\uff55\014\uff55\020" +
    "\uff55\021\uff55\023\uff55\025\uff55\026\uff55\032\uff55\033\uff55" +
    "\050\uff55\151\uff55\156\uff55\157\uff55\164\uff55\165\uff55\166" +
    "\uff55\167\uff55\170\uff55\001\002\000\052\003\uff53\007\uff53" +
    "\010\uff53\014\uff53\020\uff53\021\uff53\023\uff53\025\uff53\026" +
    "\uff53\032\uff53\033\uff53\050\uff53\151\uff53\156\uff53\157\uff53" +
    "\164\uff53\165\uff53\166\uff53\167\uff53\170\uff53\001\002\000" +
    "\052\003\uff54\007\uff54\010\uff54\014\uff54\020\uff54\021\uff54" +
    "\023\uff54\025\uff54\026\uff54\032\uff54\033\uff54\050\uff54\151" +
    "\uff54\156\uff54\157\uff54\164\uff54\165\uff54\166\uff54\167\uff54" +
    "\170\uff54\001\002\000\006\003\176\153\177\001\002\000" +
    "\006\003\072\144\073\001\002\000\114\003\uffb4\007\uffb4" +
    "\010\uffb4\014\uffb4\020\uffb4\021\uffb4\023\uffb4\025\uffb4\026" +
    "\uffb4\032\uffb4\033\uffb4\050\uffb4\104\uffb4\105\uffb4\106\uffb4" +
    "\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4\115" +
    "\uffb4\116\uffb4\117\uffb4\120\uffb4\121\uffb4\144\uffb4\145\uffb4" +
    "\151\uffb4\153\uffb4\156\uffb4\157\uffb4\164\uffb4\165\uffb4\166" +
    "\uffb4\167\uffb4\170\uffb4\001\002\000\114\003\uffb5\007\uffb5" +
    "\010\uffb5\014\uffb5\020\uffb5\021\uffb5\023\uffb5\025\uffb5\026" +
    "\uffb5\032\uffb5\033\uffb5\050\uffb5\104\uffb5\105\uffb5\106\uffb5" +
    "\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\115" +
    "\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\144\uffb5\145\uffb5" +
    "\151\uffb5\153\uffb5\156\uffb5\157\uffb5\164\uffb5\165\uffb5\166" +
    "\uffb5\167\uffb5\170\uffb5\001\002\000\052\003\uff5e\007\uff5e" +
    "\010\uff5e\014\uff5e\020\uff5e\021\uff5e\023\uff5e\025\uff5e\026" +
    "\uff5e\032\uff5e\033\uff5e\050\uff5e\151\uff5e\156\uff5e\157\uff5e" +
    "\164\uff5e\165\uff5e\166\uff5e\167\uff5e\170\uff5e\001\002\000" +
    "\012\003\075\025\030\026\012\033\020\001\002\000\006" +
    "\003\136\153\137\001\002\000\052\003\uff5f\007\uff5f\010" +
    "\uff5f\014\uff5f\020\uff5f\021\uff5f\023\uff5f\025\uff5f\026\uff5f" +
    "\032\uff5f\033\uff5f\050\uff5f\151\uff5f\156\uff5f\157\uff5f\164" +
    "\uff5f\165\uff5f\166\uff5f\167\uff5f\170\uff5f\001\002\000\006" +
    "\003\077\164\100\001\002\000\006\003\uff50\153\uff50\001" +
    "\002\000\006\003\103\122\102\001\002\000\006\003\uff51" +
    "\153\uff51\001\002\000\032\003\115\104\107\105\121\106" +
    "\104\107\106\110\110\144\112\164\116\165\052\166\051" +
    "\167\071\170\070\001\002\000\010\003\uff84\145\uff84\153" +
    "\uff84\001\002\000\032\003\uffb1\104\uffb1\105\uffb1\106\uffb1" +
    "\107\uffb1\110\uffb1\144\uffb1\164\uffb1\165\uffb1\166\uffb1\167" +
    "\uffb1\170\uffb1\001\002\000\036\003\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\110\uffa4\144\uffa4\145\uffa4\153\uffa4\164" +
    "\uffa4\165\uffa4\166\uffa4\167\uffa4\170\uffa4\001\002\000\032" +
    "\003\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\144" +
    "\uffb0\164\uffb0\165\uffb0\166\uffb0\167\uffb0\170\uffb0\001\002" +
    "\000\032\003\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110" +
    "\uffb3\144\uffb3\164\uffb3\165\uffb3\166\uffb3\167\uffb3\170\uffb3" +
    "\001\002\000\032\003\uffaf\104\uffaf\105\uffaf\106\uffaf\107" +
    "\uffaf\110\uffaf\144\uffaf\164\uffaf\165\uffaf\166\uffaf\167\uffaf" +
    "\170\uffaf\001\002\000\010\003\uff86\145\uff86\153\uff86\001" +
    "\002\000\030\003\127\104\107\105\121\106\104\107\106" +
    "\110\110\164\116\165\052\166\051\167\071\170\070\001" +
    "\002\000\004\003\125\001\002\000\036\003\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\110\uffa5\144\uffa5\145\uffa5\153" +
    "\uffa5\164\uffa5\165\uffa5\166\uffa5\167\uffa5\170\uffa5\001\002" +
    "\000\010\003\uff85\145\uff85\153\uff85\001\002\000\036\003" +
    "\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\144\uffa3" +
    "\145\uffa3\153\uffa3\164\uffa3\165\uffa3\166\uffa3\167\uffa3\170" +
    "\uffa3\001\002\000\036\003\uff9c\104\107\105\121\106\104" +
    "\107\106\110\110\144\112\145\uff9c\153\uff9c\164\116\165" +
    "\052\166\051\167\071\170\070\001\002\000\036\003\uffa1" +
    "\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\144\uffa1\145" +
    "\uffa1\153\uffa1\164\uffa1\165\uffa1\166\uffa1\167\uffa1\170\uffa1" +
    "\001\002\000\032\003\uffb2\104\uffb2\105\uffb2\106\uffb2\107" +
    "\uffb2\110\uffb2\144\uffb2\164\uffb2\165\uffb2\166\uffb2\167\uffb2" +
    "\170\uffb2\001\002\000\016\003\125\164\116\165\052\166" +
    "\051\167\071\170\070\001\002\000\010\003\uff9d\145\uff9d" +
    "\153\uff9d\001\002\000\036\003\uffa2\104\uffa2\105\uffa2\106" +
    "\uffa2\107\uffa2\110\uffa2\144\uffa2\145\uffa2\153\uffa2\164\uffa2" +
    "\165\uffa2\166\uffa2\167\uffa2\170\uffa2\001\002\000\036\003" +
    "\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\144\uffa0" +
    "\145\uffa0\153\uffa0\164\uffa0\165\uffa0\166\uffa0\167\uffa0\170" +
    "\uffa0\001\002\000\020\003\131\104\107\105\121\106\104" +
    "\107\106\110\110\145\132\001\002\000\010\003\uff99\145" +
    "\uff99\153\uff99\001\002\000\014\164\116\165\052\166\051" +
    "\167\071\170\070\001\002\000\010\003\uff9a\145\uff9a\153" +
    "\uff9a\001\002\000\022\003\uff9e\104\107\105\121\106\104" +
    "\107\106\110\110\145\uff9e\153\uff9e\001\002\000\032\003" +
    "\135\104\107\105\121\106\104\107\106\110\110\144\112" +
    "\164\116\165\052\166\051\167\071\170\070\001\002\000" +
    "\010\003\uff9f\145\uff9f\153\uff9f\001\002\000\010\003\uff9b" +
    "\145\uff9b\153\uff9b\001\002\000\052\003\uff60\007\uff60\010" +
    "\uff60\014\uff60\020\uff60\021\uff60\023\uff60\025\uff60\026\uff60" +
    "\032\uff60\033\uff60\050\uff60\151\uff60\156\uff60\157\uff60\164" +
    "\uff60\165\uff60\166\uff60\167\uff60\170\uff60\001\002\000\016" +
    "\003\141\164\142\165\052\166\051\167\071\170\070\001" +
    "\002\000\006\003\162\153\163\001\002\000\052\003\uff61" +
    "\007\uff61\010\uff61\014\uff61\020\uff61\021\uff61\023\uff61\025" +
    "\uff61\026\uff61\032\uff61\033\uff61\050\uff61\151\uff61\156\uff61" +
    "\157\uff61\164\uff61\165\uff61\166\uff61\167\uff61\170\uff61\001" +
    "\002\000\016\111\146\112\145\113\144\114\143\115\147" +
    "\116\151\001\002\000\012\003\uffac\164\uffac\167\uffac\170" +
    "\uffac\001\002\000\012\003\uffab\164\uffab\167\uffab\170\uffab" +
    "\001\002\000\016\003\uffad\164\uffad\165\uffad\166\uffad\167" +
    "\uffad\170\uffad\001\002\000\016\003\uffae\164\uffae\165\uffae" +
    "\166\uffae\167\uffae\170\uffae\001\002\000\012\003\uffa9\164" +
    "\uffa9\167\uffa9\170\uffa9\001\002\000\012\003\160\164\161" +
    "\167\071\170\070\001\002\000\012\003\uffaa\164\uffaa\167" +
    "\uffaa\170\uffaa\001\002\000\016\003\155\164\156\165\052" +
    "\166\051\167\071\170\070\001\002\000\064\003\uff93\007" +
    "\uff93\010\uff93\014\uff93\020\uff93\021\uff93\023\uff93\025\uff93" +
    "\026\uff93\032\uff93\033\uff93\050\uff93\117\uff93\120\uff93\121" +
    "\uff93\145\uff93\151\uff93\153\uff93\156\uff93\157\uff93\164\uff93" +
    "\165\uff93\166\uff93\167\uff93\170\uff93\001\002\000\064\003" +
    "\uff92\007\uff92\010\uff92\014\uff92\020\uff92\021\uff92\023\uff92" +
    "\025\uff92\026\uff92\032\uff92\033\uff92\050\uff92\117\uff92\120" +
    "\uff92\121\uff92\145\uff92\151\uff92\153\uff92\156\uff92\157\uff92" +
    "\164\uff92\165\uff92\166\uff92\167\uff92\170\uff92\001\002\000" +
    "\064\003\uff8a\007\uff8a\010\uff8a\014\uff8a\020\uff8a\021\uff8a" +
    "\023\uff8a\025\uff8a\026\uff8a\032\uff8a\033\uff8a\050\uff8a\117" +
    "\uff8a\120\uff8a\121\uff8a\145\uff8a\151\uff8a\153\uff8a\156\uff8a" +
    "\157\uff8a\164\uff8a\165\uff8a\166\uff8a\167\uff8a\170\uff8a\001" +
    "\002\000\064\003\uff94\007\uff94\010\uff94\014\uff94\020\uff94" +
    "\021\uff94\023\uff94\025\uff94\026\uff94\032\uff94\033\uff94\050" +
    "\uff94\117\uff94\120\uff94\121\uff94\145\uff94\151\uff94\153\uff94" +
    "\156\uff94\157\uff94\164\uff94\165\uff94\166\uff94\167\uff94\170" +
    "\uff94\001\002\000\064\003\uff8e\007\uff8e\010\uff8e\014\uff8e" +
    "\020\uff8e\021\uff8e\023\uff8e\025\uff8e\026\uff8e\032\uff8e\033" +
    "\uff8e\050\uff8e\117\uff8e\120\uff8e\121\uff8e\145\uff8e\151\uff8e" +
    "\153\uff8e\156\uff8e\157\uff8e\164\uff8e\165\uff8e\166\uff8e\167" +
    "\uff8e\170\uff8e\001\002\000\064\003\uff89\007\uff89\010\uff89" +
    "\014\uff89\020\uff89\021\uff89\023\uff89\025\uff89\026\uff89\032" +
    "\uff89\033\uff89\050\uff89\117\uff89\120\uff89\121\uff89\145\uff89" +
    "\151\uff89\153\uff89\156\uff89\157\uff89\164\uff89\165\uff89\166" +
    "\uff89\167\uff89\170\uff89\001\002\000\064\003\uff8f\007\uff8f" +
    "\010\uff8f\014\uff8f\020\uff8f\021\uff8f\023\uff8f\025\uff8f\026" +
    "\uff8f\032\uff8f\033\uff8f\050\uff8f\117\uff8f\120\uff8f\121\uff8f" +
    "\145\uff8f\151\uff8f\153\uff8f\156\uff8f\157\uff8f\164\uff8f\165" +
    "\uff8f\166\uff8f\167\uff8f\170\uff8f\001\002\000\052\003\uff62" +
    "\007\uff62\010\uff62\014\uff62\020\uff62\021\uff62\023\uff62\025" +
    "\uff62\026\uff62\032\uff62\033\uff62\050\uff62\151\uff62\156\uff62" +
    "\157\uff62\164\uff62\165\uff62\166\uff62\167\uff62\170\uff62\001" +
    "\002\000\006\003\164\164\100\001\002\000\052\003\uff63" +
    "\007\uff63\010\uff63\014\uff63\020\uff63\021\uff63\023\uff63\025" +
    "\uff63\026\uff63\032\uff63\033\uff63\050\uff63\151\uff63\156\uff63" +
    "\157\uff63\164\uff63\165\uff63\166\uff63\167\uff63\170\uff63\001" +
    "\002\000\006\003\166\145\167\001\002\000\052\003\uff64" +
    "\007\uff64\010\uff64\014\uff64\020\uff64\021\uff64\023\uff64\025" +
    "\uff64\026\uff64\032\uff64\033\uff64\050\uff64\151\uff64\156\uff64" +
    "\157\uff64\164\uff64\165\uff64\166\uff64\167\uff64\170\uff64\001" +
    "\002\000\006\003\170\150\171\001\002\000\052\003\uff65" +
    "\007\uff65\010\uff65\014\uff65\020\uff65\021\uff65\023\uff65\025" +
    "\uff65\026\uff65\032\uff65\033\uff65\050\uff65\151\uff65\156\uff65" +
    "\157\uff65\164\uff65\165\uff65\166\uff65\167\uff65\170\uff65\001" +
    "\002\000\046\003\173\007\021\010\060\014\015\020\022" +
    "\021\067\023\050\025\030\026\012\033\020\050\044\156" +
    "\043\157\042\164\062\165\052\166\051\167\071\170\070" +
    "\001\002\000\006\003\174\151\175\001\002\000\052\003" +
    "\uff66\007\uff66\010\uff66\014\uff66\020\uff66\021\uff66\023\uff66" +
    "\025\uff66\026\uff66\032\uff66\033\uff66\050\uff66\151\uff66\156" +
    "\uff66\157\uff66\164\uff66\165\uff66\166\uff66\167\uff66\170\uff66" +
    "\001\002\000\052\003\uff67\007\uff67\010\uff67\014\uff67\020" +
    "\uff67\021\uff67\023\uff67\025\uff67\026\uff67\032\uff67\033\uff67" +
    "\050\uff67\151\uff67\156\uff67\157\uff67\164\uff67\165\uff67\166" +
    "\uff67\167\uff67\170\uff67\001\002\000\052\003\uff68\007\uff68" +
    "\010\uff68\014\uff68\020\uff68\021\uff68\023\uff68\025\uff68\026" +
    "\uff68\032\uff68\033\uff68\050\uff68\151\uff68\156\uff68\157\uff68" +
    "\164\uff68\165\uff68\166\uff68\167\uff68\170\uff68\001\002\000" +
    "\052\003\uff52\007\uff52\010\uff52\014\uff52\020\uff52\021\uff52" +
    "\023\uff52\025\uff52\026\uff52\032\uff52\033\uff52\050\uff52\151" +
    "\uff52\156\uff52\157\uff52\164\uff52\165\uff52\166\uff52\167\uff52" +
    "\170\uff52\001\002\000\052\003\uff57\007\uff57\010\uff57\014" +
    "\uff57\020\uff57\021\uff57\023\uff57\025\uff57\026\uff57\032\uff57" +
    "\033\uff57\050\uff57\151\uff57\156\uff57\157\uff57\164\uff57\165" +
    "\uff57\166\uff57\167\uff57\170\uff57\001\002\000\006\003\235" +
    "\164\236\001\002\000\006\003\225\164\226\001\002\000" +
    "\052\003\uffb8\007\uffb8\010\uffb8\014\uffb8\020\uffb8\021\uffb8" +
    "\023\uffb8\025\uffb8\026\uffb8\032\uffb8\033\uffb8\050\uffb8\151" +
    "\uffb8\156\uffb8\157\uffb8\164\uffb8\165\uffb8\166\uffb8\167\uffb8" +
    "\170\uffb8\001\002\000\010\003\205\106\204\164\206\001" +
    "\002\000\006\003\215\164\216\001\002\000\052\003\uffba" +
    "\007\uffba\010\uffba\014\uffba\020\uffba\021\uffba\023\uffba\025" +
    "\uffba\026\uffba\032\uffba\033\uffba\050\uffba\151\uffba\156\uffba" +
    "\157\uffba\164\uffba\165\uffba\166\uffba\167\uffba\170\uffba\001" +
    "\002\000\006\003\210\122\207\001\002\000\006\003\211" +
    "\166\212\001\002\000\052\003\uffbe\007\uffbe\010\uffbe\014" +
    "\uffbe\020\uffbe\021\uffbe\023\uffbe\025\uffbe\026\uffbe\032\uffbe" +
    "\033\uffbe\050\uffbe\151\uffbe\156\uffbe\157\uffbe\164\uffbe\165" +
    "\uffbe\166\uffbe\167\uffbe\170\uffbe\001\002\000\052\003\uffc2" +
    "\007\uffc2\010\uffc2\014\uffc2\020\uffc2\021\uffc2\023\uffc2\025" +
    "\uffc2\026\uffc2\032\uffc2\033\uffc2\050\uffc2\151\uffc2\156\uffc2" +
    "\157\uffc2\164\uffc2\165\uffc2\166\uffc2\167\uffc2\170\uffc2\001" +
    "\002\000\006\003\213\153\214\001\002\000\052\003\uffc6" +
    "\007\uffc6\010\uffc6\014\uffc6\020\uffc6\021\uffc6\023\uffc6\025" +
    "\uffc6\026\uffc6\032\uffc6\033\uffc6\050\uffc6\151\uffc6\156\uffc6" +
    "\157\uffc6\164\uffc6\165\uffc6\166\uffc6\167\uffc6\170\uffc6\001" +
    "\002\000\052\003\uffca\007\uffca\010\uffca\014\uffca\020\uffca" +
    "\021\uffca\023\uffca\025\uffca\026\uffca\032\uffca\033\uffca\050" +
    "\uffca\151\uffca\156\uffca\157\uffca\164\uffca\165\uffca\166\uffca" +
    "\167\uffca\170\uffca\001\002\000\052\003\uffb9\007\uffb9\010" +
    "\uffb9\014\uffb9\020\uffb9\021\uffb9\023\uffb9\025\uffb9\026\uffb9" +
    "\032\uffb9\033\uffb9\050\uffb9\151\uffb9\156\uffb9\157\uffb9\164" +
    "\uffb9\165\uffb9\166\uffb9\167\uffb9\170\uffb9\001\002\000\006" +
    "\003\220\122\217\001\002\000\006\003\221\165\222\001" +
    "\002\000\052\003\uffbd\007\uffbd\010\uffbd\014\uffbd\020\uffbd" +
    "\021\uffbd\023\uffbd\025\uffbd\026\uffbd\032\uffbd\033\uffbd\050" +
    "\uffbd\151\uffbd\156\uffbd\157\uffbd\164\uffbd\165\uffbd\166\uffbd" +
    "\167\uffbd\170\uffbd\001\002\000\052\003\uffc1\007\uffc1\010" +
    "\uffc1\014\uffc1\020\uffc1\021\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\032\uffc1\033\uffc1\050\uffc1\151\uffc1\156\uffc1\157\uffc1\164" +
    "\uffc1\165\uffc1\166\uffc1\167\uffc1\170\uffc1\001\002\000\006" +
    "\003\223\153\224\001\002\000\052\003\uffc5\007\uffc5\010" +
    "\uffc5\014\uffc5\020\uffc5\021\uffc5\023\uffc5\025\uffc5\026\uffc5" +
    "\032\uffc5\033\uffc5\050\uffc5\151\uffc5\156\uffc5\157\uffc5\164" +
    "\uffc5\165\uffc5\166\uffc5\167\uffc5\170\uffc5\001\002\000\052" +
    "\003\uffc9\007\uffc9\010\uffc9\014\uffc9\020\uffc9\021\uffc9\023" +
    "\uffc9\025\uffc9\026\uffc9\032\uffc9\033\uffc9\050\uffc9\151\uffc9" +
    "\156\uffc9\157\uffc9\164\uffc9\165\uffc9\166\uffc9\167\uffc9\170" +
    "\uffc9\001\002\000\052\003\uffbc\007\uffbc\010\uffbc\014\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\025\uffbc\026\uffbc\032\uffbc\033" +
    "\uffbc\050\uffbc\151\uffbc\156\uffbc\157\uffbc\164\uffbc\165\uffbc" +
    "\166\uffbc\167\uffbc\170\uffbc\001\002\000\006\003\230\122" +
    "\227\001\002\000\006\003\231\167\232\001\002\000\052" +
    "\003\uffc0\007\uffc0\010\uffc0\014\uffc0\020\uffc0\021\uffc0\023" +
    "\uffc0\025\uffc0\026\uffc0\032\uffc0\033\uffc0\050\uffc0\151\uffc0" +
    "\156\uffc0\157\uffc0\164\uffc0\165\uffc0\166\uffc0\167\uffc0\170" +
    "\uffc0\001\002\000\052\003\uffc4\007\uffc4\010\uffc4\014\uffc4" +
    "\020\uffc4\021\uffc4\023\uffc4\025\uffc4\026\uffc4\032\uffc4\033" +
    "\uffc4\050\uffc4\151\uffc4\156\uffc4\157\uffc4\164\uffc4\165\uffc4" +
    "\166\uffc4\167\uffc4\170\uffc4\001\002\000\006\003\233\153" +
    "\234\001\002\000\052\003\uffc8\007\uffc8\010\uffc8\014\uffc8" +
    "\020\uffc8\021\uffc8\023\uffc8\025\uffc8\026\uffc8\032\uffc8\033" +
    "\uffc8\050\uffc8\151\uffc8\156\uffc8\157\uffc8\164\uffc8\165\uffc8" +
    "\166\uffc8\167\uffc8\170\uffc8\001\002\000\052\003\uffcc\007" +
    "\uffcc\010\uffcc\014\uffcc\020\uffcc\021\uffcc\023\uffcc\025\uffcc" +
    "\026\uffcc\032\uffcc\033\uffcc\050\uffcc\151\uffcc\156\uffcc\157" +
    "\uffcc\164\uffcc\165\uffcc\166\uffcc\167\uffcc\170\uffcc\001\002" +
    "\000\052\003\uffbb\007\uffbb\010\uffbb\014\uffbb\020\uffbb\021" +
    "\uffbb\023\uffbb\025\uffbb\026\uffbb\032\uffbb\033\uffbb\050\uffbb" +
    "\151\uffbb\156\uffbb\157\uffbb\164\uffbb\165\uffbb\166\uffbb\167" +
    "\uffbb\170\uffbb\001\002\000\006\003\240\122\237\001\002" +
    "\000\006\003\241\170\242\001\002\000\052\003\uffbf\007" +
    "\uffbf\010\uffbf\014\uffbf\020\uffbf\021\uffbf\023\uffbf\025\uffbf" +
    "\026\uffbf\032\uffbf\033\uffbf\050\uffbf\151\uffbf\156\uffbf\157" +
    "\uffbf\164\uffbf\165\uffbf\166\uffbf\167\uffbf\170\uffbf\001\002" +
    "\000\052\003\uffc3\007\uffc3\010\uffc3\014\uffc3\020\uffc3\021" +
    "\uffc3\023\uffc3\025\uffc3\026\uffc3\032\uffc3\033\uffc3\050\uffc3" +
    "\151\uffc3\156\uffc3\157\uffc3\164\uffc3\165\uffc3\166\uffc3\167" +
    "\uffc3\170\uffc3\001\002\000\006\003\243\153\244\001\002" +
    "\000\052\003\uffc7\007\uffc7\010\uffc7\014\uffc7\020\uffc7\021" +
    "\uffc7\023\uffc7\025\uffc7\026\uffc7\032\uffc7\033\uffc7\050\uffc7" +
    "\151\uffc7\156\uffc7\157\uffc7\164\uffc7\165\uffc7\166\uffc7\167" +
    "\uffc7\170\uffc7\001\002\000\052\003\uffcb\007\uffcb\010\uffcb" +
    "\014\uffcb\020\uffcb\021\uffcb\023\uffcb\025\uffcb\026\uffcb\032" +
    "\uffcb\033\uffcb\050\uffcb\151\uffcb\156\uffcb\157\uffcb\164\uffcb" +
    "\165\uffcb\166\uffcb\167\uffcb\170\uffcb\001\002\000\012\003" +
    "\253\164\254\167\071\170\070\001\002\000\012\003\250" +
    "\164\251\167\071\170\070\001\002\000\064\003\uff98\007" +
    "\uff98\010\uff98\014\uff98\020\uff98\021\uff98\023\uff98\025\uff98" +
    "\026\uff98\032\uff98\033\uff98\050\uff98\117\uff98\120\uff98\121" +
    "\uff98\145\uff98\151\uff98\153\uff98\156\uff98\157\uff98\164\uff98" +
    "\165\uff98\166\uff98\167\uff98\170\uff98\001\002\000\064\003" +
    "\uff8d\007\uff8d\010\uff8d\014\uff8d\020\uff8d\021\uff8d\023\uff8d" +
    "\025\uff8d\026\uff8d\032\uff8d\033\uff8d\050\uff8d\117\uff8d\120" +
    "\uff8d\121\uff8d\145\uff8d\151\uff8d\153\uff8d\156\uff8d\157\uff8d" +
    "\164\uff8d\165\uff8d\166\uff8d\167\uff8d\170\uff8d\001\002\000" +
    "\064\003\uff97\007\uff97\010\uff97\014\uff97\020\uff97\021\uff97" +
    "\023\uff97\025\uff97\026\uff97\032\uff97\033\uff97\050\uff97\117" +
    "\uff97\120\uff97\121\uff97\145\uff97\151\uff97\153\uff97\156\uff97" +
    "\157\uff97\164\uff97\165\uff97\166\uff97\167\uff97\170\uff97\001" +
    "\002\000\064\003\uff91\007\uff91\010\uff91\014\uff91\020\uff91" +
    "\021\uff91\023\uff91\025\uff91\026\uff91\032\uff91\033\uff91\050" +
    "\uff91\117\uff91\120\uff91\121\uff91\145\uff91\151\uff91\153\uff91" +
    "\156\uff91\157\uff91\164\uff91\165\uff91\166\uff91\167\uff91\170" +
    "\uff91\001\002\000\064\003\uff8c\007\uff8c\010\uff8c\014\uff8c" +
    "\020\uff8c\021\uff8c\023\uff8c\025\uff8c\026\uff8c\032\uff8c\033" +
    "\uff8c\050\uff8c\117\uff8c\120\uff8c\121\uff8c\145\uff8c\151\uff8c" +
    "\153\uff8c\156\uff8c\157\uff8c\164\uff8c\165\uff8c\166\uff8c\167" +
    "\uff8c\170\uff8c\001\002\000\064\003\uff90\007\uff90\010\uff90" +
    "\014\uff90\020\uff90\021\uff90\023\uff90\025\uff90\026\uff90\032" +
    "\uff90\033\uff90\050\uff90\117\uff90\120\uff90\121\uff90\145\uff90" +
    "\151\uff90\153\uff90\156\uff90\157\uff90\164\uff90\165\uff90\166" +
    "\uff90\167\uff90\170\uff90\001\002\000\016\003\uffa6\164\uffa6" +
    "\165\uffa6\166\uffa6\167\uffa6\170\uffa6\001\002\000\016\003" +
    "\uffa8\164\uffa8\165\uffa8\166\uffa8\167\uffa8\170\uffa8\001\002" +
    "\000\016\003\262\164\142\165\052\166\051\167\071\170" +
    "\070\001\002\000\016\003\uffa7\164\uffa7\165\uffa7\166\uffa7" +
    "\167\uffa7\170\uffa7\001\002\000\052\003\uff88\007\uff88\010" +
    "\uff88\014\uff88\020\uff88\021\uff88\023\uff88\025\uff88\026\uff88" +
    "\032\uff88\033\uff88\050\uff88\151\uff88\156\uff88\157\uff88\164" +
    "\uff88\165\uff88\166\uff88\167\uff88\170\uff88\001\002\000\052" +
    "\003\uff87\007\uff87\010\uff87\014\uff87\020\uff87\021\uff87\023" +
    "\uff87\025\uff87\026\uff87\032\uff87\033\uff87\050\uff87\151\uff87" +
    "\156\uff87\157\uff87\164\uff87\165\uff87\166\uff87\167\uff87\170" +
    "\uff87\001\002\000\010\003\uff5d\032\uff5d\151\uff5d\001\002" +
    "\000\052\003\uff70\007\uff70\010\uff70\014\uff70\020\uff70\021" +
    "\uff70\023\uff70\025\uff70\026\uff70\032\uff70\033\uff70\050\uff70" +
    "\151\uff70\156\uff70\157\uff70\164\uff70\165\uff70\166\uff70\167" +
    "\uff70\170\uff70\001\002\000\016\003\267\164\142\165\052" +
    "\166\051\167\071\170\070\001\002\000\006\003\270\145" +
    "\271\001\002\000\052\003\uff71\007\uff71\010\uff71\014\uff71" +
    "\020\uff71\021\uff71\023\uff71\025\uff71\026\uff71\032\uff71\033" +
    "\uff71\050\uff71\151\uff71\156\uff71\157\uff71\164\uff71\165\uff71" +
    "\166\uff71\167\uff71\170\uff71\001\002\000\052\003\uff72\007" +
    "\uff72\010\uff72\014\uff72\020\uff72\021\uff72\023\uff72\025\uff72" +
    "\026\uff72\032\uff72\033\uff72\050\uff72\151\uff72\156\uff72\157" +
    "\uff72\164\uff72\165\uff72\166\uff72\167\uff72\170\uff72\001\002" +
    "\000\006\003\272\150\273\001\002\000\052\003\uff73\007" +
    "\uff73\010\uff73\014\uff73\020\uff73\021\uff73\023\uff73\025\uff73" +
    "\026\uff73\032\uff73\033\uff73\050\uff73\151\uff73\156\uff73\157" +
    "\uff73\164\uff73\165\uff73\166\uff73\167\uff73\170\uff73\001\002" +
    "\000\046\003\275\007\021\010\060\014\015\020\022\021" +
    "\067\023\050\025\030\026\012\033\020\050\044\156\043" +
    "\157\042\164\062\165\052\166\051\167\071\170\070\001" +
    "\002\000\006\003\276\151\277\001\002\000\052\003\uff74" +
    "\007\uff74\010\uff74\014\uff74\020\uff74\021\uff74\023\uff74\025" +
    "\uff74\026\uff74\032\uff74\033\uff74\050\uff74\151\uff74\156\uff74" +
    "\157\uff74\164\uff74\165\uff74\166\uff74\167\uff74\170\uff74\001" +
    "\002\000\052\003\uff75\007\uff75\010\uff75\014\uff75\020\uff75" +
    "\021\uff75\023\uff75\025\uff75\026\uff75\032\uff75\033\uff75\050" +
    "\uff75\151\uff75\156\uff75\157\uff75\164\uff75\165\uff75\166\uff75" +
    "\167\uff75\170\uff75\001\002\000\054\003\uff7a\007\uff7a\010" +
    "\uff7a\014\uff7a\015\300\020\uff7a\021\uff7a\023\uff7a\025\uff7a" +
    "\026\uff7a\032\uff7a\033\uff7a\050\uff7a\151\uff7a\156\uff7a\157" +
    "\uff7a\164\uff7a\165\uff7a\166\uff7a\167\uff7a\170\uff7a\001\002" +
    "\000\006\003\301\150\302\001\002\000\052\003\uff76\007" +
    "\uff76\010\uff76\014\uff76\020\uff76\021\uff76\023\uff76\025\uff76" +
    "\026\uff76\032\uff76\033\uff76\050\uff76\151\uff76\156\uff76\157" +
    "\uff76\164\uff76\165\uff76\166\uff76\167\uff76\170\uff76\001\002" +
    "\000\046\003\304\007\021\010\060\014\015\020\022\021" +
    "\067\023\050\025\030\026\012\033\020\050\044\156\043" +
    "\157\042\164\062\165\052\166\051\167\071\170\070\001" +
    "\002\000\006\003\305\151\306\001\002\000\052\003\uff77" +
    "\007\uff77\010\uff77\014\uff77\020\uff77\021\uff77\023\uff77\025" +
    "\uff77\026\uff77\032\uff77\033\uff77\050\uff77\151\uff77\156\uff77" +
    "\157\uff77\164\uff77\165\uff77\166\uff77\167\uff77\170\uff77\001" +
    "\002\000\052\003\uff78\007\uff78\010\uff78\014\uff78\020\uff78" +
    "\021\uff78\023\uff78\025\uff78\026\uff78\032\uff78\033\uff78\050" +
    "\uff78\151\uff78\156\uff78\157\uff78\164\uff78\165\uff78\166\uff78" +
    "\167\uff78\170\uff78\001\002\000\052\003\uff79\007\uff79\010" +
    "\uff79\014\uff79\020\uff79\021\uff79\023\uff79\025\uff79\026\uff79" +
    "\032\uff79\033\uff79\050\uff79\151\uff79\156\uff79\157\uff79\164" +
    "\uff79\165\uff79\166\uff79\167\uff79\170\uff79\001\002\000\020" +
    "\007\ufff6\014\ufff6\020\ufff6\025\ufff6\026\ufff6\033\ufff6\046" +
    "\ufff6\001\002\000\004\003\320\001\002\000\010\003\315" +
    "\152\314\153\316\001\002\000\052\003\uffcd\007\uffcd\010" +
    "\uffcd\014\uffcd\020\uffcd\021\uffcd\023\uffcd\025\uffcd\026\uffcd" +
    "\032\uffcd\033\uffcd\050\uffcd\151\uffcd\156\uffcd\157\uffcd\164" +
    "\uffcd\165\uffcd\166\uffcd\167\uffcd\170\uffcd\001\002\000\010" +
    "\003\uffd5\152\uffd5\153\uffd5\001\002\000\004\164\317\001" +
    "\002\000\052\003\uffce\007\uffce\010\uffce\014\uffce\020\uffce" +
    "\021\uffce\023\uffce\025\uffce\026\uffce\032\uffce\033\uffce\050" +
    "\uffce\151\uffce\156\uffce\157\uffce\164\uffce\165\uffce\166\uffce" +
    "\167\uffce\170\uffce\001\002\000\052\003\uffcf\007\uffcf\010" +
    "\uffcf\014\uffcf\020\uffcf\021\uffcf\023\uffcf\025\uffcf\026\uffcf" +
    "\032\uffcf\033\uffcf\050\uffcf\151\uffcf\156\uffcf\157\uffcf\164" +
    "\uffcf\165\uffcf\166\uffcf\167\uffcf\170\uffcf\001\002\000\010" +
    "\003\uffd6\152\uffd6\153\uffd6\001\002\000\010\003\uffd4\152" +
    "\uffd4\153\uffd4\001\002\000\052\003\uff69\007\uff69\010\uff69" +
    "\014\uff69\020\uff69\021\uff69\023\uff69\025\uff69\026\uff69\032" +
    "\uff69\033\uff69\050\uff69\151\uff69\156\uff69\157\uff69\164\uff69" +
    "\165\uff69\166\uff69\167\uff69\170\uff69\001\002\000\016\003" +
    "\324\164\142\165\052\166\051\167\071\170\070\001\002" +
    "\000\006\003\325\145\326\001\002\000\052\003\uff6a\007" +
    "\uff6a\010\uff6a\014\uff6a\020\uff6a\021\uff6a\023\uff6a\025\uff6a" +
    "\026\uff6a\032\uff6a\033\uff6a\050\uff6a\151\uff6a\156\uff6a\157" +
    "\uff6a\164\uff6a\165\uff6a\166\uff6a\167\uff6a\170\uff6a\001\002" +
    "\000\052\003\uff6b\007\uff6b\010\uff6b\014\uff6b\020\uff6b\021" +
    "\uff6b\023\uff6b\025\uff6b\026\uff6b\032\uff6b\033\uff6b\050\uff6b" +
    "\151\uff6b\156\uff6b\157\uff6b\164\uff6b\165\uff6b\166\uff6b\167" +
    "\uff6b\170\uff6b\001\002\000\006\003\327\150\330\001\002" +
    "\000\052\003\uff6c\007\uff6c\010\uff6c\014\uff6c\020\uff6c\021" +
    "\uff6c\023\uff6c\025\uff6c\026\uff6c\032\uff6c\033\uff6c\050\uff6c" +
    "\151\uff6c\156\uff6c\157\uff6c\164\uff6c\165\uff6c\166\uff6c\167" +
    "\uff6c\170\uff6c\001\002\000\046\003\332\007\021\010\060" +
    "\014\015\020\022\021\067\023\050\025\030\026\012\033" +
    "\020\050\044\156\043\157\042\164\062\165\052\166\051" +
    "\167\071\170\070\001\002\000\006\003\333\151\334\001" +
    "\002\000\052\003\uff6d\007\uff6d\010\uff6d\014\uff6d\020\uff6d" +
    "\021\uff6d\023\uff6d\025\uff6d\026\uff6d\032\uff6d\033\uff6d\050" +
    "\uff6d\151\uff6d\156\uff6d\157\uff6d\164\uff6d\165\uff6d\166\uff6d" +
    "\167\uff6d\170\uff6d\001\002\000\052\003\uff6e\007\uff6e\010" +
    "\uff6e\014\uff6e\020\uff6e\021\uff6e\023\uff6e\025\uff6e\026\uff6e" +
    "\032\uff6e\033\uff6e\050\uff6e\151\uff6e\156\uff6e\157\uff6e\164" +
    "\uff6e\165\uff6e\166\uff6e\167\uff6e\170\uff6e\001\002\000\052" +
    "\003\uff6f\007\uff6f\010\uff6f\014\uff6f\020\uff6f\021\uff6f\023" +
    "\uff6f\025\uff6f\026\uff6f\032\uff6f\033\uff6f\050\uff6f\151\uff6f" +
    "\156\uff6f\157\uff6f\164\uff6f\165\uff6f\166\uff6f\167\uff6f\170" +
    "\uff6f\001\002\000\010\003\uff5a\032\uff5a\151\uff5a\001\002" +
    "\000\010\003\uff5b\032\uff5b\151\uff5b\001\002\000\012\003" +
    "\341\164\342\165\052\166\051\001\002\000\064\003\uff96" +
    "\007\uff96\010\uff96\014\uff96\020\uff96\021\uff96\023\uff96\025" +
    "\uff96\026\uff96\032\uff96\033\uff96\050\uff96\117\uff96\120\uff96" +
    "\121\uff96\145\uff96\151\uff96\153\uff96\156\uff96\157\uff96\164" +
    "\uff96\165\uff96\166\uff96\167\uff96\170\uff96\001\002\000\064" +
    "\003\uff8b\007\uff8b\010\uff8b\014\uff8b\020\uff8b\021\uff8b\023" +
    "\uff8b\025\uff8b\026\uff8b\032\uff8b\033\uff8b\050\uff8b\117\uff8b" +
    "\120\uff8b\121\uff8b\145\uff8b\151\uff8b\153\uff8b\156\uff8b\157" +
    "\uff8b\164\uff8b\165\uff8b\166\uff8b\167\uff8b\170\uff8b\001\002" +
    "\000\064\003\uff95\007\uff95\010\uff95\014\uff95\020\uff95\021" +
    "\uff95\023\uff95\025\uff95\026\uff95\032\uff95\033\uff95\050\uff95" +
    "\117\uff95\120\uff95\121\uff95\145\uff95\151\uff95\153\uff95\156" +
    "\uff95\157\uff95\164\uff95\165\uff95\166\uff95\167\uff95\170\uff95" +
    "\001\002\000\010\003\ufffc\145\ufffc\152\ufffc\001\002\000" +
    "\010\003\ufffb\145\ufffb\152\ufffb\001\002\000\044\007\021" +
    "\010\060\014\015\020\022\021\067\023\050\025\030\026" +
    "\012\033\020\050\044\156\043\157\042\164\062\165\052" +
    "\166\051\167\071\170\070\001\002\000\004\151\347\001" +
    "\002\000\020\007\ufff5\014\ufff5\020\ufff5\025\ufff5\026\ufff5" +
    "\033\ufff5\046\ufff5\001\002\000\010\003\ufff9\145\ufff9\152" +
    "\ufff9\001\002\000\004\144\352\001\002\000\020\007\021" +
    "\014\015\020\022\025\030\026\012\033\020\145\353\001" +
    "\002\000\004\150\364\001\002\000\006\145\355\152\035" +
    "\001\002\000\004\150\356\001\002\000\044\007\021\010" +
    "\060\014\015\020\022\021\067\023\050\025\030\026\012" +
    "\033\020\050\044\156\043\157\042\164\062\165\052\166" +
    "\051\167\071\170\070\001\002\000\004\032\360\001\002" +
    "\000\004\164\361\001\002\000\004\153\362\001\002\000" +
    "\004\151\363\001\002\000\020\007\ufff8\014\ufff8\020\ufff8" +
    "\025\ufff8\026\ufff8\033\ufff8\046\ufff8\001\002\000\044\007" +
    "\021\010\060\014\015\020\022\021\067\023\050\025\030" +
    "\026\012\033\020\050\044\156\043\157\042\164\062\165" +
    "\052\166\051\167\071\170\070\001\002\000\004\032\366" +
    "\001\002\000\004\164\367\001\002\000\004\153\370\001" +
    "\002\000\004\151\371\001\002\000\020\007\ufff7\014\ufff7" +
    "\020\ufff7\025\ufff7\026\ufff7\033\ufff7\046\ufff7\001\002\000" +
    "\020\007\uffe0\014\uffe0\020\uffe0\025\uffe0\026\uffe0\033\uffe0" +
    "\046\uffe0\001\002\000\006\003\374\144\375\001\002\000" +
    "\020\007\uffe1\014\uffe1\020\uffe1\025\uffe1\026\uffe1\033\uffe1" +
    "\046\uffe1\001\002\000\022\003\377\007\021\014\015\020" +
    "\022\025\030\026\012\033\020\145\376\001\002\000\004" +
    "\150\u0109\001\002\000\020\007\uffe2\014\uffe2\020\uffe2\025" +
    "\uffe2\026\uffe2\033\uffe2\046\uffe2\001\002\000\010\003\u0101" +
    "\145\u0102\152\035\001\002\000\020\007\uffe3\014\uffe3\020" +
    "\uffe3\025\uffe3\026\uffe3\033\uffe3\046\uffe3\001\002\000\006" +
    "\003\u0103\150\u0104\001\002\000\020\007\uffe4\014\uffe4\020" +
    "\uffe4\025\uffe4\026\uffe4\033\uffe4\046\uffe4\001\002\000\046" +
    "\003\u0106\007\021\010\060\014\015\020\022\021\067\023" +
    "\050\025\030\026\012\033\020\050\044\156\043\157\042" +
    "\164\062\165\052\166\051\167\071\170\070\001\002\000" +
    "\006\003\u0107\151\u0108\001\002\000\020\007\uffe5\014\uffe5" +
    "\020\uffe5\025\uffe5\026\uffe5\033\uffe5\046\uffe5\001\002\000" +
    "\020\007\uffe6\014\uffe6\020\uffe6\025\uffe6\026\uffe6\033\uffe6" +
    "\046\uffe6\001\002\000\020\007\ufff2\014\ufff2\020\ufff2\025" +
    "\ufff2\026\ufff2\033\ufff2\046\ufff2\001\002\000\044\007\021" +
    "\010\060\014\015\020\022\021\067\023\050\025\030\026" +
    "\012\033\020\050\044\156\043\157\042\164\062\165\052" +
    "\166\051\167\071\170\070\001\002\000\004\151\u010b\001" +
    "\002\000\020\007\ufff1\014\ufff1\020\ufff1\025\ufff1\026\ufff1" +
    "\033\ufff1\046\ufff1\001\002\000\020\007\uffe7\014\uffe7\020" +
    "\uffe7\025\uffe7\026\uffe7\033\uffe7\046\uffe7\001\002\000\006" +
    "\003\u010e\144\u010f\001\002\000\020\007\uffe8\014\uffe8\020" +
    "\uffe8\025\uffe8\026\uffe8\033\uffe8\046\uffe8\001\002\000\022" +
    "\003\u0111\007\021\014\015\020\022\025\030\026\012\033" +
    "\020\145\u0110\001\002\000\004\150\u0121\001\002\000\020" +
    "\007\uffe9\014\uffe9\020\uffe9\025\uffe9\026\uffe9\033\uffe9\046" +
    "\uffe9\001\002\000\010\003\u0113\145\u0114\152\035\001\002" +
    "\000\020\007\uffea\014\uffea\020\uffea\025\uffea\026\uffea\033" +
    "\uffea\046\uffea\001\002\000\006\003\u0115\150\u0116\001\002" +
    "\000\020\007\uffeb\014\uffeb\020\uffeb\025\uffeb\026\uffeb\033" +
    "\uffeb\046\uffeb\001\002\000\046\003\u0118\007\021\010\060" +
    "\014\015\020\022\021\067\023\050\025\030\026\012\033" +
    "\020\050\044\156\043\157\042\164\062\165\052\166\051" +
    "\167\071\170\070\001\002\000\006\003\u011a\032\u0119\001" +
    "\002\000\020\007\uffec\014\uffec\020\uffec\025\uffec\026\uffec" +
    "\033\uffec\046\uffec\001\002\000\006\003\u011b\164\u011c\001" +
    "\002\000\020\007\uffed\014\uffed\020\uffed\025\uffed\026\uffed" +
    "\033\uffed\046\uffed\001\002\000\020\007\uffee\014\uffee\020" +
    "\uffee\025\uffee\026\uffee\033\uffee\046\uffee\001\002\000\006" +
    "\003\u011d\153\u011e\001\002\000\020\007\uffef\014\uffef\020" +
    "\uffef\025\uffef\026\uffef\033\uffef\046\uffef\001\002\000\006" +
    "\003\u011f\151\u0120\001\002\000\020\007\ufff0\014\ufff0\020" +
    "\ufff0\025\ufff0\026\ufff0\033\ufff0\046\ufff0\001\002\000\020" +
    "\007\ufff4\014\ufff4\020\ufff4\025\ufff4\026\ufff4\033\ufff4\046" +
    "\ufff4\001\002\000\044\007\021\010\060\014\015\020\022" +
    "\021\067\023\050\025\030\026\012\033\020\050\044\156" +
    "\043\157\042\164\062\165\052\166\051\167\071\170\070" +
    "\001\002\000\004\032\u0123\001\002\000\004\164\u0124\001" +
    "\002\000\004\153\u0125\001\002\000\004\151\u0126\001\002" +
    "\000\020\007\ufff3\014\ufff3\020\ufff3\025\ufff3\026\ufff3\033" +
    "\ufff3\046\ufff3\001\002\000\004\144\u0128\001\002\000\004" +
    "\145\u0129\001\002\000\004\150\u012a\001\002\000\044\007" +
    "\021\010\060\014\015\020\022\021\067\023\050\025\030" +
    "\026\012\033\020\050\044\156\043\157\042\164\062\165" +
    "\052\166\051\167\071\170\070\001\002\000\004\032\u012c" +
    "\001\002\000\004\167\u012d\001\002\000\004\153\u012e\001" +
    "\002\000\004\151\u012f\001\002\000\004\002\uffdf\001\002" +
    "\000\004\002\001\001\002\000\004\164\u0132\001\002\000" +
    "\004\142\u0133\001\002\000\004\164\u0134\001\002\000\004" +
    "\114\u0135\001\002\000\022\007\ufffd\014\ufffd\020\ufffd\025" +
    "\ufffd\026\ufffd\033\ufffd\046\ufffd\063\004\001\002\000\020" +
    "\007\ufffe\014\ufffe\020\ufffe\025\ufffe\026\ufffe\033\ufffe\046" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\015\006\016\007\010" +
    "\010\006\011\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\024\007" +
    "\022\010\006\011\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\030\010\006\011\012\012\033\013\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\030\010" +
    "\006\011\012\013\342\001\001\000\002\001\001\000\044" +
    "\007\045\010\006\011\012\015\062\016\064\017\055\020" +
    "\040\030\053\031\056\032\065\033\063\035\037\036\044" +
    "\037\060\040\054\041\046\042\052\001\001\000\002\001" +
    "\001\000\004\022\336\001\001\000\044\007\045\010\006" +
    "\011\012\015\062\016\064\017\055\020\040\030\053\031" +
    "\056\032\065\033\063\035\037\036\044\037\060\040\054" +
    "\041\335\042\052\001\001\000\044\007\045\010\006\011" +
    "\012\015\062\016\064\017\055\020\040\030\053\031\056" +
    "\032\065\033\063\035\037\036\044\037\060\040\054\041" +
    "\334\042\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\007\045" +
    "\010\006\011\012\015\062\016\064\017\055\020\040\030" +
    "\053\031\056\032\065\033\063\035\037\036\044\037\060" +
    "\040\054\041\262\042\052\001\001\000\004\024\256\001" +
    "\001\000\002\001\001\000\006\022\245\023\244\001\001" +
    "\000\002\001\001\000\006\010\177\011\200\001\001\000" +
    "\002\001\001\000\006\022\151\023\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\075\043\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\113\020\104\021\112\025\117\026\116\027\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\113\020\104\021\112\025" +
    "\117\026\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\113\020" +
    "\104\021\121\025\117\026\116\027\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\113\020\104\025" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\127\001\001\000\002\001\001\000" +
    "\010\017\113\020\104\025\123\001\001\000\002\001\001" +
    "\000\004\021\132\001\001\000\016\017\113\020\104\021" +
    "\112\025\117\026\116\027\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\055\020" +
    "\040\030\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\151\023\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\156\001\001\000\002\001\001\000" +
    "\006\017\152\020\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\007\045\010\006\011\012\015\062\016\064\017" +
    "\055\020\040\030\053\031\056\032\065\033\063\035\037" +
    "\036\044\037\060\040\054\041\171\042\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\251\001\001\000\004\017\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\055\020\040" +
    "\030\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\055\020\040\030\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\007\045\010\006\011\012\015\062\016" +
    "\064\017\055\020\040\030\053\031\056\032\065\033\063" +
    "\035\037\036\044\037\060\040\054\041\273\042\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\007\045\010\006\011\012\015\062\016\064\017\055" +
    "\020\040\030\053\031\056\032\065\033\063\035\037\036" +
    "\044\037\060\040\054\041\302\042\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\055\020\040\030" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\007" +
    "\045\010\006\011\012\015\062\016\064\017\055\020\040" +
    "\030\053\031\056\032\065\033\063\035\037\036\044\037" +
    "\060\040\054\041\330\042\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\007\045\010\006" +
    "\011\012\015\062\016\064\017\055\020\040\030\053\031" +
    "\056\032\065\033\063\035\037\036\044\037\060\040\054" +
    "\041\345\042\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\030" +
    "\010\006\011\012\012\353\013\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\007\045" +
    "\010\006\011\012\015\062\016\064\017\055\020\040\030" +
    "\053\031\056\032\065\033\063\035\037\036\044\037\060" +
    "\040\054\041\356\042\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\007\045\010\006\011\012\015\062\016" +
    "\064\017\055\020\040\030\053\031\056\032\065\033\063" +
    "\035\037\036\044\037\060\040\054\041\364\042\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\030\010\006" +
    "\011\012\012\377\013\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\007\045\010\006\011" +
    "\012\015\062\016\064\017\055\020\040\030\053\031\056" +
    "\032\065\033\063\035\037\036\044\037\060\040\054\041" +
    "\u0104\042\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\045\010" +
    "\006\011\012\015\062\016\064\017\055\020\040\030\053" +
    "\031\056\032\065\033\063\035\037\036\044\037\060\040" +
    "\054\041\u0109\042\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\030\010\006\011\012\012\u0111\013\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\007\045\010\006\011\012\015\062\016\064\017" +
    "\055\020\040\030\053\031\056\032\065\033\063\035\037" +
    "\036\044\037\060\040\054\041\u0116\042\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\007\045\010\006\011\012\015\062\016\064\017" +
    "\055\020\040\030\053\031\056\032\065\033\063\035\037" +
    "\036\044\037\060\040\054\041\u0121\042\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\007\045\010\006\011\012" +
    "\015\062\016\064\017\055\020\040\030\053\031\056\032" +
    "\065\033\063\035\037\036\044\037\060\040\054\041\u012a" +
    "\042\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0135\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolosC tabla = new TablaSimbolosC();
    public static SimboloC simbolo;
    public static String tipoDato = "";
    public static String resultado = "";
    public static String resultadoParcial = "";
    public static String tipoActual = "";
    public static boolean booltexto = false;
    public static boolean boolchar = false;
    public static boolean boolint = false;
    public static boolean boolfloat = false;

    
    public static boolean esCompatible(boolean booltexto, boolean boolchar, boolean boolint, boolean boolfloat){
        int count = 0;
        if(booltexto){ count = count+1;}
        if(boolchar){ count = count+1;}
        if(boolint){ count = count+1;}
        if(boolfloat){ count = count+1;}

        if(count != 1){
            return false;
        } else {
            return true;
        }
    }
    
    @Override
    public void syntax_error(Symbol s){
        System.err.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserC$actions {
  private final ParserC parser;

  /** Constructor */
  CUP$ParserC$actions(ParserC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserC$do_action(
    int                        CUP$ParserC$act_num,
    java_cup.runtime.lr_parser CUP$ParserC$parser,
    java.util.Stack            CUP$ParserC$stack,
    int                        CUP$ParserC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserC$result;

      /* select the action based on the action number */
      switch (CUP$ParserC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // inicializacion ::= lista_tipo_entero error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("inicializacion",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // inicializacion ::= lista_tipo_entero operaciones_validas1 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("inicializacion",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // sentencia ::= operaciones_validas1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // sentencia ::= operaciones_validas2 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // sentencia ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // sentencia ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // sentencia ::= operaciones_validas1 PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // bloque ::= COMENTARIOUNILINEA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // bloque ::= COMENTARIOMULTILINEA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // bloque ::= COMENTARIOUNILINEA bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // bloque ::= COMENTARIOMULTILINEA bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // bloque ::= sentencia bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sentencia_for ::= FOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sentencia_for ::= FOR PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  System.out.println("[AS-EC-FOR] Esta es una estructura de control FOR"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentencia_while ::= WHILE error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentencia_while ::= WHILE PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  System.out.println("[AS-EC-WHILE] Esta es una estructura de control WHILE"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencia_if ::= IF error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia_if ::= IF PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  System.out.println("[AS-EC-IF] Esta es una estructura de control IF"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operaciones ::= operaciones_validas2 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operaciones ::= operaciones_validas1 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operaciones ::= operaciones_validas2 operaciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operaciones ::= operaciones_validas1 operaciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operaciones_validas2 ::= operacion_logica 
            {
              Object RESULT =null;
		  System.out.println("[AS-OV-2] Esta es una operacion logica"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operaciones_validas2 ::= operacion_relacional 
            {
              Object RESULT =null;
		  System.out.println("[AS-OV-2] Esta es una operacion relacional"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operaciones_validas1 ::= IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operaciones_validas1 ::= IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operaciones_validas1 ::= IDENTIFICADOR ASIGNACION operacion_aritmetica_compuesta 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                        SimboloC simbolo = parser.tabla.obtenerSimbolo(id);
                        if (simbolo != null) {                                  /*Simbolo no declarado*/
                            parser.tipoActual = simbolo.getTipo();
                            switch (parser.tipoActual){
                                case "char*":
                                    parser.booltexto = true;
                                    break;
                                case "char":
                                    parser.boolchar = true;
                                    break;
                                case "int":
                                    parser.boolint = true;
                                    break;
                                case "float":
                                    parser.boolfloat = true;
                                    break;
                                default:
                                    parser.booltexto = true;
                                    parser.boolchar = true;
                                    parser.boolint = true;
                                    parser.boolfloat = true;
                                    System.err.println("[SCASE-ERROR] El identicador que tiene un tipo de dato desconocido.");
                                    break;
                            }
                            if(!simbolo.isConstante()){                         /*Simbolo es constante*/
                                if(parser.esCompatible(parser.booltexto,parser.boolchar,parser.boolint,parser.boolfloat)){                         /*Tipo de dato distinto*/
                                    parser.simbolo = new SimboloC(id, parser.tipoDato, parser.resultado,"metodo",false);
                                    if(parser.tabla.actualizarValor(id, parser.simbolo.getValor())){
                                        System.out.println("Identificador actualizado "+id);
                                        System.out.println(parser.tabla.mostrar());
                                    } else {
                                        System.out.println("Identificador NO actualizado "+id);
                                    }  
                                } else{
                                    System.err.println("[ASEM-ERROR] '"+id+"' espera tipos de dato "+parser.tipoActual);
                                }
                            } else {
                                System.err.println("[ASEM-ERROR] No puedes modificar el valor de una constante.");
                            }
                        } else {
                            System.err.println("[ASEM-ERROR] El identifiador '"+id+"' no fue declarado.");
                        }
                        System.out.println("[AS-OV-1] Esta es una operacion aritmetica");
                        
                        parser.resultado = "";
                        parser.tipoActual = ""; 
                        parser.booltexto = false; 
                        parser.boolchar = false; 
                        parser.boolint = false; 
                        parser.boolfloat = false; 
                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacion_logica ::= operacion_relacional operadores_logicos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operacion_logica ::= operacion_relacional operadores_logicos operacion_relacional 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER operadores_aritmeticos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operacion_aritmetica_compuesta ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operacion_aritmetica_compuesta ::= operacion_aritmetica operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER operadores_aritmeticos operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operacion_aritmetica ::= operadores_aritmeticos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operacion_aritmetica ::= operacion_aritmetica_simple 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operacion_aritmetica ::= operacion_aritmetica operadores_aritmeticos operacion_aritmetica_simple 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operacion_aritmetica_simple ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+id;
                                SimboloC simboloComparacion = parser.tabla.obtenerSimbolo(id);
                                switch (simboloComparacion.getTipo()){
                                    case "char*":
                                        parser.booltexto = true;
                                        break;
                                    case "char":
                                        parser.boolchar = true;
                                        break;
                                    case "int":
                                        parser.boolint = true;
                                        break;
                                    case "float":
                                        parser.boolfloat = true;
                                        break;
                                    default:
                                        parser.booltexto = true;
                                        parser.boolchar = true;
                                        parser.boolint = true;
                                        parser.boolfloat = true;
                                        System.err.println("[SCASE-ERROR] Nos topamos con un identicador que tiene un tipo de dato desconocido.");
                                        break;
                                }
                            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operacion_aritmetica_simple ::= valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operacion_aritmetica_simple ::= valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadores_logicos ::= NOT 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadores_relacionales2 ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadores_relacionales2 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadores_relacionales2 ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadores_relacionales2 ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadores_relacionales1 ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales1",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadores_relacionales1 ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales1",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadores_aritmeticos ::= MODULO 
            {
              Object RESULT =null;
		int moduloleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int moduloright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object modulo = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+modulo;   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadores_aritmeticos ::= DIVISION 
            {
              Object RESULT =null;
		int divisionleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int divisionright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object division = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+division;   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_aritmeticos ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int productoleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int productoright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object producto = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+producto;   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_aritmeticos ::= RESTA 
            {
              Object RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+resta;   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadores_aritmeticos ::= SUMA 
            {
              Object RESULT =null;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object suma = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+suma;   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valores_validos_numero ::= NUMFLOTANTEDEC 
            {
              Object RESULT =null;
		int numfloatdecleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int numfloatdecright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String numfloatdec = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+numfloatdec;      
                            parser.boolfloat = true;
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_numero",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valores_validos_numero ::= NUMDECIMAL 
            {
              Object RESULT =null;
		int numdecleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int numdecright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String numdec = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+numdec;      
                            parser.boolint = true;
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_numero",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valores_validos_texto ::= CADENACHAR 
            {
              Object RESULT =null;
		int ccharleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ccharright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String cchar = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+cchar;      
                            parser.boolchar = true;
                       
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_texto",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valores_validos_texto ::= CADENATEXTO 
            {
              Object RESULT =null;
		int ctextoleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ctextoright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String ctexto = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.resultado = parser.resultado+""+ctexto;      
                            parser.booltexto = true;
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_texto",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion_constante ::= CONST error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion_constante ::= CONST CHAR MULTIPLICACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_constante ::= CONST CHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion_constante ::= CONST lista_tipo_flotante error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion_constante ::= CONST lista_tipo_entero error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion_constante ::= CONST CHAR IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    parser.simbolo = new SimboloC(id, "char*", texto,"metodo",true);
                    if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("Constante agregada "+id);
                                System.out.println(parser.tabla.mostrar());
                    } else {
                        System.out.println("Constante NO agregada "+id);
                    }  
                    System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char*"); 
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int ccharleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int ccharright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String cchar = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    /*String charValue = String.valueOf(((Character) cchar).charValue());*/
                    parser.simbolo = new SimboloC(id, "char", cchar,"metodo",true);
                    if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("Constante agregada "+id);
                                System.out.println(parser.tabla.mostrar());
                    } else {
                        System.out.println("Constante NO agregada "+id);
                    }  
                    System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char"); 
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int numfloatdecleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int numfloatdecright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String numfloatdec = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    parser.simbolo = new SimboloC(id, parser.tipoDato, ""+numfloatdec,"metodo",true);
                    if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("Constante agregada "+id);
                                System.out.println(parser.tabla.mostrar());
                    } else {
                        System.out.println("Constante NO agregada "+id);
                    }  
                    System.out.println("[AS-DEC-CONST] Esta es una declaración de constante flotante"); 
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int numdecleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int numdecright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String numdec = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    parser.simbolo = new SimboloC(id, parser.tipoDato,""+numdec,"metodo",true);
                    if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("Constante agregada "+id);
                                System.out.println(parser.tabla.mostrar());
                    } else {
                        System.out.println("Constante NO agregada "+id);
                    }  
                    System.out.println("[AS-DEC-CONST] Esta es una declaración de constante entero"); 
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_variable ::= lista_tipo_dato error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_variable ::= lista_tipo_dato lista_identificador error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_variable ::= lista_tipo_dato lista_identificador PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  
                    parser.tipoDato = "";
                    parser.resultado = ""; 
                    parser.tipoActual = "";
                    parser.booltexto = false; 
                    parser.boolchar = false; 
                    parser.boolint = false; 
                    parser.boolfloat = false;
                    System.out.println("[AS-DEC-TD] Esta es una declaración de variables");
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaraciones ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaraciones ::= declaracion_constante declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaraciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaraciones ::= declaracion_variable declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_identificador ::= COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		
                            parser.simbolo = new SimboloC(id, parser.tipoDato, "0","metodo",false);
                            if(parser.tabla.agregar(id, parser.simbolo)){
                                System.out.println("Variable agregada "+id);
                                System.out.println(parser.tabla.mostrar());
                            } else {
                                System.out.println("Variable NO agregada "+id);
                            }  
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_identificador ::= lista_identificador COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		  parser.tipoDato = "char";   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_tipo_dato ::= lista_tipo_flotante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_tipo_dato ::= lista_tipo_entero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_tipo_flotante ::= DOUBLE 
            {
              Object RESULT =null;
		  parser.tipoDato = "float";   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_tipo_flotante ::= FLOAT 
            {
              Object RESULT =null;
		  parser.tipoDato = "float";   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_tipo_entero ::= LONG 
            {
              Object RESULT =null;
		  parser.tipoDato = "int";   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_tipo_entero ::= SHORT 
            {
              Object RESULT =null;
		  parser.tipoDato = "int";   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_tipo_entero ::= INT 
            {
              Object RESULT =null;
		  parser.tipoDato = "int";   
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion_main ::= INT MAIN PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque RETURN NUMDECIMAL PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-MAIN] Esta es la funcion main"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("funcion_main",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_funciones ::= VOID error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_funciones ::= VOID IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_funciones ::= lista_tipo_dato error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion void"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion void"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion retornable"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion retornable"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_funciones ::= dec_funciones VOID IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion void"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_funciones ::= dec_funciones VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion void"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_funciones ::= dec_funciones lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion retornable"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_funciones ::= dec_funciones lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion retornable"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-11)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametro ::= lista_tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= parametros COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_include ::= DIRECTIVA_INCLUDE MENOR_QUE IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR_QUE 
            {
              Object RESULT =null;
		  System.out.println("[AS-INCLUDE] Esta es una directiva #include");  
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_include",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_include ::= DIRECTIVA_INCLUDE MENOR_QUE IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR_QUE dec_include 
            {
              Object RESULT =null;
		  System.out.println("[AS-INCLUDE] Esta es una directiva #include");  
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_include",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= dec_include dec_funciones funcion_main 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= dec_include funcion_main 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		RESULT = start_val;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserC$parser.done_parsing();
          return CUP$ParserC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

