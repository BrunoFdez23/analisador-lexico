
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 17 12:41:56 CST 2025
//----------------------------------------------------

package practica4;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 17 12:41:56 CST 2025
  */
public class ParserC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserC() {super();}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\004\010\000\002\005\012\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\007\003\000" +
    "\002\007\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\011\005\000\002\011\003\000\002\011" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\003\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\011\000\002\013\010" +
    "\000\002\013\010\000\002\013\010\000\002\013\011\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\013\010\000\002\013\006\000\002\013\006\000\002\013" +
    "\006\000\002\013\007\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\004\000" +
    "\002\015\003\000\002\015\003\000\002\014\003\000\002" +
    "\014\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\023\004" +
    "\000\002\024\007\000\002\024\005\000\002\024\004\000" +
    "\002\024\003\000\002\024\007\000\002\024\005\000\002" +
    "\024\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\004" +
    "\000\002\027\006\000\002\027\006\000\002\027\005\000" +
    "\002\027\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\063\004\001\002\000\004\113\242\001" +
    "\002\000\006\002\241\063\004\001\002\000\004\025\010" +
    "\001\002\000\006\002\uffff\063\uffff\001\002\000\004\027" +
    "\011\001\002\000\004\144\012\001\002\000\004\145\013" +
    "\001\002\000\004\150\014\001\002\000\024\007\031\010" +
    "\033\014\026\020\030\025\016\026\017\033\032\156\022" +
    "\157\025\001\002\000\010\003\ufff6\152\ufff6\160\ufff6\001" +
    "\002\000\010\003\ufffc\152\ufffc\160\ufffc\001\002\000\010" +
    "\003\ufffa\152\ufffa\160\ufffa\001\002\000\010\003\231\152" +
    "\227\160\232\001\002\000\036\007\031\010\033\014\026" +
    "\020\030\025\016\026\017\033\032\156\022\157\025\160" +
    "\uffee\164\uffee\165\uffee\167\uffee\170\uffee\001\002\000\036" +
    "\007\031\010\033\014\026\020\030\025\016\026\017\033" +
    "\032\156\022\157\025\160\uffea\164\uffea\165\uffea\167\uffea" +
    "\170\uffea\001\002\000\010\003\ufff7\152\ufff7\160\ufff7\001" +
    "\002\000\014\160\115\164\114\165\107\167\104\170\116" +
    "\001\002\000\036\007\031\010\033\014\026\020\030\025" +
    "\016\026\017\033\032\156\022\157\025\160\uffeb\164\uffeb" +
    "\165\uffeb\167\uffeb\170\uffeb\001\002\000\010\003\ufff8\152" +
    "\ufff8\160\ufff8\001\002\000\036\007\031\010\033\014\026" +
    "\020\030\025\016\026\017\033\032\156\022\157\025\160" +
    "\ufff0\164\ufff0\165\ufff0\167\ufff0\170\ufff0\001\002\000\010" +
    "\003\ufff9\152\ufff9\160\ufff9\001\002\000\010\003\ufff5\152" +
    "\ufff5\160\ufff5\001\002\000\010\003\ufffb\152\ufffb\160\ufffb" +
    "\001\002\000\020\003\036\007\037\014\026\020\030\025" +
    "\016\026\017\033\032\001\002\000\006\003\071\160\072" +
    "\001\002\000\006\003\061\160\062\001\002\000\036\007" +
    "\uffd2\010\uffd2\014\uffd2\020\uffd2\025\uffd2\026\uffd2\033\uffd2" +
    "\156\uffd2\157\uffd2\160\uffd2\164\uffd2\165\uffd2\167\uffd2\170" +
    "\uffd2\001\002\000\010\003\041\106\040\160\042\001\002" +
    "\000\006\003\051\160\052\001\002\000\036\007\uffd4\010" +
    "\uffd4\014\uffd4\020\uffd4\025\uffd4\026\uffd4\033\uffd4\156\uffd4" +
    "\157\uffd4\160\uffd4\164\uffd4\165\uffd4\167\uffd4\170\uffd4\001" +
    "\002\000\006\003\044\122\043\001\002\000\006\003\045" +
    "\170\046\001\002\000\036\007\uffd8\010\uffd8\014\uffd8\020" +
    "\uffd8\025\uffd8\026\uffd8\033\uffd8\156\uffd8\157\uffd8\160\uffd8" +
    "\164\uffd8\165\uffd8\167\uffd8\170\uffd8\001\002\000\036\007" +
    "\uffdc\010\uffdc\014\uffdc\020\uffdc\025\uffdc\026\uffdc\033\uffdc" +
    "\156\uffdc\157\uffdc\160\uffdc\164\uffdc\165\uffdc\167\uffdc\170" +
    "\uffdc\001\002\000\006\003\047\153\050\001\002\000\036" +
    "\007\uffe0\010\uffe0\014\uffe0\020\uffe0\025\uffe0\026\uffe0\033" +
    "\uffe0\156\uffe0\157\uffe0\160\uffe0\164\uffe0\165\uffe0\167\uffe0" +
    "\170\uffe0\001\002\000\036\007\uffe4\010\uffe4\014\uffe4\020" +
    "\uffe4\025\uffe4\026\uffe4\033\uffe4\156\uffe4\157\uffe4\160\uffe4" +
    "\164\uffe4\165\uffe4\167\uffe4\170\uffe4\001\002\000\036\007" +
    "\uffd3\010\uffd3\014\uffd3\020\uffd3\025\uffd3\026\uffd3\033\uffd3" +
    "\156\uffd3\157\uffd3\160\uffd3\164\uffd3\165\uffd3\167\uffd3\170" +
    "\uffd3\001\002\000\006\003\054\122\053\001\002\000\006" +
    "\003\055\167\056\001\002\000\036\007\uffd7\010\uffd7\014" +
    "\uffd7\020\uffd7\025\uffd7\026\uffd7\033\uffd7\156\uffd7\157\uffd7" +
    "\160\uffd7\164\uffd7\165\uffd7\167\uffd7\170\uffd7\001\002\000" +
    "\036\007\uffdb\010\uffdb\014\uffdb\020\uffdb\025\uffdb\026\uffdb" +
    "\033\uffdb\156\uffdb\157\uffdb\160\uffdb\164\uffdb\165\uffdb\167" +
    "\uffdb\170\uffdb\001\002\000\006\003\057\153\060\001\002" +
    "\000\036\007\uffdf\010\uffdf\014\uffdf\020\uffdf\025\uffdf\026" +
    "\uffdf\033\uffdf\156\uffdf\157\uffdf\160\uffdf\164\uffdf\165\uffdf" +
    "\167\uffdf\170\uffdf\001\002\000\036\007\uffe3\010\uffe3\014" +
    "\uffe3\020\uffe3\025\uffe3\026\uffe3\033\uffe3\156\uffe3\157\uffe3" +
    "\160\uffe3\164\uffe3\165\uffe3\167\uffe3\170\uffe3\001\002\000" +
    "\036\007\uffd6\010\uffd6\014\uffd6\020\uffd6\025\uffd6\026\uffd6" +
    "\033\uffd6\156\uffd6\157\uffd6\160\uffd6\164\uffd6\165\uffd6\167" +
    "\uffd6\170\uffd6\001\002\000\006\003\064\122\063\001\002" +
    "\000\006\003\065\164\066\001\002\000\036\007\uffda\010" +
    "\uffda\014\uffda\020\uffda\025\uffda\026\uffda\033\uffda\156\uffda" +
    "\157\uffda\160\uffda\164\uffda\165\uffda\167\uffda\170\uffda\001" +
    "\002\000\036\007\uffde\010\uffde\014\uffde\020\uffde\025\uffde" +
    "\026\uffde\033\uffde\156\uffde\157\uffde\160\uffde\164\uffde\165" +
    "\uffde\167\uffde\170\uffde\001\002\000\006\003\067\153\070" +
    "\001\002\000\036\007\uffe2\010\uffe2\014\uffe2\020\uffe2\025" +
    "\uffe2\026\uffe2\033\uffe2\156\uffe2\157\uffe2\160\uffe2\164\uffe2" +
    "\165\uffe2\167\uffe2\170\uffe2\001\002\000\036\007\uffe6\010" +
    "\uffe6\014\uffe6\020\uffe6\025\uffe6\026\uffe6\033\uffe6\156\uffe6" +
    "\157\uffe6\160\uffe6\164\uffe6\165\uffe6\167\uffe6\170\uffe6\001" +
    "\002\000\036\007\uffd5\010\uffd5\014\uffd5\020\uffd5\025\uffd5" +
    "\026\uffd5\033\uffd5\156\uffd5\157\uffd5\160\uffd5\164\uffd5\165" +
    "\uffd5\167\uffd5\170\uffd5\001\002\000\006\003\074\122\073" +
    "\001\002\000\006\003\075\165\076\001\002\000\036\007" +
    "\uffd9\010\uffd9\014\uffd9\020\uffd9\025\uffd9\026\uffd9\033\uffd9" +
    "\156\uffd9\157\uffd9\160\uffd9\164\uffd9\165\uffd9\167\uffd9\170" +
    "\uffd9\001\002\000\036\007\uffdd\010\uffdd\014\uffdd\020\uffdd" +
    "\025\uffdd\026\uffdd\033\uffdd\156\uffdd\157\uffdd\160\uffdd\164" +
    "\uffdd\165\uffdd\167\uffdd\170\uffdd\001\002\000\006\003\077" +
    "\153\100\001\002\000\036\007\uffe1\010\uffe1\014\uffe1\020" +
    "\uffe1\025\uffe1\026\uffe1\033\uffe1\156\uffe1\157\uffe1\160\uffe1" +
    "\164\uffe1\165\uffe1\167\uffe1\170\uffe1\001\002\000\036\007" +
    "\uffe5\010\uffe5\014\uffe5\020\uffe5\025\uffe5\026\uffe5\033\uffe5" +
    "\156\uffe5\157\uffe5\160\uffe5\164\uffe5\165\uffe5\167\uffe5\170" +
    "\uffe5\001\002\000\014\160\ufff1\164\ufff1\165\ufff1\167\ufff1" +
    "\170\ufff1\001\002\000\014\160\uffed\164\uffed\165\uffed\167" +
    "\uffed\170\uffed\001\002\000\014\003\214\117\216\120\220" +
    "\121\215\153\221\001\002\000\020\003\uffd1\111\uffd1\112" +
    "\uffd1\117\uffd1\120\uffd1\121\uffd1\153\uffd1\001\002\000\006" +
    "\003\212\153\213\001\002\000\016\111\121\112\127\113" +
    "\124\114\122\115\130\116\123\001\002\000\054\003\uffce" +
    "\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112" +
    "\uffce\113\uffce\114\uffce\115\uffce\116\uffce\117\uffce\120\uffce" +
    "\121\uffce\144\uffce\145\uffce\153\uffce\160\uffce\164\uffce\165" +
    "\uffce\001\002\000\016\151\uff95\160\115\164\114\165\107" +
    "\167\104\170\116\001\002\000\006\111\121\112\127\001" +
    "\002\000\016\151\uff96\160\115\164\114\165\107\167\104" +
    "\170\116\001\002\000\004\151\173\001\002\000\054\003" +
    "\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf" +
    "\112\uffcf\113\uffcf\114\uffcf\115\uffcf\116\uffcf\117\uffcf\120" +
    "\uffcf\121\uffcf\144\uffcf\145\uffcf\153\uffcf\160\uffcf\164\uffcf" +
    "\165\uffcf\001\002\000\022\003\125\111\121\112\127\113" +
    "\124\114\122\115\130\116\123\122\126\001\002\000\020" +
    "\003\uffd0\111\uffd0\112\uffd0\117\uffd0\120\uffd0\121\uffd0\153" +
    "\uffd0\001\002\000\012\003\171\160\172\164\114\165\107" +
    "\001\002\000\016\003\166\160\167\164\114\165\107\167" +
    "\104\170\116\001\002\000\016\003\uffc8\160\uffc8\164\uffc8" +
    "\165\uffc8\167\uffc8\170\uffc8\001\002\000\012\003\uffc6\160" +
    "\uffc6\164\uffc6\165\uffc6\001\002\000\012\003\uffc4\160\uffc4" +
    "\164\uffc4\165\uffc4\001\002\000\012\003\uffc5\160\uffc5\164" +
    "\uffc5\165\uffc5\001\002\000\016\151\uff9d\160\uff9d\164\uff9d" +
    "\165\uff9d\167\uff9d\170\uff9d\001\002\000\026\003\141\104" +
    "\133\105\144\106\135\107\143\110\142\144\134\160\145" +
    "\164\114\165\107\001\002\000\016\003\uffc7\160\uffc7\164" +
    "\uffc7\165\uffc7\167\uffc7\170\uffc7\001\002\000\012\003\uffc3" +
    "\160\uffc3\164\uffc3\165\uffc3\001\002\000\004\003\153\001" +
    "\002\000\032\003\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc" +
    "\110\uffbc\144\uffbc\145\uffbc\153\uffbc\160\uffbc\164\uffbc\165" +
    "\uffbc\001\002\000\026\003\uffcd\104\uffcd\105\uffcd\106\uffcd" +
    "\107\uffcd\110\uffcd\144\uffcd\160\uffcd\164\uffcd\165\uffcd\001" +
    "\002\000\024\003\155\104\133\105\144\106\135\107\143" +
    "\110\142\160\145\164\114\165\107\001\002\000\026\003" +
    "\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\144\uffcb" +
    "\160\uffcb\164\uffcb\165\uffcb\001\002\000\030\003\uffb7\104" +
    "\133\105\144\106\135\107\143\110\142\144\134\153\uffb7" +
    "\160\145\164\114\165\107\001\002\000\006\003\146\153" +
    "\147\001\002\000\032\003\uffbf\104\uffbf\105\uffbf\106\uffbf" +
    "\107\uffbf\110\uffbf\144\uffbf\145\uffbf\153\uffbf\160\uffbf\164" +
    "\uffbf\165\uffbf\001\002\000\016\151\uff9e\160\uff9e\164\uff9e" +
    "\165\uff9e\167\uff9e\170\uff9e\001\002\000\026\003\uffc9\104" +
    "\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\144\uffc9\160\uffc9" +
    "\164\uffc9\165\uffc9\001\002\000\026\003\uffca\104\uffca\105" +
    "\uffca\106\uffca\107\uffca\110\uffca\144\uffca\160\uffca\164\uffca" +
    "\165\uffca\001\002\000\026\003\uffcc\104\uffcc\105\uffcc\106" +
    "\uffcc\107\uffcc\110\uffcc\144\uffcc\160\uffcc\164\uffcc\165\uffcc" +
    "\001\002\000\032\003\uffbe\104\uffbe\105\uffbe\106\uffbe\107" +
    "\uffbe\110\uffbe\144\uffbe\145\uffbe\153\uffbe\160\uffbe\164\uffbe" +
    "\165\uffbe\001\002\000\016\151\uff9f\160\uff9f\164\uff9f\165" +
    "\uff9f\167\uff9f\170\uff9f\001\002\000\016\151\uffa0\160\uffa0" +
    "\164\uffa0\165\uffa0\167\uffa0\170\uffa0\001\002\000\012\003" +
    "\153\160\145\164\114\165\107\001\002\000\006\003\uffb8" +
    "\153\uffb8\001\002\000\032\003\uffbd\104\uffbd\105\uffbd\106" +
    "\uffbd\107\uffbd\110\uffbd\144\uffbd\145\uffbd\153\uffbd\160\uffbd" +
    "\164\uffbd\165\uffbd\001\002\000\032\003\uffbb\104\uffbb\105" +
    "\uffbb\106\uffbb\107\uffbb\110\uffbb\144\uffbb\145\uffbb\153\uffbb" +
    "\160\uffbb\164\uffbb\165\uffbb\001\002\000\020\003\156\104" +
    "\133\105\144\106\135\107\143\110\142\145\160\001\002" +
    "\000\006\003\uffb4\153\uffb4\001\002\000\006\003\uffb5\153" +
    "\uffb5\001\002\000\010\160\145\164\114\165\107\001\002" +
    "\000\020\003\uffb9\104\133\105\144\106\135\107\143\110" +
    "\142\153\uffb9\001\002\000\026\003\163\104\133\105\144" +
    "\106\135\107\143\110\142\144\134\160\145\164\114\165" +
    "\107\001\002\000\006\003\uffba\153\uffba\001\002\000\006" +
    "\003\uffb6\153\uffb6\001\002\000\014\003\uffae\117\uffae\120" +
    "\uffae\121\uffae\153\uffae\001\002\000\014\003\uffad\117\uffad" +
    "\120\uffad\121\uffad\153\uffad\001\002\000\014\003\uffa5\117" +
    "\uffa5\120\uffa5\121\uffa5\153\uffa5\001\002\000\014\003\uffaf" +
    "\117\uffaf\120\uffaf\121\uffaf\153\uffaf\001\002\000\014\003" +
    "\uffa9\117\uffa9\120\uffa9\121\uffa9\153\uffa9\001\002\000\014" +
    "\003\uffa4\117\uffa4\120\uffa4\121\uffa4\153\uffa4\001\002\000" +
    "\014\003\uffaa\117\uffaa\120\uffaa\121\uffaa\153\uffaa\001\002" +
    "\000\006\002\ufffd\063\ufffd\001\002\000\004\151\uff98\001" +
    "\002\000\012\003\177\160\200\167\104\170\116\001\002" +
    "\000\014\003\uffb1\117\uffb1\120\uffb1\121\uffb1\153\uffb1\001" +
    "\002\000\014\003\uffa6\117\uffa6\120\uffa6\121\uffa6\153\uffa6" +
    "\001\002\000\014\003\uffb0\117\uffb0\120\uffb0\121\uffb0\153" +
    "\uffb0\001\002\000\004\151\uff97\001\002\000\012\003\210" +
    "\160\211\164\114\165\107\001\002\000\012\003\205\160" +
    "\206\164\114\165\107\001\002\000\014\003\uffb3\117\uffb3" +
    "\120\uffb3\121\uffb3\153\uffb3\001\002\000\014\003\uffa8\117" +
    "\uffa8\120\uffa8\121\uffa8\153\uffa8\001\002\000\014\003\uffb2" +
    "\117\uffb2\120\uffb2\121\uffb2\153\uffb2\001\002\000\014\003" +
    "\uffac\117\uffac\120\uffac\121\uffac\153\uffac\001\002\000\014" +
    "\003\uffa7\117\uffa7\120\uffa7\121\uffa7\153\uffa7\001\002\000" +
    "\014\003\uffab\117\uffab\120\uffab\121\uffab\153\uffab\001\002" +
    "\000\016\151\uff99\160\uff99\164\uff99\165\uff99\167\uff99\170" +
    "\uff99\001\002\000\016\151\uff9b\160\uff9b\164\uff9b\165\uff9b" +
    "\167\uff9b\170\uff9b\001\002\000\022\003\uffa1\151\uff9a\153" +
    "\uffa1\160\uff9a\164\uff9a\165\uff9a\167\uff9a\170\uff9a\001\002" +
    "\000\016\003\uffc0\160\uffc0\164\uffc0\165\uffc0\167\uffc0\170" +
    "\uffc0\001\002\000\016\003\uffc2\160\uffc2\164\uffc2\165\uffc2" +
    "\167\uffc2\170\uffc2\001\002\000\016\003\223\160\224\164" +
    "\114\165\107\167\104\170\116\001\002\000\016\003\uffc1" +
    "\160\uffc1\164\uffc1\165\uffc1\167\uffc1\170\uffc1\001\002\000" +
    "\016\151\uff9c\160\uff9c\164\uff9c\165\uff9c\167\uff9c\170\uff9c" +
    "\001\002\000\006\003\uffa3\153\uffa3\001\002\000\006\003" +
    "\uffa2\153\uffa2\001\002\000\016\111\121\112\127\113\124" +
    "\114\122\115\130\116\123\001\002\000\014\160\uffec\164" +
    "\uffec\165\uffec\167\uffec\170\uffec\001\002\000\014\160\uffef" +
    "\164\uffef\165\uffef\167\uffef\170\uffef\001\002\000\004\003" +
    "\237\001\002\000\010\003\234\152\233\153\235\001\002" +
    "\000\036\007\uffe7\010\uffe7\014\uffe7\020\uffe7\025\uffe7\026" +
    "\uffe7\033\uffe7\156\uffe7\157\uffe7\160\uffe7\164\uffe7\165\uffe7" +
    "\167\uffe7\170\uffe7\001\002\000\010\003\ufff3\152\ufff3\153" +
    "\ufff3\001\002\000\004\160\236\001\002\000\036\007\uffe8" +
    "\010\uffe8\014\uffe8\020\uffe8\025\uffe8\026\uffe8\033\uffe8\156" +
    "\uffe8\157\uffe8\160\uffe8\164\uffe8\165\uffe8\167\uffe8\170\uffe8" +
    "\001\002\000\036\007\uffe9\010\uffe9\014\uffe9\020\uffe9\025" +
    "\uffe9\026\uffe9\033\uffe9\156\uffe9\157\uffe9\160\uffe9\164\uffe9" +
    "\165\uffe9\167\uffe9\170\uffe9\001\002\000\010\003\ufff4\152" +
    "\ufff4\153\ufff4\001\002\000\010\003\ufff2\152\ufff2\153\ufff2" +
    "\001\002\000\006\002\000\063\000\001\002\000\004\002" +
    "\001\001\002\000\004\160\243\001\002\000\004\142\244" +
    "\001\002\000\004\160\245\001\002\000\004\114\246\001" +
    "\002\000\010\002\ufffe\025\ufffe\063\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\004\004\237\001\001\000\004\005\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\023\006\017" +
    "\007\014\010\022\012\026\013\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\227" +
    "\001\001\000\016\003\225\006\017\007\014\010\022\012" +
    "\026\013\020\001\001\000\016\003\224\006\017\007\014" +
    "\010\022\012\026\013\020\001\001\000\002\001\001\000" +
    "\020\014\105\015\110\025\102\026\104\027\111\030\107" +
    "\031\112\001\001\000\016\003\101\006\017\007\014\010" +
    "\022\012\026\013\020\001\001\000\002\001\001\000\016" +
    "\003\100\006\017\007\014\010\022\012\026\013\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\033\010\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\202" +
    "\020\201\001\001\000\002\001\001\000\020\014\105\015" +
    "\110\025\102\026\104\027\111\030\107\031\200\001\001" +
    "\000\004\017\174\001\001\000\020\014\105\015\110\025" +
    "\102\026\104\027\111\030\107\031\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\117\020\116\001" +
    "\001\000\002\001\001\000\004\014\167\001\001\000\006" +
    "\014\163\015\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\137\016\130\022\131\023\135\024\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\137\016" +
    "\130\022\131\023\153\001\001\000\002\001\001\000\014" +
    "\014\137\016\147\022\131\023\135\024\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\137" +
    "\022\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\137\022\151\001\001\000" +
    "\004\016\160\001\001\000\014\014\137\016\130\022\131" +
    "\023\135\024\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\206\001\001" +
    "\000\004\014\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\105\015\110\025\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\117\020\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void syntax_error(Symbol s){
        System.err.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserC$actions {
  private final ParserC parser;

  /** Constructor */
  CUP$ParserC$actions(ParserC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserC$do_action(
    int                        CUP$ParserC$act_num,
    java_cup.runtime.lr_parser CUP$ParserC$parser,
    java.util.Stack            CUP$ParserC$stack,
    int                        CUP$ParserC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserC$result;

      /* select the action based on the action number */
      switch (CUP$ParserC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaciones ::= operaciones_validas2 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaciones ::= operaciones_validas1 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaciones ::= operaciones_validas2 operaciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaciones ::= operaciones_validas1 operaciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaciones_validas2 ::= operacion_logica error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones_validas2 ::= operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones_validas2 ::= operacion_logica PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-OV-2] Esta es una operacion logica"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones_validas2 ::= operacion_relacional PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-OV-2] Esta es una operacion relacional"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones_validas1 ::= IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones_validas1 ::= IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones_validas1 ::= IDENTIFICADOR ASIGNACION operacion_aritmetica_compuesta error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones_validas1 ::= IDENTIFICADOR ASIGNACION operacion_aritmetica_compuesta PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-OV-1] Esta es una operacion aritmetica"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operacion_logica ::= operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operacion_logica ::= operacion_relacional operadores_logicos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operacion_logica ::= operacion_relacional operadores_logicos operacion_relacional 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER operadores_aritmeticos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operacion_aritmetica_compuesta ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operacion_aritmetica_compuesta ::= operacion_aritmetica operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER operadores_aritmeticos operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacion_aritmetica ::= operadores_aritmeticos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacion_aritmetica ::= operacion_aritmetica_simple 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacion_aritmetica ::= operacion_aritmetica operadores_aritmeticos operacion_aritmetica_simple 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacion_aritmetica_simple ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacion_aritmetica_simple ::= valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadores_logicos ::= NOT 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadores_relacionales2 ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operadores_relacionales2 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operadores_relacionales2 ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadores_relacionales2 ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadores_relacionales1 ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales1",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadores_relacionales1 ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales1",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadores_aritmeticos ::= MODULO 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadores_aritmeticos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operadores_aritmeticos ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operadores_aritmeticos ::= RESTA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operadores_aritmeticos ::= SUMA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valores_validos_numero ::= NUMFLOTANTEDEC 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_numero",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valores_validos_numero ::= NUMDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_numero",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valores_validos_texto ::= CADENACHAR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_texto",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valores_validos_texto ::= CADENATEXTO 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_texto",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_constante ::= CONST error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_constante ::= CONST CHAR MULTIPLICACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_constante ::= CONST CHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_constante ::= CONST lista_tipo_flotante error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_constante ::= CONST lista_tipo_entero error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_constante ::= CONST CHAR IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char*"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante flotante"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante entero"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_variable ::= lista_tipo_dato error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_variable ::= lista_tipo_dato lista_identificador error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_variable ::= lista_tipo_dato lista_identificador PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-TD] Esta es una declaración de variables"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaraciones ::= COMENTARIOUNILINEA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaraciones ::= COMENTARIOMULTILINEA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaraciones ::= COMENTARIOUNILINEA declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaraciones ::= COMENTARIOMULTILINEA declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaraciones ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaraciones ::= declaracion_constante declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaraciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraciones ::= declaracion_variable declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_identificador ::= COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_identificador ::= lista_identificador COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		/*     System.out.println("[AS-DEC-TD] Esta es un tipo de dato char");     */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_tipo_dato ::= lista_tipo_flotante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_tipo_dato ::= lista_tipo_entero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_tipo_flotante ::= DOUBLE 
            {
              Object RESULT =null;
		/*   System.out.println("[AS-DEC-TD] Esta es un tipo de dato double");   */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_tipo_flotante ::= FLOAT 
            {
              Object RESULT =null;
		/*    System.out.println("[AS-DEC-TD] Esta es un tipo de dato float");    */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_tipo_entero ::= LONG 
            {
              Object RESULT =null;
		/*     System.out.println("[AS-DEC-TD] Esta es un tipo de dato long");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_tipo_entero ::= SHORT 
            {
              Object RESULT =null;
		/*    System.out.println("[AS-DEC-TD] Esta es un tipo de dato short");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_tipo_entero ::= INT 
            {
              Object RESULT =null;
		/*      System.out.println("[AS-DEC-TD] Esta es un tipo de dato int");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcion_main ::= INT MAIN PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ declaraciones operaciones LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-MAIN] Esta es la funcion main"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_include ::= DIRECTIVA_INCLUDE MENOR_QUE IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR_QUE 
            {
              Object RESULT =null;
		  System.out.println("[AS-INCLUDE] Esta es una directiva #include");  
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_include",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= dec_include funcion_main 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= programa dec_include 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		RESULT = start_val;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserC$parser.done_parsing();
          return CUP$ParserC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

