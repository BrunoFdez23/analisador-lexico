
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 17 21:54:45 CST 2025
//----------------------------------------------------

package practica4;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 17 21:54:45 CST 2025
  */
public class ParserC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserC() {super();}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\004\010\000\002\005\011\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\007\003\000" +
    "\002\007\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\011\005\000\002\011\003\000\002\011" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\004\000\002\013\010\000\002\013\010\000\002" +
    "\013\010\000\002\013\011\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\011\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\010\000" +
    "\002\013\006\000\002\013\006\000\002\013\006\000\002" +
    "\013\007\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\004\000\002\015\003" +
    "\000\002\015\003\000\002\014\003\000\002\014\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\004\000\002\024" +
    "\007\000\002\024\005\000\002\024\004\000\002\024\003" +
    "\000\002\024\007\000\002\024\005\000\002\024\004\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\026\005\000\002\026\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\004\000\002\030\003\000\002\030\003" +
    "\000\002\031\004\000\002\031\004\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\011\000\002\033\015\000\002\033" +
    "\015\000\002\033\014\000\002\033\013\000\002\033\011" +
    "\000\002\033\010\000\002\033\007\000\002\033\006\000" +
    "\002\033\005\000\002\033\004\000\002\034\011\000\002" +
    "\034\011\000\002\034\010\000\002\034\007\000\002\034" +
    "\006\000\002\034\005\000\002\034\004\000\002\035\015" +
    "\000\002\035\015\000\002\035\014\000\002\035\013\000" +
    "\002\035\012\000\002\035\011\000\002\035\010\000\002" +
    "\035\007\000\002\035\006\000\002\035\005\000\002\035" +
    "\004\000\002\036\004\000\002\036\003\000\002\036\004" +
    "\000\002\036\004\000\002\036\003\000\002\036\003\000" +
    "\002\037\004\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\004\000\002\040" +
    "\004\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\063\004\001\002\000\004\113\331\001" +
    "\002\000\006\002\330\063\004\001\002\000\004\025\010" +
    "\001\002\000\006\002\uffff\063\uffff\001\002\000\004\027" +
    "\011\001\002\000\004\144\012\001\002\000\004\145\013" +
    "\001\002\000\004\150\014\001\002\000\044\007\024\010" +
    "\042\014\056\020\036\021\052\023\031\025\020\026\015" +
    "\033\044\050\025\156\023\157\022\160\045\164\055\165" +
    "\054\167\033\170\032\001\002\000\010\003\ufffa\152\ufffa" +
    "\160\ufffa\001\002\000\050\003\uff75\007\uff75\010\uff75\014" +
    "\uff75\020\uff75\021\uff75\023\uff75\025\uff75\026\uff75\033\uff75" +
    "\050\uff75\151\uff75\156\uff75\157\uff75\160\uff75\164\uff75\165" +
    "\uff75\167\uff75\170\uff75\001\002\000\010\003\ufff6\152\ufff6" +
    "\160\ufff6\001\002\000\010\003\ufffc\152\ufffc\160\ufffc\001" +
    "\002\000\006\111\132\112\131\001\002\000\050\003\uff78" +
    "\007\024\010\042\014\056\020\036\021\052\023\031\025" +
    "\020\026\015\033\044\050\025\151\uff78\156\023\157\022" +
    "\160\045\164\055\165\054\167\033\170\032\001\002\000" +
    "\050\003\uff77\007\024\010\042\014\056\020\036\021\052" +
    "\023\031\025\020\026\015\033\044\050\025\151\uff77\156" +
    "\023\157\022\160\045\164\055\165\054\167\033\170\032" +
    "\001\002\000\010\003\ufff5\152\ufff5\160\ufff5\001\002\000" +
    "\006\003\305\144\306\001\002\000\050\003\uff9c\007\uff9c" +
    "\010\uff9c\014\uff9c\020\uff9c\021\uff9c\023\uff9c\025\uff9c\026" +
    "\uff9c\033\uff9c\050\uff9c\151\uff9c\156\uff9c\157\uff9c\160\uff9c" +
    "\164\uff9c\165\uff9c\167\uff9c\170\uff9c\001\002\000\004\151" +
    "\304\001\002\000\010\003\275\152\273\160\276\001\002" +
    "\000\006\003\250\144\251\001\002\000\066\003\uffd4\007" +
    "\uffd4\010\uffd4\014\uffd4\020\uffd4\021\uffd4\023\uffd4\025\uffd4" +
    "\026\uffd4\033\uffd4\050\uffd4\111\uffd4\112\uffd4\117\uffd4\120" +
    "\uffd4\121\uffd4\145\uffd4\151\uffd4\153\uffd4\156\uffd4\157\uffd4" +
    "\160\uffd4\164\uffd4\165\uffd4\167\uffd4\170\uffd4\001\002\000" +
    "\066\003\uffd5\007\uffd5\010\uffd5\014\uffd5\020\uffd5\021\uffd5" +
    "\023\uffd5\025\uffd5\026\uffd5\033\uffd5\050\uffd5\111\uffd5\112" +
    "\uffd5\117\uffd5\120\uffd5\121\uffd5\145\uffd5\151\uffd5\153\uffd5" +
    "\156\uffd5\157\uffd5\160\uffd5\164\uffd5\165\uffd5\167\uffd5\170" +
    "\uffd5\001\002\000\056\003\uffa2\007\uffa2\010\uffa2\014\uffa2" +
    "\020\uffa2\021\uffa2\023\uffa2\025\uffa2\026\uffa2\033\uffa2\050" +
    "\uffa2\117\243\120\245\121\242\151\uffa2\156\uffa2\157\uffa2" +
    "\160\uffa2\164\uffa2\165\uffa2\167\uffa2\170\uffa2\001\002\000" +
    "\050\003\uff7b\007\024\010\042\014\056\020\036\021\052" +
    "\023\031\025\020\026\015\033\044\050\025\151\uff7b\156" +
    "\023\157\022\160\045\164\055\165\054\167\033\170\032" +
    "\001\002\000\010\003\ufff9\152\ufff9\160\ufff9\001\002\000" +
    "\050\003\uff9a\007\uff9a\010\uff9a\014\uff9a\020\uff9a\021\uff9a" +
    "\023\uff9a\025\uff9a\026\uff9a\033\uff9a\050\uff9a\151\uff9a\156" +
    "\uff9a\157\uff9a\160\uff9a\164\uff9a\165\uff9a\167\uff9a\170\uff9a" +
    "\001\002\000\016\111\132\112\131\113\130\114\127\115" +
    "\133\116\135\001\002\000\050\003\uffa1\007\uffa1\010\uffa1" +
    "\014\uffa1\020\uffa1\021\uffa1\023\uffa1\025\uffa1\026\uffa1\033" +
    "\uffa1\050\uffa1\151\uffa1\156\uffa1\157\uffa1\160\uffa1\164\uffa1" +
    "\165\uffa1\167\uffa1\170\uffa1\001\002\000\020\003\166\007" +
    "\167\014\056\020\036\025\020\026\015\033\044\001\002" +
    "\000\050\003\uff9b\007\uff9b\010\uff9b\014\uff9b\020\uff9b\021" +
    "\uff9b\023\uff9b\025\uff9b\026\uff9b\033\uff9b\050\uff9b\151\uff9b" +
    "\156\uff9b\157\uff9b\160\uff9b\164\uff9b\165\uff9b\167\uff9b\170" +
    "\uff9b\001\002\000\010\003\ufffb\152\ufffb\160\ufffb\001\002" +
    "\000\022\003\070\111\132\112\131\113\130\114\127\115" +
    "\133\116\135\122\067\001\002\000\050\003\uff74\007\uff74" +
    "\010\uff74\014\uff74\020\uff74\021\uff74\023\uff74\025\uff74\026" +
    "\uff74\033\uff74\050\uff74\151\uff74\156\uff74\157\uff74\160\uff74" +
    "\164\uff74\165\uff74\167\uff74\170\uff74\001\002\000\050\003" +
    "\uff72\007\uff72\010\uff72\014\uff72\020\uff72\021\uff72\023\uff72" +
    "\025\uff72\026\uff72\033\uff72\050\uff72\151\uff72\156\uff72\157" +
    "\uff72\160\uff72\164\uff72\165\uff72\167\uff72\170\uff72\001\002" +
    "\000\050\003\uff73\007\uff73\010\uff73\014\uff73\020\uff73\021" +
    "\uff73\023\uff73\025\uff73\026\uff73\033\uff73\050\uff73\151\uff73" +
    "\156\uff73\157\uff73\160\uff73\164\uff73\165\uff73\167\uff73\170" +
    "\uff73\001\002\000\006\003\162\153\163\001\002\000\006" +
    "\003\057\144\060\001\002\000\010\003\ufff7\152\ufff7\160" +
    "\ufff7\001\002\000\112\003\uffd2\007\uffd2\010\uffd2\014\uffd2" +
    "\020\uffd2\021\uffd2\023\uffd2\025\uffd2\026\uffd2\033\uffd2\050" +
    "\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2" +
    "\112\uffd2\113\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\120" +
    "\uffd2\121\uffd2\144\uffd2\145\uffd2\151\uffd2\153\uffd2\156\uffd2" +
    "\157\uffd2\160\uffd2\164\uffd2\165\uffd2\167\uffd2\170\uffd2\001" +
    "\002\000\112\003\uffd3\007\uffd3\010\uffd3\014\uffd3\020\uffd3" +
    "\021\uffd3\023\uffd3\025\uffd3\026\uffd3\033\uffd3\050\uffd3\104" +
    "\uffd3\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3" +
    "\113\uffd3\114\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\121" +
    "\uffd3\144\uffd3\145\uffd3\151\uffd3\153\uffd3\156\uffd3\157\uffd3" +
    "\160\uffd3\164\uffd3\165\uffd3\167\uffd3\170\uffd3\001\002\000" +
    "\010\003\ufff8\152\ufff8\160\ufff8\001\002\000\050\003\uff7d" +
    "\007\uff7d\010\uff7d\014\uff7d\020\uff7d\021\uff7d\023\uff7d\025" +
    "\uff7d\026\uff7d\033\uff7d\050\uff7d\151\uff7d\156\uff7d\157\uff7d" +
    "\160\uff7d\164\uff7d\165\uff7d\167\uff7d\170\uff7d\001\002\000" +
    "\012\003\062\025\020\026\015\033\044\001\002\000\006" +
    "\003\122\153\123\001\002\000\050\003\uff7e\007\uff7e\010" +
    "\uff7e\014\uff7e\020\uff7e\021\uff7e\023\uff7e\025\uff7e\026\uff7e" +
    "\033\uff7e\050\uff7e\151\uff7e\156\uff7e\157\uff7e\160\uff7e\164" +
    "\uff7e\165\uff7e\167\uff7e\170\uff7e\001\002\000\006\003\064" +
    "\160\065\001\002\000\006\003\uff6f\153\uff6f\001\002\000" +
    "\006\003\070\122\067\001\002\000\006\003\uff70\153\uff70" +
    "\001\002\000\026\003\101\104\073\105\104\106\075\107" +
    "\103\110\102\144\074\160\105\164\055\165\054\001\002" +
    "\000\010\003\uffa3\145\uffa3\153\uffa3\001\002\000\004\003" +
    "\111\001\002\000\032\003\uffc0\104\uffc0\105\uffc0\106\uffc0" +
    "\107\uffc0\110\uffc0\144\uffc0\145\uffc0\153\uffc0\160\uffc0\164" +
    "\uffc0\165\uffc0\001\002\000\026\003\uffd1\104\uffd1\105\uffd1" +
    "\106\uffd1\107\uffd1\110\uffd1\144\uffd1\160\uffd1\164\uffd1\165" +
    "\uffd1\001\002\000\024\003\113\104\073\105\104\106\075" +
    "\107\103\110\102\160\105\164\055\165\054\001\002\000" +
    "\026\003\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf" +
    "\144\uffcf\160\uffcf\164\uffcf\165\uffcf\001\002\000\032\003" +
    "\uffbb\104\073\105\104\106\075\107\103\110\102\144\074" +
    "\145\uffbb\153\uffbb\160\105\164\055\165\054\001\002\000" +
    "\010\003\uffa5\145\uffa5\153\uffa5\001\002\000\032\003\uffc3" +
    "\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\144\uffc3\145" +
    "\uffc3\153\uffc3\160\uffc3\164\uffc3\165\uffc3\001\002\000\010" +
    "\003\uffa4\145\uffa4\153\uffa4\001\002\000\026\003\uffcd\104" +
    "\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\144\uffcd\160\uffcd" +
    "\164\uffcd\165\uffcd\001\002\000\026\003\uffce\104\uffce\105" +
    "\uffce\106\uffce\107\uffce\110\uffce\144\uffce\160\uffce\164\uffce" +
    "\165\uffce\001\002\000\026\003\uffd0\104\uffd0\105\uffd0\106" +
    "\uffd0\107\uffd0\110\uffd0\144\uffd0\160\uffd0\164\uffd0\165\uffd0" +
    "\001\002\000\032\003\uffc2\104\uffc2\105\uffc2\106\uffc2\107" +
    "\uffc2\110\uffc2\144\uffc2\145\uffc2\153\uffc2\160\uffc2\164\uffc2" +
    "\165\uffc2\001\002\000\012\003\111\160\105\164\055\165" +
    "\054\001\002\000\010\003\uffbc\145\uffbc\153\uffbc\001\002" +
    "\000\032\003\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110" +
    "\uffc1\144\uffc1\145\uffc1\153\uffc1\160\uffc1\164\uffc1\165\uffc1" +
    "\001\002\000\032\003\uffbf\104\uffbf\105\uffbf\106\uffbf\107" +
    "\uffbf\110\uffbf\144\uffbf\145\uffbf\153\uffbf\160\uffbf\164\uffbf" +
    "\165\uffbf\001\002\000\020\003\114\104\073\105\104\106" +
    "\075\107\103\110\102\145\116\001\002\000\010\003\uffb8" +
    "\145\uffb8\153\uffb8\001\002\000\010\003\uffb9\145\uffb9\153" +
    "\uffb9\001\002\000\010\160\105\164\055\165\054\001\002" +
    "\000\022\003\uffbd\104\073\105\104\106\075\107\103\110" +
    "\102\145\uffbd\153\uffbd\001\002\000\026\003\121\104\073" +
    "\105\104\106\075\107\103\110\102\144\074\160\105\164" +
    "\055\165\054\001\002\000\010\003\uffbe\145\uffbe\153\uffbe" +
    "\001\002\000\010\003\uffba\145\uffba\153\uffba\001\002\000" +
    "\050\003\uff7f\007\uff7f\010\uff7f\014\uff7f\020\uff7f\021\uff7f" +
    "\023\uff7f\025\uff7f\026\uff7f\033\uff7f\050\uff7f\151\uff7f\156" +
    "\uff7f\157\uff7f\160\uff7f\164\uff7f\165\uff7f\167\uff7f\170\uff7f" +
    "\001\002\000\016\003\125\160\126\164\055\165\054\167" +
    "\033\170\032\001\002\000\006\003\146\153\147\001\002" +
    "\000\050\003\uff80\007\uff80\010\uff80\014\uff80\020\uff80\021" +
    "\uff80\023\uff80\025\uff80\026\uff80\033\uff80\050\uff80\151\uff80" +
    "\156\uff80\157\uff80\160\uff80\164\uff80\165\uff80\167\uff80\170" +
    "\uff80\001\002\000\016\111\132\112\131\113\130\114\127" +
    "\115\133\116\135\001\002\000\012\003\uffca\160\uffca\164" +
    "\uffca\165\uffca\001\002\000\012\003\uffc9\160\uffc9\164\uffc9" +
    "\165\uffc9\001\002\000\016\003\uffcb\160\uffcb\164\uffcb\165" +
    "\uffcb\167\uffcb\170\uffcb\001\002\000\016\003\uffcc\160\uffcc" +
    "\164\uffcc\165\uffcc\167\uffcc\170\uffcc\001\002\000\012\003" +
    "\uffc7\160\uffc7\164\uffc7\165\uffc7\001\002\000\012\003\144" +
    "\160\145\164\055\165\054\001\002\000\012\003\uffc8\160" +
    "\uffc8\164\uffc8\165\uffc8\001\002\000\016\003\141\160\142" +
    "\164\055\165\054\167\033\170\032\001\002\000\062\003" +
    "\uffb2\007\uffb2\010\uffb2\014\uffb2\020\uffb2\021\uffb2\023\uffb2" +
    "\025\uffb2\026\uffb2\033\uffb2\050\uffb2\117\uffb2\120\uffb2\121" +
    "\uffb2\145\uffb2\151\uffb2\153\uffb2\156\uffb2\157\uffb2\160\uffb2" +
    "\164\uffb2\165\uffb2\167\uffb2\170\uffb2\001\002\000\062\003" +
    "\uffb1\007\uffb1\010\uffb1\014\uffb1\020\uffb1\021\uffb1\023\uffb1" +
    "\025\uffb1\026\uffb1\033\uffb1\050\uffb1\117\uffb1\120\uffb1\121" +
    "\uffb1\145\uffb1\151\uffb1\153\uffb1\156\uffb1\157\uffb1\160\uffb1" +
    "\164\uffb1\165\uffb1\167\uffb1\170\uffb1\001\002\000\062\003" +
    "\uffa9\007\uffa9\010\uffa9\014\uffa9\020\uffa9\021\uffa9\023\uffa9" +
    "\025\uffa9\026\uffa9\033\uffa9\050\uffa9\117\uffa9\120\uffa9\121" +
    "\uffa9\145\uffa9\151\uffa9\153\uffa9\156\uffa9\157\uffa9\160\uffa9" +
    "\164\uffa9\165\uffa9\167\uffa9\170\uffa9\001\002\000\062\003" +
    "\uffb3\007\uffb3\010\uffb3\014\uffb3\020\uffb3\021\uffb3\023\uffb3" +
    "\025\uffb3\026\uffb3\033\uffb3\050\uffb3\117\uffb3\120\uffb3\121" +
    "\uffb3\145\uffb3\151\uffb3\153\uffb3\156\uffb3\157\uffb3\160\uffb3" +
    "\164\uffb3\165\uffb3\167\uffb3\170\uffb3\001\002\000\062\003" +
    "\uffad\007\uffad\010\uffad\014\uffad\020\uffad\021\uffad\023\uffad" +
    "\025\uffad\026\uffad\033\uffad\050\uffad\117\uffad\120\uffad\121" +
    "\uffad\145\uffad\151\uffad\153\uffad\156\uffad\157\uffad\160\uffad" +
    "\164\uffad\165\uffad\167\uffad\170\uffad\001\002\000\062\003" +
    "\uffa8\007\uffa8\010\uffa8\014\uffa8\020\uffa8\021\uffa8\023\uffa8" +
    "\025\uffa8\026\uffa8\033\uffa8\050\uffa8\117\uffa8\120\uffa8\121" +
    "\uffa8\145\uffa8\151\uffa8\153\uffa8\156\uffa8\157\uffa8\160\uffa8" +
    "\164\uffa8\165\uffa8\167\uffa8\170\uffa8\001\002\000\062\003" +
    "\uffae\007\uffae\010\uffae\014\uffae\020\uffae\021\uffae\023\uffae" +
    "\025\uffae\026\uffae\033\uffae\050\uffae\117\uffae\120\uffae\121" +
    "\uffae\145\uffae\151\uffae\153\uffae\156\uffae\157\uffae\160\uffae" +
    "\164\uffae\165\uffae\167\uffae\170\uffae\001\002\000\050\003" +
    "\uff81\007\uff81\010\uff81\014\uff81\020\uff81\021\uff81\023\uff81" +
    "\025\uff81\026\uff81\033\uff81\050\uff81\151\uff81\156\uff81\157" +
    "\uff81\160\uff81\164\uff81\165\uff81\167\uff81\170\uff81\001\002" +
    "\000\006\003\150\160\065\001\002\000\050\003\uff82\007" +
    "\uff82\010\uff82\014\uff82\020\uff82\021\uff82\023\uff82\025\uff82" +
    "\026\uff82\033\uff82\050\uff82\151\uff82\156\uff82\157\uff82\160" +
    "\uff82\164\uff82\165\uff82\167\uff82\170\uff82\001\002\000\006" +
    "\003\152\145\153\001\002\000\050\003\uff83\007\uff83\010" +
    "\uff83\014\uff83\020\uff83\021\uff83\023\uff83\025\uff83\026\uff83" +
    "\033\uff83\050\uff83\151\uff83\156\uff83\157\uff83\160\uff83\164" +
    "\uff83\165\uff83\167\uff83\170\uff83\001\002\000\006\003\154" +
    "\150\155\001\002\000\050\003\uff84\007\uff84\010\uff84\014" +
    "\uff84\020\uff84\021\uff84\023\uff84\025\uff84\026\uff84\033\uff84" +
    "\050\uff84\151\uff84\156\uff84\157\uff84\160\uff84\164\uff84\165" +
    "\uff84\167\uff84\170\uff84\001\002\000\046\003\157\007\024" +
    "\010\042\014\056\020\036\021\052\023\031\025\020\026" +
    "\015\033\044\050\025\156\023\157\022\160\045\164\055" +
    "\165\054\167\033\170\032\001\002\000\006\003\160\151" +
    "\161\001\002\000\050\003\uff85\007\uff85\010\uff85\014\uff85" +
    "\020\uff85\021\uff85\023\uff85\025\uff85\026\uff85\033\uff85\050" +
    "\uff85\151\uff85\156\uff85\157\uff85\160\uff85\164\uff85\165\uff85" +
    "\167\uff85\170\uff85\001\002\000\050\003\uff86\007\uff86\010" +
    "\uff86\014\uff86\020\uff86\021\uff86\023\uff86\025\uff86\026\uff86" +
    "\033\uff86\050\uff86\151\uff86\156\uff86\157\uff86\160\uff86\164" +
    "\uff86\165\uff86\167\uff86\170\uff86\001\002\000\050\003\uff87" +
    "\007\uff87\010\uff87\014\uff87\020\uff87\021\uff87\023\uff87\025" +
    "\uff87\026\uff87\033\uff87\050\uff87\151\uff87\156\uff87\157\uff87" +
    "\160\uff87\164\uff87\165\uff87\167\uff87\170\uff87\001\002\000" +
    "\050\003\uff71\007\uff71\010\uff71\014\uff71\020\uff71\021\uff71" +
    "\023\uff71\025\uff71\026\uff71\033\uff71\050\uff71\151\uff71\156" +
    "\uff71\157\uff71\160\uff71\164\uff71\165\uff71\167\uff71\170\uff71" +
    "\001\002\000\050\003\uff76\007\uff76\010\uff76\014\uff76\020" +
    "\uff76\021\uff76\023\uff76\025\uff76\026\uff76\033\uff76\050\uff76" +
    "\151\uff76\156\uff76\157\uff76\160\uff76\164\uff76\165\uff76\167" +
    "\uff76\170\uff76\001\002\000\006\003\221\160\222\001\002" +
    "\000\006\003\211\160\212\001\002\000\050\003\uffd6\007" +
    "\uffd6\010\uffd6\014\uffd6\020\uffd6\021\uffd6\023\uffd6\025\uffd6" +
    "\026\uffd6\033\uffd6\050\uffd6\151\uffd6\156\uffd6\157\uffd6\160" +
    "\uffd6\164\uffd6\165\uffd6\167\uffd6\170\uffd6\001\002\000\010" +
    "\003\171\106\170\160\172\001\002\000\006\003\201\160" +
    "\202\001\002\000\050\003\uffd8\007\uffd8\010\uffd8\014\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\025\uffd8\026\uffd8\033\uffd8\050" +
    "\uffd8\151\uffd8\156\uffd8\157\uffd8\160\uffd8\164\uffd8\165\uffd8" +
    "\167\uffd8\170\uffd8\001\002\000\006\003\174\122\173\001" +
    "\002\000\006\003\175\170\176\001\002\000\050\003\uffdc" +
    "\007\uffdc\010\uffdc\014\uffdc\020\uffdc\021\uffdc\023\uffdc\025" +
    "\uffdc\026\uffdc\033\uffdc\050\uffdc\151\uffdc\156\uffdc\157\uffdc" +
    "\160\uffdc\164\uffdc\165\uffdc\167\uffdc\170\uffdc\001\002\000" +
    "\050\003\uffe0\007\uffe0\010\uffe0\014\uffe0\020\uffe0\021\uffe0" +
    "\023\uffe0\025\uffe0\026\uffe0\033\uffe0\050\uffe0\151\uffe0\156" +
    "\uffe0\157\uffe0\160\uffe0\164\uffe0\165\uffe0\167\uffe0\170\uffe0" +
    "\001\002\000\006\003\177\153\200\001\002\000\050\003" +
    "\uffe4\007\uffe4\010\uffe4\014\uffe4\020\uffe4\021\uffe4\023\uffe4" +
    "\025\uffe4\026\uffe4\033\uffe4\050\uffe4\151\uffe4\156\uffe4\157" +
    "\uffe4\160\uffe4\164\uffe4\165\uffe4\167\uffe4\170\uffe4\001\002" +
    "\000\050\003\uffe8\007\uffe8\010\uffe8\014\uffe8\020\uffe8\021" +
    "\uffe8\023\uffe8\025\uffe8\026\uffe8\033\uffe8\050\uffe8\151\uffe8" +
    "\156\uffe8\157\uffe8\160\uffe8\164\uffe8\165\uffe8\167\uffe8\170" +
    "\uffe8\001\002\000\050\003\uffd7\007\uffd7\010\uffd7\014\uffd7" +
    "\020\uffd7\021\uffd7\023\uffd7\025\uffd7\026\uffd7\033\uffd7\050" +
    "\uffd7\151\uffd7\156\uffd7\157\uffd7\160\uffd7\164\uffd7\165\uffd7" +
    "\167\uffd7\170\uffd7\001\002\000\006\003\204\122\203\001" +
    "\002\000\006\003\205\167\206\001\002\000\050\003\uffdb" +
    "\007\uffdb\010\uffdb\014\uffdb\020\uffdb\021\uffdb\023\uffdb\025" +
    "\uffdb\026\uffdb\033\uffdb\050\uffdb\151\uffdb\156\uffdb\157\uffdb" +
    "\160\uffdb\164\uffdb\165\uffdb\167\uffdb\170\uffdb\001\002\000" +
    "\050\003\uffdf\007\uffdf\010\uffdf\014\uffdf\020\uffdf\021\uffdf" +
    "\023\uffdf\025\uffdf\026\uffdf\033\uffdf\050\uffdf\151\uffdf\156" +
    "\uffdf\157\uffdf\160\uffdf\164\uffdf\165\uffdf\167\uffdf\170\uffdf" +
    "\001\002\000\006\003\207\153\210\001\002\000\050\003" +
    "\uffe3\007\uffe3\010\uffe3\014\uffe3\020\uffe3\021\uffe3\023\uffe3" +
    "\025\uffe3\026\uffe3\033\uffe3\050\uffe3\151\uffe3\156\uffe3\157" +
    "\uffe3\160\uffe3\164\uffe3\165\uffe3\167\uffe3\170\uffe3\001\002" +
    "\000\050\003\uffe7\007\uffe7\010\uffe7\014\uffe7\020\uffe7\021" +
    "\uffe7\023\uffe7\025\uffe7\026\uffe7\033\uffe7\050\uffe7\151\uffe7" +
    "\156\uffe7\157\uffe7\160\uffe7\164\uffe7\165\uffe7\167\uffe7\170" +
    "\uffe7\001\002\000\050\003\uffda\007\uffda\010\uffda\014\uffda" +
    "\020\uffda\021\uffda\023\uffda\025\uffda\026\uffda\033\uffda\050" +
    "\uffda\151\uffda\156\uffda\157\uffda\160\uffda\164\uffda\165\uffda" +
    "\167\uffda\170\uffda\001\002\000\006\003\214\122\213\001" +
    "\002\000\006\003\215\164\216\001\002\000\050\003\uffde" +
    "\007\uffde\010\uffde\014\uffde\020\uffde\021\uffde\023\uffde\025" +
    "\uffde\026\uffde\033\uffde\050\uffde\151\uffde\156\uffde\157\uffde" +
    "\160\uffde\164\uffde\165\uffde\167\uffde\170\uffde\001\002\000" +
    "\050\003\uffe2\007\uffe2\010\uffe2\014\uffe2\020\uffe2\021\uffe2" +
    "\023\uffe2\025\uffe2\026\uffe2\033\uffe2\050\uffe2\151\uffe2\156" +
    "\uffe2\157\uffe2\160\uffe2\164\uffe2\165\uffe2\167\uffe2\170\uffe2" +
    "\001\002\000\006\003\217\153\220\001\002\000\050\003" +
    "\uffe6\007\uffe6\010\uffe6\014\uffe6\020\uffe6\021\uffe6\023\uffe6" +
    "\025\uffe6\026\uffe6\033\uffe6\050\uffe6\151\uffe6\156\uffe6\157" +
    "\uffe6\160\uffe6\164\uffe6\165\uffe6\167\uffe6\170\uffe6\001\002" +
    "\000\050\003\uffea\007\uffea\010\uffea\014\uffea\020\uffea\021" +
    "\uffea\023\uffea\025\uffea\026\uffea\033\uffea\050\uffea\151\uffea" +
    "\156\uffea\157\uffea\160\uffea\164\uffea\165\uffea\167\uffea\170" +
    "\uffea\001\002\000\050\003\uffd9\007\uffd9\010\uffd9\014\uffd9" +
    "\020\uffd9\021\uffd9\023\uffd9\025\uffd9\026\uffd9\033\uffd9\050" +
    "\uffd9\151\uffd9\156\uffd9\157\uffd9\160\uffd9\164\uffd9\165\uffd9" +
    "\167\uffd9\170\uffd9\001\002\000\006\003\224\122\223\001" +
    "\002\000\006\003\225\165\226\001\002\000\050\003\uffdd" +
    "\007\uffdd\010\uffdd\014\uffdd\020\uffdd\021\uffdd\023\uffdd\025" +
    "\uffdd\026\uffdd\033\uffdd\050\uffdd\151\uffdd\156\uffdd\157\uffdd" +
    "\160\uffdd\164\uffdd\165\uffdd\167\uffdd\170\uffdd\001\002\000" +
    "\050\003\uffe1\007\uffe1\010\uffe1\014\uffe1\020\uffe1\021\uffe1" +
    "\023\uffe1\025\uffe1\026\uffe1\033\uffe1\050\uffe1\151\uffe1\156" +
    "\uffe1\157\uffe1\160\uffe1\164\uffe1\165\uffe1\167\uffe1\170\uffe1" +
    "\001\002\000\006\003\227\153\230\001\002\000\050\003" +
    "\uffe5\007\uffe5\010\uffe5\014\uffe5\020\uffe5\021\uffe5\023\uffe5" +
    "\025\uffe5\026\uffe5\033\uffe5\050\uffe5\151\uffe5\156\uffe5\157" +
    "\uffe5\160\uffe5\164\uffe5\165\uffe5\167\uffe5\170\uffe5\001\002" +
    "\000\050\003\uffe9\007\uffe9\010\uffe9\014\uffe9\020\uffe9\021" +
    "\uffe9\023\uffe9\025\uffe9\026\uffe9\033\uffe9\050\uffe9\151\uffe9" +
    "\156\uffe9\157\uffe9\160\uffe9\164\uffe9\165\uffe9\167\uffe9\170" +
    "\uffe9\001\002\000\012\003\237\160\240\164\055\165\054" +
    "\001\002\000\012\003\234\160\235\164\055\165\054\001" +
    "\002\000\062\003\uffb7\007\uffb7\010\uffb7\014\uffb7\020\uffb7" +
    "\021\uffb7\023\uffb7\025\uffb7\026\uffb7\033\uffb7\050\uffb7\117" +
    "\uffb7\120\uffb7\121\uffb7\145\uffb7\151\uffb7\153\uffb7\156\uffb7" +
    "\157\uffb7\160\uffb7\164\uffb7\165\uffb7\167\uffb7\170\uffb7\001" +
    "\002\000\062\003\uffac\007\uffac\010\uffac\014\uffac\020\uffac" +
    "\021\uffac\023\uffac\025\uffac\026\uffac\033\uffac\050\uffac\117" +
    "\uffac\120\uffac\121\uffac\145\uffac\151\uffac\153\uffac\156\uffac" +
    "\157\uffac\160\uffac\164\uffac\165\uffac\167\uffac\170\uffac\001" +
    "\002\000\062\003\uffb6\007\uffb6\010\uffb6\014\uffb6\020\uffb6" +
    "\021\uffb6\023\uffb6\025\uffb6\026\uffb6\033\uffb6\050\uffb6\117" +
    "\uffb6\120\uffb6\121\uffb6\145\uffb6\151\uffb6\153\uffb6\156\uffb6" +
    "\157\uffb6\160\uffb6\164\uffb6\165\uffb6\167\uffb6\170\uffb6\001" +
    "\002\000\062\003\uffb0\007\uffb0\010\uffb0\014\uffb0\020\uffb0" +
    "\021\uffb0\023\uffb0\025\uffb0\026\uffb0\033\uffb0\050\uffb0\117" +
    "\uffb0\120\uffb0\121\uffb0\145\uffb0\151\uffb0\153\uffb0\156\uffb0" +
    "\157\uffb0\160\uffb0\164\uffb0\165\uffb0\167\uffb0\170\uffb0\001" +
    "\002\000\062\003\uffab\007\uffab\010\uffab\014\uffab\020\uffab" +
    "\021\uffab\023\uffab\025\uffab\026\uffab\033\uffab\050\uffab\117" +
    "\uffab\120\uffab\121\uffab\145\uffab\151\uffab\153\uffab\156\uffab" +
    "\157\uffab\160\uffab\164\uffab\165\uffab\167\uffab\170\uffab\001" +
    "\002\000\062\003\uffaf\007\uffaf\010\uffaf\014\uffaf\020\uffaf" +
    "\021\uffaf\023\uffaf\025\uffaf\026\uffaf\033\uffaf\050\uffaf\117" +
    "\uffaf\120\uffaf\121\uffaf\145\uffaf\151\uffaf\153\uffaf\156\uffaf" +
    "\157\uffaf\160\uffaf\164\uffaf\165\uffaf\167\uffaf\170\uffaf\001" +
    "\002\000\006\003\uff7c\151\uff7c\001\002\000\016\003\uffc4" +
    "\160\uffc4\164\uffc4\165\uffc4\167\uffc4\170\uffc4\001\002\000" +
    "\016\003\uffc6\160\uffc6\164\uffc6\165\uffc6\167\uffc6\170\uffc6" +
    "\001\002\000\016\003\247\160\126\164\055\165\054\167" +
    "\033\170\032\001\002\000\016\003\uffc5\160\uffc5\164\uffc5" +
    "\165\uffc5\167\uffc5\170\uffc5\001\002\000\050\003\uffa7\007" +
    "\uffa7\010\uffa7\014\uffa7\020\uffa7\021\uffa7\023\uffa7\025\uffa7" +
    "\026\uffa7\033\uffa7\050\uffa7\151\uffa7\156\uffa7\157\uffa7\160" +
    "\uffa7\164\uffa7\165\uffa7\167\uffa7\170\uffa7\001\002\000\050" +
    "\003\uffa6\007\uffa6\010\uffa6\014\uffa6\020\uffa6\021\uffa6\023" +
    "\uffa6\025\uffa6\026\uffa6\033\uffa6\050\uffa6\151\uffa6\156\uffa6" +
    "\157\uffa6\160\uffa6\164\uffa6\165\uffa6\167\uffa6\170\uffa6\001" +
    "\002\000\050\003\uff8f\007\uff8f\010\uff8f\014\uff8f\020\uff8f" +
    "\021\uff8f\023\uff8f\025\uff8f\026\uff8f\033\uff8f\050\uff8f\151" +
    "\uff8f\156\uff8f\157\uff8f\160\uff8f\164\uff8f\165\uff8f\167\uff8f" +
    "\170\uff8f\001\002\000\016\003\253\160\126\164\055\165" +
    "\054\167\033\170\032\001\002\000\006\003\254\145\255" +
    "\001\002\000\050\003\uff90\007\uff90\010\uff90\014\uff90\020" +
    "\uff90\021\uff90\023\uff90\025\uff90\026\uff90\033\uff90\050\uff90" +
    "\151\uff90\156\uff90\157\uff90\160\uff90\164\uff90\165\uff90\167" +
    "\uff90\170\uff90\001\002\000\050\003\uff91\007\uff91\010\uff91" +
    "\014\uff91\020\uff91\021\uff91\023\uff91\025\uff91\026\uff91\033" +
    "\uff91\050\uff91\151\uff91\156\uff91\157\uff91\160\uff91\164\uff91" +
    "\165\uff91\167\uff91\170\uff91\001\002\000\006\003\256\150" +
    "\257\001\002\000\050\003\uff92\007\uff92\010\uff92\014\uff92" +
    "\020\uff92\021\uff92\023\uff92\025\uff92\026\uff92\033\uff92\050" +
    "\uff92\151\uff92\156\uff92\157\uff92\160\uff92\164\uff92\165\uff92" +
    "\167\uff92\170\uff92\001\002\000\046\003\261\007\024\010" +
    "\042\014\056\020\036\021\052\023\031\025\020\026\015" +
    "\033\044\050\025\156\023\157\022\160\045\164\055\165" +
    "\054\167\033\170\032\001\002\000\006\003\262\151\263" +
    "\001\002\000\050\003\uff93\007\uff93\010\uff93\014\uff93\020" +
    "\uff93\021\uff93\023\uff93\025\uff93\026\uff93\033\uff93\050\uff93" +
    "\151\uff93\156\uff93\157\uff93\160\uff93\164\uff93\165\uff93\167" +
    "\uff93\170\uff93\001\002\000\050\003\uff94\007\uff94\010\uff94" +
    "\014\uff94\020\uff94\021\uff94\023\uff94\025\uff94\026\uff94\033" +
    "\uff94\050\uff94\151\uff94\156\uff94\157\uff94\160\uff94\164\uff94" +
    "\165\uff94\167\uff94\170\uff94\001\002\000\052\003\uff99\007" +
    "\uff99\010\uff99\014\uff99\015\264\020\uff99\021\uff99\023\uff99" +
    "\025\uff99\026\uff99\033\uff99\050\uff99\151\uff99\156\uff99\157" +
    "\uff99\160\uff99\164\uff99\165\uff99\167\uff99\170\uff99\001\002" +
    "\000\006\003\265\150\266\001\002\000\050\003\uff95\007" +
    "\uff95\010\uff95\014\uff95\020\uff95\021\uff95\023\uff95\025\uff95" +
    "\026\uff95\033\uff95\050\uff95\151\uff95\156\uff95\157\uff95\160" +
    "\uff95\164\uff95\165\uff95\167\uff95\170\uff95\001\002\000\046" +
    "\003\270\007\024\010\042\014\056\020\036\021\052\023" +
    "\031\025\020\026\015\033\044\050\025\156\023\157\022" +
    "\160\045\164\055\165\054\167\033\170\032\001\002\000" +
    "\006\003\271\151\272\001\002\000\050\003\uff96\007\uff96" +
    "\010\uff96\014\uff96\020\uff96\021\uff96\023\uff96\025\uff96\026" +
    "\uff96\033\uff96\050\uff96\151\uff96\156\uff96\157\uff96\160\uff96" +
    "\164\uff96\165\uff96\167\uff96\170\uff96\001\002\000\050\003" +
    "\uff97\007\uff97\010\uff97\014\uff97\020\uff97\021\uff97\023\uff97" +
    "\025\uff97\026\uff97\033\uff97\050\uff97\151\uff97\156\uff97\157" +
    "\uff97\160\uff97\164\uff97\165\uff97\167\uff97\170\uff97\001\002" +
    "\000\050\003\uff98\007\uff98\010\uff98\014\uff98\020\uff98\021" +
    "\uff98\023\uff98\025\uff98\026\uff98\033\uff98\050\uff98\151\uff98" +
    "\156\uff98\157\uff98\160\uff98\164\uff98\165\uff98\167\uff98\170" +
    "\uff98\001\002\000\004\003\303\001\002\000\010\003\300" +
    "\152\277\153\301\001\002\000\050\003\uffeb\007\uffeb\010" +
    "\uffeb\014\uffeb\020\uffeb\021\uffeb\023\uffeb\025\uffeb\026\uffeb" +
    "\033\uffeb\050\uffeb\151\uffeb\156\uffeb\157\uffeb\160\uffeb\164" +
    "\uffeb\165\uffeb\167\uffeb\170\uffeb\001\002\000\010\003\ufff3" +
    "\152\ufff3\153\ufff3\001\002\000\004\160\302\001\002\000" +
    "\050\003\uffec\007\uffec\010\uffec\014\uffec\020\uffec\021\uffec" +
    "\023\uffec\025\uffec\026\uffec\033\uffec\050\uffec\151\uffec\156" +
    "\uffec\157\uffec\160\uffec\164\uffec\165\uffec\167\uffec\170\uffec" +
    "\001\002\000\050\003\uffed\007\uffed\010\uffed\014\uffed\020" +
    "\uffed\021\uffed\023\uffed\025\uffed\026\uffed\033\uffed\050\uffed" +
    "\151\uffed\156\uffed\157\uffed\160\uffed\164\uffed\165\uffed\167" +
    "\uffed\170\uffed\001\002\000\010\003\ufff4\152\ufff4\153\ufff4" +
    "\001\002\000\010\003\ufff2\152\ufff2\153\ufff2\001\002\000" +
    "\006\002\ufffd\063\ufffd\001\002\000\050\003\uff88\007\uff88" +
    "\010\uff88\014\uff88\020\uff88\021\uff88\023\uff88\025\uff88\026" +
    "\uff88\033\uff88\050\uff88\151\uff88\156\uff88\157\uff88\160\uff88" +
    "\164\uff88\165\uff88\167\uff88\170\uff88\001\002\000\016\003" +
    "\310\160\126\164\055\165\054\167\033\170\032\001\002" +
    "\000\006\003\311\145\312\001\002\000\050\003\uff89\007" +
    "\uff89\010\uff89\014\uff89\020\uff89\021\uff89\023\uff89\025\uff89" +
    "\026\uff89\033\uff89\050\uff89\151\uff89\156\uff89\157\uff89\160" +
    "\uff89\164\uff89\165\uff89\167\uff89\170\uff89\001\002\000\050" +
    "\003\uff8a\007\uff8a\010\uff8a\014\uff8a\020\uff8a\021\uff8a\023" +
    "\uff8a\025\uff8a\026\uff8a\033\uff8a\050\uff8a\151\uff8a\156\uff8a" +
    "\157\uff8a\160\uff8a\164\uff8a\165\uff8a\167\uff8a\170\uff8a\001" +
    "\002\000\006\003\313\150\314\001\002\000\050\003\uff8b" +
    "\007\uff8b\010\uff8b\014\uff8b\020\uff8b\021\uff8b\023\uff8b\025" +
    "\uff8b\026\uff8b\033\uff8b\050\uff8b\151\uff8b\156\uff8b\157\uff8b" +
    "\160\uff8b\164\uff8b\165\uff8b\167\uff8b\170\uff8b\001\002\000" +
    "\046\003\316\007\024\010\042\014\056\020\036\021\052" +
    "\023\031\025\020\026\015\033\044\050\025\156\023\157" +
    "\022\160\045\164\055\165\054\167\033\170\032\001\002" +
    "\000\006\003\317\151\320\001\002\000\050\003\uff8c\007" +
    "\uff8c\010\uff8c\014\uff8c\020\uff8c\021\uff8c\023\uff8c\025\uff8c" +
    "\026\uff8c\033\uff8c\050\uff8c\151\uff8c\156\uff8c\157\uff8c\160" +
    "\uff8c\164\uff8c\165\uff8c\167\uff8c\170\uff8c\001\002\000\050" +
    "\003\uff8d\007\uff8d\010\uff8d\014\uff8d\020\uff8d\021\uff8d\023" +
    "\uff8d\025\uff8d\026\uff8d\033\uff8d\050\uff8d\151\uff8d\156\uff8d" +
    "\157\uff8d\160\uff8d\164\uff8d\165\uff8d\167\uff8d\170\uff8d\001" +
    "\002\000\050\003\uff8e\007\uff8e\010\uff8e\014\uff8e\020\uff8e" +
    "\021\uff8e\023\uff8e\025\uff8e\026\uff8e\033\uff8e\050\uff8e\151" +
    "\uff8e\156\uff8e\157\uff8e\160\uff8e\164\uff8e\165\uff8e\167\uff8e" +
    "\170\uff8e\001\002\000\006\003\uff79\151\uff79\001\002\000" +
    "\006\003\uff7a\151\uff7a\001\002\000\012\003\325\160\326" +
    "\167\033\170\032\001\002\000\062\003\uffb5\007\uffb5\010" +
    "\uffb5\014\uffb5\020\uffb5\021\uffb5\023\uffb5\025\uffb5\026\uffb5" +
    "\033\uffb5\050\uffb5\117\uffb5\120\uffb5\121\uffb5\145\uffb5\151" +
    "\uffb5\153\uffb5\156\uffb5\157\uffb5\160\uffb5\164\uffb5\165\uffb5" +
    "\167\uffb5\170\uffb5\001\002\000\062\003\uffaa\007\uffaa\010" +
    "\uffaa\014\uffaa\020\uffaa\021\uffaa\023\uffaa\025\uffaa\026\uffaa" +
    "\033\uffaa\050\uffaa\117\uffaa\120\uffaa\121\uffaa\145\uffaa\151" +
    "\uffaa\153\uffaa\156\uffaa\157\uffaa\160\uffaa\164\uffaa\165\uffaa" +
    "\167\uffaa\170\uffaa\001\002\000\062\003\uffb4\007\uffb4\010" +
    "\uffb4\014\uffb4\020\uffb4\021\uffb4\023\uffb4\025\uffb4\026\uffb4" +
    "\033\uffb4\050\uffb4\117\uffb4\120\uffb4\121\uffb4\145\uffb4\151" +
    "\uffb4\153\uffb4\156\uffb4\157\uffb4\160\uffb4\164\uffb4\165\uffb4" +
    "\167\uffb4\170\uffb4\001\002\000\006\002\000\063\000\001" +
    "\002\000\004\002\001\001\002\000\004\160\332\001\002" +
    "\000\004\142\333\001\002\000\004\160\334\001\002\000" +
    "\004\114\335\001\002\000\010\002\ufffe\025\ufffe\063\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\004\004\326\001\001\000\004\005\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\006\027\007\016" +
    "\010\052\012\045\013\047\014\037\015\020\025\033\026" +
    "\040\027\050\030\046\032\015\033\025\034\042\035\036" +
    "\036\026\037\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\322" +
    "\001\001\000\044\006\027\007\016\010\052\012\045\013" +
    "\047\014\037\015\020\025\033\026\040\027\050\030\046" +
    "\032\015\033\025\034\042\035\036\036\321\037\034\001" +
    "\001\000\044\006\027\007\016\010\052\012\045\013\047" +
    "\014\037\015\020\025\033\026\040\027\050\030\046\032" +
    "\015\033\025\034\042\035\036\036\320\037\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\243\001" +
    "\001\000\044\006\027\007\016\010\052\012\045\013\047" +
    "\014\037\015\020\025\033\026\040\027\050\030\046\032" +
    "\015\033\025\034\042\035\036\036\240\037\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\231\020" +
    "\230\001\001\000\002\001\001\000\006\007\163\010\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\135\020\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\062\040\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\077\016\070\022\071\023\075\024\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\077\016\070\022\071" +
    "\023\111\001\001\000\002\001\001\000\014\014\077\016" +
    "\105\022\071\023\075\024\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\077\022\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\077\022\107\001" +
    "\001\000\004\016\116\001\001\000\014\014\077\016\070" +
    "\022\071\023\075\024\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\037\015\020" +
    "\025\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\135\020\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\142\001\001\000\002\001\001\000\006" +
    "\014\136\015\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\006\027\007\016\010\052\012\045\013\047\014\037" +
    "\015\020\025\033\026\040\027\050\030\046\032\015\033" +
    "\025\034\042\035\036\036\155\037\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\235\001\001\000\004\014\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\037\015\020\025\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\037\015\020\025\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\006\027\007\016\010\052\012\045\013\047" +
    "\014\037\015\020\025\033\026\040\027\050\030\046\032" +
    "\015\033\025\034\042\035\036\036\257\037\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\006\027\007\016\010\052\012\045\013\047\014\037\015" +
    "\020\025\033\026\040\027\050\030\046\032\015\033\025" +
    "\034\042\035\036\036\266\037\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\037\015\020\025\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\027" +
    "\007\016\010\052\012\045\013\047\014\037\015\020\025" +
    "\033\026\040\027\050\030\046\032\015\033\025\034\042" +
    "\035\036\036\314\037\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void syntax_error(Symbol s){
        System.err.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserC$actions {
  private final ParserC parser;

  /** Constructor */
  CUP$ParserC$actions(ParserC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserC$do_action(
    int                        CUP$ParserC$act_num,
    java_cup.runtime.lr_parser CUP$ParserC$parser,
    java.util.Stack            CUP$ParserC$stack,
    int                        CUP$ParserC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserC$result;

      /* select the action based on the action number */
      switch (CUP$ParserC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // inicializacion ::= lista_tipo_entero error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("inicializacion",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // inicializacion ::= lista_tipo_entero operaciones_validas1 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("inicializacion",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia ::= operaciones_validas1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia ::= operaciones_validas2 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia ::= operaciones_validas1 PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // bloque ::= COMENTARIOUNILINEA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // bloque ::= COMENTARIOMULTILINEA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // bloque ::= COMENTARIOUNILINEA bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // bloque ::= COMENTARIOMULTILINEA bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // bloque ::= sentencia bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_for ::= FOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_for ::= FOR PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  System.out.println("[AS-EC-FOR] Esta es una estructura de control FOR"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia_while ::= WHILE error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_while ::= WHILE PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  System.out.println("[AS-EC-WHILE] Esta es una estructura de control WHILE"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_if ::= IF error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia_if ::= IF PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER ELSE LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  System.out.println("[AS-EC-IF] Esta es una estructura de control IF"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia_if ::= IF PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones ::= operaciones_validas2 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones ::= operaciones_validas1 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones ::= operaciones_validas2 operaciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones ::= operaciones_validas1 operaciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operaciones_validas2 ::= operacion_logica 
            {
              Object RESULT =null;
		  System.out.println("[AS-OV-2] Esta es una operacion logica"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operaciones_validas2 ::= operacion_relacional 
            {
              Object RESULT =null;
		  System.out.println("[AS-OV-2] Esta es una operacion relacional"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operaciones_validas1 ::= IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operaciones_validas1 ::= IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operaciones_validas1 ::= IDENTIFICADOR ASIGNACION operacion_aritmetica_compuesta 
            {
              Object RESULT =null;
		  System.out.println("[AS-OV-1] Esta es una operacion aritmetica"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operacion_logica ::= operacion_relacional operadores_logicos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operacion_logica ::= operacion_relacional operadores_logicos operacion_relacional 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales2 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operacion_relacional ::= IDENTIFICADOR operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER operadores_aritmeticos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacion_aritmetica_compuesta ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacion_aritmetica_compuesta ::= operacion_aritmetica operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacion_aritmetica_compuesta ::= PARENTESIS_IZQ operacion_aritmetica PARENTESIS_DER operadores_aritmeticos operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacion_aritmetica ::= operadores_aritmeticos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacion_aritmetica ::= operacion_aritmetica_simple 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacion_aritmetica ::= operacion_aritmetica operadores_aritmeticos operacion_aritmetica_simple 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacion_aritmetica_simple ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacion_aritmetica_simple ::= valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operadores_logicos ::= NOT 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadores_relacionales2 ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadores_relacionales2 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadores_relacionales2 ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadores_relacionales2 ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operadores_relacionales1 ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales1",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operadores_relacionales1 ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales1",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operadores_aritmeticos ::= MODULO 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operadores_aritmeticos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operadores_aritmeticos ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operadores_aritmeticos ::= RESTA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operadores_aritmeticos ::= SUMA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valores_validos_numero ::= NUMFLOTANTEDEC 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_numero",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valores_validos_numero ::= NUMDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_numero",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valores_validos_texto ::= CADENACHAR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_texto",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valores_validos_texto ::= CADENATEXTO 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_texto",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_constante ::= CONST error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_constante ::= CONST CHAR MULTIPLICACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_constante ::= CONST CHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_constante ::= CONST lista_tipo_flotante error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_constante ::= CONST lista_tipo_entero error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_constante ::= CONST CHAR IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char*"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante flotante"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante entero"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_variable ::= lista_tipo_dato error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_variable ::= lista_tipo_dato lista_identificador error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_variable ::= lista_tipo_dato lista_identificador PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-TD] Esta es una declaración de variables"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaraciones ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaraciones ::= declaracion_constante declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaraciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraciones ::= declaracion_variable declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_identificador ::= COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_identificador ::= lista_identificador COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		/*     System.out.println("[AS-DEC-TD] Esta es un tipo de dato char");     */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_tipo_dato ::= lista_tipo_flotante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_tipo_dato ::= lista_tipo_entero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_tipo_flotante ::= DOUBLE 
            {
              Object RESULT =null;
		/*   System.out.println("[AS-DEC-TD] Esta es un tipo de dato double");   */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_tipo_flotante ::= FLOAT 
            {
              Object RESULT =null;
		/*    System.out.println("[AS-DEC-TD] Esta es un tipo de dato float");    */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_tipo_entero ::= LONG 
            {
              Object RESULT =null;
		/*     System.out.println("[AS-DEC-TD] Esta es un tipo de dato long");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_tipo_entero ::= SHORT 
            {
              Object RESULT =null;
		/*    System.out.println("[AS-DEC-TD] Esta es un tipo de dato short");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_tipo_entero ::= INT 
            {
              Object RESULT =null;
		/*      System.out.println("[AS-DEC-TD] Esta es un tipo de dato int");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcion_main ::= INT MAIN PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-MAIN] Esta es la funcion main"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_include ::= DIRECTIVA_INCLUDE MENOR_QUE IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR_QUE 
            {
              Object RESULT =null;
		  System.out.println("[AS-INCLUDE] Esta es una directiva #include");  
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_include",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= dec_include funcion_main 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= programa dec_include 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		RESULT = start_val;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserC$parser.done_parsing();
          return CUP$ParserC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

