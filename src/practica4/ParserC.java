
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 07 23:34:29 CST 2025
//----------------------------------------------------

package practica4;

import java_cup.runtime.*;
import java.util.Stack;
import java.io.*;
import practica4.Calculadora1;
import practica4.GeneradorCodigoIntermedio;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 07 23:34:29 CST 2025
  */
public class ParserC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserC() {super();}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\004\011\000\002\004\010\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\004\000" +
    "\002\005\016\000\002\005\015\000\002\005\013\000\002" +
    "\005\012\000\002\005\015\000\002\005\014\000\002\005" +
    "\012\000\002\005\011\000\002\005\015\000\002\005\014" +
    "\000\002\005\013\000\002\005\012\000\002\005\011\000" +
    "\002\005\010\000\002\005\007\000\002\005\006\000\002" +
    "\005\005\000\002\005\004\000\002\005\012\000\002\005" +
    "\011\000\002\005\010\000\002\005\007\000\002\005\006" +
    "\000\002\005\005\000\002\005\004\000\002\006\014\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\010\003\000\002\010\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\014\005" +
    "\000\002\014\003\000\002\014\004\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\015\005\000\002\015\005\000\002\015\004\000\002\016" +
    "\010\000\002\016\010\000\002\016\010\000\002\016\011" +
    "\000\002\016\010\000\002\016\010\000\002\016\010\000" +
    "\002\016\011\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\010\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\007\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\006\000" +
    "\002\016\004\000\002\020\003\000\002\020\003\000\002" +
    "\017\003\000\002\017\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\005\000\002\027\003\000\002\027\004\000\002" +
    "\031\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\004\000\002\032\005\000\002\032\003\000\002\032\004" +
    "\000\002\032\003\000\002\032\005\000\002\035\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\021\003" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\034\005\000\002\034\005\000\002\036\003\000\002" +
    "\036\003\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\004\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\052\003\000\002\041\011\000\002" +
    "\041\015\000\002\041\015\000\002\041\014\000\002\041" +
    "\013\000\002\041\011\000\002\041\010\000\002\041\007" +
    "\000\002\041\006\000\002\041\005\000\002\041\004\000" +
    "\002\042\011\000\002\042\011\000\002\042\010\000\002" +
    "\042\007\000\002\042\006\000\002\042\005\000\002\042" +
    "\004\000\002\043\015\000\002\043\015\000\002\043\014" +
    "\000\002\043\013\000\002\043\012\000\002\043\011\000" +
    "\002\043\010\000\002\043\007\000\002\043\006\000\002" +
    "\043\005\000\002\043\004\000\002\044\004\000\002\044" +
    "\003\000\002\044\004\000\002\044\004\000\002\044\003" +
    "\000\002\044\003\000\002\045\004\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\004\000\002" +
    "\046\004\000\002\046\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013f\000\004\062\004\001\002\000\004\112\u013c\001" +
    "\002\000\004\002\u013b\001\002\000\022\007\022\014\016" +
    "\020\023\025\010\026\012\033\021\046\015\170\013\001" +
    "\002\000\010\003\uffd8\151\uffd8\163\uffd8\001\002\000\010" +
    "\003\uffde\027\u0132\163\uffde\001\002\000\006\003\u0117\163" +
    "\u0118\001\002\000\034\003\uffdc\103\uffdc\104\uffdc\105\uffdc" +
    "\106\uffdc\107\uffdc\143\uffdc\151\uffdc\163\uffdc\164\uffdc\165" +
    "\uffdc\166\uffdc\167\uffdc\001\002\000\010\003\uffd6\151\uffd6" +
    "\163\uffd6\001\002\000\010\003\uffd9\151\uffd9\163\uffd9\001" +
    "\002\000\006\003\u0105\163\u0106\001\002\000\010\003\uffda" +
    "\151\uffda\163\uffda\001\002\000\022\007\022\014\016\020" +
    "\023\025\010\026\012\033\021\046\025\170\013\001\002" +
    "\000\004\002\000\001\002\000\034\003\uffdd\103\uffdd\104" +
    "\uffdd\105\uffdd\106\uffdd\107\uffdd\143\uffdd\151\uffdd\163\uffdd" +
    "\164\uffdd\165\uffdd\166\uffdd\167\uffdd\001\002\000\010\003" +
    "\uffd7\151\uffd7\163\uffd7\001\002\000\010\003\uffdb\151\uffdb" +
    "\163\uffdb\001\002\000\004\163\364\001\002\000\004\163" +
    "\027\001\002\000\004\002\uffff\001\002\000\004\143\030" +
    "\001\002\000\022\007\022\014\016\020\023\025\031\026" +
    "\012\033\021\144\034\170\013\001\002\000\034\003\uffde" +
    "\103\uffde\104\uffde\105\uffde\106\uffde\107\uffde\143\uffde\151" +
    "\uffde\163\uffde\164\uffde\165\uffde\166\uffde\167\uffde\001\002" +
    "\000\004\163\363\001\002\000\010\003\ufffa\144\ufffa\151" +
    "\ufffa\001\002\000\004\147\360\001\002\000\006\144\037" +
    "\151\036\001\002\000\022\003\357\007\022\014\016\020" +
    "\023\025\031\026\012\033\021\170\013\001\002\000\004" +
    "\147\040\001\002\000\036\007\022\010\054\014\016\020" +
    "\023\021\061\023\050\025\031\026\012\033\021\050\044" +
    "\155\043\156\042\163\056\170\013\001\002\000\044\003" +
    "\uff50\007\uff50\010\uff50\014\uff50\020\uff50\021\uff50\023\uff50" +
    "\025\uff50\026\uff50\032\uff50\033\uff50\050\uff50\150\uff50\155" +
    "\uff50\156\uff50\163\uff50\170\uff50\001\002\000\044\003\uff53" +
    "\007\022\010\054\014\016\020\023\021\061\023\050\025" +
    "\031\026\012\032\uff53\033\021\050\044\150\uff53\155\043" +
    "\156\042\163\056\170\013\001\002\000\044\003\uff52\007" +
    "\022\010\054\014\016\020\023\021\061\023\050\025\031" +
    "\026\012\032\uff52\033\021\050\044\150\uff52\155\043\156" +
    "\042\163\056\170\013\001\002\000\006\003\340\143\341" +
    "\001\002\000\044\003\uff7b\007\uff7b\010\uff7b\014\uff7b\020" +
    "\uff7b\021\uff7b\023\uff7b\025\uff7b\026\uff7b\032\uff7b\033\uff7b" +
    "\050\uff7b\150\uff7b\155\uff7b\156\uff7b\163\uff7b\170\uff7b\001" +
    "\002\000\004\150\337\001\002\000\010\003\330\151\326" +
    "\163\331\001\002\000\006\003\277\143\300\001\002\000" +
    "\044\003\uff56\007\022\010\054\014\016\020\023\021\061" +
    "\023\050\025\031\026\012\032\uff56\033\021\050\044\150" +
    "\uff56\155\043\156\042\163\056\170\013\001\002\000\006" +
    "\003\274\152\275\001\002\000\044\003\uff79\007\uff79\010" +
    "\uff79\014\uff79\020\uff79\021\uff79\023\uff79\025\uff79\026\uff79" +
    "\032\uff79\033\uff79\050\uff79\150\uff79\155\uff79\156\uff79\163" +
    "\uff79\170\uff79\001\002\000\020\003\231\007\232\014\016" +
    "\020\023\025\031\026\012\033\021\001\002\000\044\003" +
    "\uff7a\007\uff7a\010\uff7a\014\uff7a\020\uff7a\021\uff7a\023\uff7a" +
    "\025\uff7a\026\uff7a\032\uff7a\033\uff7a\050\uff7a\150\uff7a\155" +
    "\uff7a\156\uff7a\163\uff7a\170\uff7a\001\002\000\006\003\210" +
    "\121\207\001\002\000\044\003\uff4f\007\uff4f\010\uff4f\014" +
    "\uff4f\020\uff4f\021\uff4f\023\uff4f\025\uff4f\026\uff4f\032\uff4f" +
    "\033\uff4f\050\uff4f\150\uff4f\155\uff4f\156\uff4f\163\uff4f\170" +
    "\uff4f\001\002\000\044\003\uff4e\007\uff4e\010\uff4e\014\uff4e" +
    "\020\uff4e\021\uff4e\023\uff4e\025\uff4e\026\uff4e\032\uff4e\033" +
    "\uff4e\050\uff4e\150\uff4e\155\uff4e\156\uff4e\163\uff4e\170\uff4e" +
    "\001\002\000\006\003\062\143\063\001\002\000\044\003" +
    "\uff58\007\uff58\010\uff58\014\uff58\020\uff58\021\uff58\023\uff58" +
    "\025\uff58\026\uff58\032\uff58\033\uff58\050\uff58\150\uff58\155" +
    "\uff58\156\uff58\163\uff58\170\uff58\001\002\000\012\003\065" +
    "\025\031\026\012\033\021\001\002\000\006\003\130\152" +
    "\131\001\002\000\044\003\uff59\007\uff59\010\uff59\014\uff59" +
    "\020\uff59\021\uff59\023\uff59\025\uff59\026\uff59\032\uff59\033" +
    "\uff59\050\uff59\150\uff59\155\uff59\156\uff59\163\uff59\170\uff59" +
    "\001\002\000\032\003\103\103\071\104\113\105\067\106" +
    "\072\107\073\143\075\163\104\164\100\165\076\166\112" +
    "\167\111\001\002\000\032\003\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\143\uffb0\163\uffb0\164\uffb0\165\uffb0" +
    "\166\uffb0\167\uffb0\001\002\000\036\003\uffac\103\uffac\104" +
    "\uffac\105\uffac\106\uffac\107\uffac\143\uffac\144\uffac\152\uffac" +
    "\163\uffac\164\uffac\165\uffac\166\uffac\167\uffac\001\002\000" +
    "\032\003\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2" +
    "\143\uffb2\163\uffb2\164\uffb2\165\uffb2\166\uffb2\167\uffb2\001" +
    "\002\000\032\003\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf" +
    "\107\uffaf\143\uffaf\163\uffaf\164\uffaf\165\uffaf\166\uffaf\167" +
    "\uffaf\001\002\000\032\003\uffae\103\uffae\104\uffae\105\uffae" +
    "\106\uffae\107\uffae\143\uffae\163\uffae\164\uffae\165\uffae\166" +
    "\uffae\167\uffae\001\002\000\010\003\uff9e\144\uff9e\152\uff9e" +
    "\001\002\000\030\003\uffa7\103\uffa7\104\uffa7\105\uffa7\106" +
    "\uffa7\107\uffa7\163\uffa7\164\uffa7\165\uffa7\166\uffa7\167\uffa7" +
    "\001\002\000\050\003\uffb5\103\uffb5\104\uffb5\105\uffb5\106" +
    "\uffb5\107\uffb5\110\uffb5\111\uffb5\116\uffb5\117\uffb5\120\uffb5" +
    "\143\uffb5\144\uffb5\152\uffb5\163\uffb5\164\uffb5\165\uffb5\166" +
    "\uffb5\167\uffb5\001\002\000\004\003\117\001\002\000\050" +
    "\003\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110" +
    "\uffb6\111\uffb6\116\uffb6\117\uffb6\120\uffb6\143\uffb6\144\uffb6" +
    "\152\uffb6\163\uffb6\164\uffb6\165\uffb6\166\uffb6\167\uffb6\001" +
    "\002\000\022\003\uffa2\103\071\104\113\105\067\106\072" +
    "\107\073\144\uffa2\152\uffa2\001\002\000\036\003\uffad\103" +
    "\uffad\104\uffad\105\uffad\106\uffad\107\uffad\143\uffad\144\uffad" +
    "\152\uffad\163\uffad\164\uffad\165\uffad\166\uffad\167\uffad\001" +
    "\002\000\006\003\uff4b\152\uff4b\001\002\000\036\003\uffab" +
    "\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\143\uffab\144" +
    "\uffab\152\uffab\163\uffab\164\uffab\165\uffab\166\uffab\167\uffab" +
    "\001\002\000\030\003\121\103\071\104\113\105\067\106" +
    "\072\107\073\163\104\164\100\165\076\166\112\167\111" +
    "\001\002\000\036\003\uffa0\103\071\104\113\105\067\106" +
    "\072\107\073\143\075\144\uffa0\152\uffa0\163\104\164\100" +
    "\165\076\166\112\167\111\001\002\000\006\003\uff4c\152" +
    "\uff4c\001\002\000\036\003\uffa9\103\uffa9\104\uffa9\105\uffa9" +
    "\106\uffa9\107\uffa9\143\uffa9\144\uffa9\152\uffa9\163\uffa9\164" +
    "\uffa9\165\uffa9\166\uffa9\167\uffa9\001\002\000\060\003\uffb3" +
    "\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111" +
    "\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116\uffb3\117\uffb3" +
    "\120\uffb3\143\uffb3\144\uffb3\152\uffb3\163\uffb3\164\uffb3\165" +
    "\uffb3\166\uffb3\167\uffb3\001\002\000\060\003\uffb4\103\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112" +
    "\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4" +
    "\143\uffb4\144\uffb4\152\uffb4\163\uffb4\164\uffb4\165\uffb4\166" +
    "\uffb4\167\uffb4\001\002\000\032\003\uffb1\103\uffb1\104\uffb1" +
    "\105\uffb1\106\uffb1\107\uffb1\143\uffb1\163\uffb1\164\uffb1\165" +
    "\uffb1\166\uffb1\167\uffb1\001\002\000\010\003\uffa1\144\uffa1" +
    "\152\uffa1\001\002\000\016\003\117\163\104\164\100\165" +
    "\076\166\112\167\111\001\002\000\036\003\uffaa\103\uffaa" +
    "\104\uffaa\105\uffaa\106\uffaa\107\uffaa\143\uffaa\144\uffaa\152" +
    "\uffaa\163\uffaa\164\uffaa\165\uffaa\166\uffaa\167\uffaa\001\002" +
    "\000\036\003\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107" +
    "\uffa8\143\uffa8\144\uffa8\152\uffa8\163\uffa8\164\uffa8\165\uffa8" +
    "\166\uffa8\167\uffa8\001\002\000\020\003\122\103\071\104" +
    "\113\105\067\106\072\107\073\144\124\001\002\000\022" +
    "\003\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\144" +
    "\uffa4\152\uffa4\001\002\000\022\003\uffa5\103\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\144\uffa5\152\uffa5\001\002\000" +
    "\014\163\104\164\100\165\076\166\112\167\111\001\002" +
    "\000\022\003\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107" +
    "\uffa6\144\uffa6\152\uffa6\001\002\000\032\003\127\103\071" +
    "\104\113\105\067\106\072\107\073\143\075\163\104\164" +
    "\100\165\076\166\112\167\111\001\002\000\010\003\uffa3" +
    "\144\uffa3\152\uffa3\001\002\000\010\003\uff9f\144\uff9f\152" +
    "\uff9f\001\002\000\044\003\uff5a\007\uff5a\010\uff5a\014\uff5a" +
    "\020\uff5a\021\uff5a\023\uff5a\025\uff5a\026\uff5a\032\uff5a\033" +
    "\uff5a\050\uff5a\150\uff5a\155\uff5a\156\uff5a\163\uff5a\170\uff5a" +
    "\001\002\000\016\003\135\163\137\164\100\165\076\166" +
    "\112\167\111\001\002\000\006\003\173\152\174\001\002" +
    "\000\016\110\141\111\140\112\147\113\146\114\150\115" +
    "\152\001\002\000\016\110\141\111\140\112\147\113\146" +
    "\114\150\115\152\001\002\000\044\003\uff5b\007\uff5b\010" +
    "\uff5b\014\uff5b\020\uff5b\021\uff5b\023\uff5b\025\uff5b\026\uff5b" +
    "\032\uff5b\033\uff5b\050\uff5b\150\uff5b\155\uff5b\156\uff5b\163" +
    "\uff5b\170\uff5b\001\002\000\006\110\141\111\140\001\002" +
    "\000\032\003\uff94\110\uff94\111\uff94\112\uff94\113\uff94\114" +
    "\uff94\115\uff94\116\uff94\117\uff94\120\uff94\144\uff94\152\uff94" +
    "\001\002\000\016\003\uff9c\163\uff9c\164\uff9c\165\uff9c\166" +
    "\uff9c\167\uff9c\001\002\000\016\003\uff9d\163\uff9d\164\uff9d" +
    "\165\uff9d\166\uff9d\167\uff9d\001\002\000\012\003\144\163" +
    "\137\164\100\165\076\001\002\000\016\003\uff91\116\uff91" +
    "\117\uff91\120\uff91\144\uff91\152\uff91\001\002\000\016\003" +
    "\uff86\116\uff86\117\uff86\120\uff86\144\uff86\152\uff86\001\002" +
    "\000\016\003\uff90\116\uff90\117\uff90\120\uff90\144\uff90\152" +
    "\uff90\001\002\000\012\003\uff9b\163\uff9b\166\uff9b\167\uff9b" +
    "\001\002\000\012\003\uff9a\163\uff9a\166\uff9a\167\uff9a\001" +
    "\002\000\012\003\uff98\163\uff98\166\uff98\167\uff98\001\002" +
    "\000\012\003\160\163\137\166\112\167\111\001\002\000" +
    "\012\003\uff99\163\uff99\166\uff99\167\uff99\001\002\000\012" +
    "\003\155\163\137\166\112\167\111\001\002\000\016\003" +
    "\uff93\116\uff93\117\uff93\120\uff93\144\uff93\152\uff93\001\002" +
    "\000\016\003\uff88\116\uff88\117\uff88\120\uff88\144\uff88\152" +
    "\uff88\001\002\000\016\003\uff92\116\uff92\117\uff92\120\uff92" +
    "\144\uff92\152\uff92\001\002\000\016\003\uff8c\116\uff8c\117" +
    "\uff8c\120\uff8c\144\uff8c\152\uff8c\001\002\000\016\003\uff87" +
    "\116\uff87\117\uff87\120\uff87\144\uff87\152\uff87\001\002\000" +
    "\016\003\uff8b\116\uff8b\117\uff8b\120\uff8b\144\uff8b\152\uff8b" +
    "\001\002\000\012\003\171\163\137\166\112\167\111\001" +
    "\002\000\016\003\166\163\137\164\100\165\076\166\112" +
    "\167\111\001\002\000\016\003\uff8f\116\uff8f\117\uff8f\120" +
    "\uff8f\144\uff8f\152\uff8f\001\002\000\016\003\uff8e\116\uff8e" +
    "\117\uff8e\120\uff8e\144\uff8e\152\uff8e\001\002\000\016\003" +
    "\uff85\116\uff85\117\uff85\120\uff85\144\uff85\152\uff85\001\002" +
    "\000\016\003\uff8d\116\uff8d\117\uff8d\120\uff8d\144\uff8d\152" +
    "\uff8d\001\002\000\016\003\uff89\116\uff89\117\uff89\120\uff89" +
    "\144\uff89\152\uff89\001\002\000\016\003\uff84\116\uff84\117" +
    "\uff84\120\uff84\144\uff84\152\uff84\001\002\000\016\003\uff8a" +
    "\116\uff8a\117\uff8a\120\uff8a\144\uff8a\152\uff8a\001\002\000" +
    "\044\003\uff5c\007\uff5c\010\uff5c\014\uff5c\020\uff5c\021\uff5c" +
    "\023\uff5c\025\uff5c\026\uff5c\032\uff5c\033\uff5c\050\uff5c\150" +
    "\uff5c\155\uff5c\156\uff5c\163\uff5c\170\uff5c\001\002\000\032" +
    "\003\175\103\071\104\113\105\067\106\072\107\073\143" +
    "\075\163\104\164\100\165\076\166\112\167\111\001\002" +
    "\000\044\003\uff5d\007\uff5d\010\uff5d\014\uff5d\020\uff5d\021" +
    "\uff5d\023\uff5d\025\uff5d\026\uff5d\032\uff5d\033\uff5d\050\uff5d" +
    "\150\uff5d\155\uff5d\156\uff5d\163\uff5d\170\uff5d\001\002\000" +
    "\006\003\177\144\200\001\002\000\044\003\uff5e\007\uff5e" +
    "\010\uff5e\014\uff5e\020\uff5e\021\uff5e\023\uff5e\025\uff5e\026" +
    "\uff5e\032\uff5e\033\uff5e\050\uff5e\150\uff5e\155\uff5e\156\uff5e" +
    "\163\uff5e\170\uff5e\001\002\000\006\003\201\147\202\001" +
    "\002\000\044\003\uff5f\007\uff5f\010\uff5f\014\uff5f\020\uff5f" +
    "\021\uff5f\023\uff5f\025\uff5f\026\uff5f\032\uff5f\033\uff5f\050" +
    "\uff5f\150\uff5f\155\uff5f\156\uff5f\163\uff5f\170\uff5f\001\002" +
    "\000\040\003\204\007\022\010\054\014\016\020\023\021" +
    "\061\023\050\025\031\026\012\033\021\050\044\155\043" +
    "\156\042\163\056\170\013\001\002\000\006\003\205\150" +
    "\206\001\002\000\044\003\uff60\007\uff60\010\uff60\014\uff60" +
    "\020\uff60\021\uff60\023\uff60\025\uff60\026\uff60\032\uff60\033" +
    "\uff60\050\uff60\150\uff60\155\uff60\156\uff60\163\uff60\170\uff60" +
    "\001\002\000\044\003\uff61\007\uff61\010\uff61\014\uff61\020" +
    "\uff61\021\uff61\023\uff61\025\uff61\026\uff61\032\uff61\033\uff61" +
    "\050\uff61\150\uff61\155\uff61\156\uff61\163\uff61\170\uff61\001" +
    "\002\000\044\003\uff62\007\uff62\010\uff62\014\uff62\020\uff62" +
    "\021\uff62\023\uff62\025\uff62\026\uff62\032\uff62\033\uff62\050" +
    "\uff62\150\uff62\155\uff62\156\uff62\163\uff62\170\uff62\001\002" +
    "\000\032\003\215\103\071\104\113\105\067\106\072\107" +
    "\073\143\075\163\216\164\100\165\076\166\112\167\111" +
    "\001\002\000\006\003\uff7c\152\uff7c\001\002\000\040\003" +
    "\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\141" +
    "\111\140\143\uffac\152\uffac\163\uffac\164\uffac\165\uffac\166" +
    "\uffac\167\uffac\001\002\000\014\003\uff81\116\222\117\224" +
    "\120\221\152\uff81\001\002\000\050\003\uffad\103\uffad\104" +
    "\uffad\105\uffad\106\uffad\107\uffad\110\141\111\140\112\147" +
    "\113\146\114\150\115\152\143\uffad\152\uffad\163\uffad\164" +
    "\uffad\165\uffad\166\uffad\167\uffad\001\002\000\006\003\uff80" +
    "\152\uff80\001\002\000\006\003\uff7d\152\uff7d\001\002\000" +
    "\050\003\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab" +
    "\110\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94\143" +
    "\uffab\152\uffab\163\uffab\164\uffab\165\uffab\166\uffab\167\uffab" +
    "\001\002\000\006\003\uff7e\152\uff7e\001\002\000\006\003" +
    "\uff7f\152\uff7f\001\002\000\016\003\uff95\163\uff95\164\uff95" +
    "\165\uff95\166\uff95\167\uff95\001\002\000\016\003\uff97\163" +
    "\uff97\164\uff97\165\uff97\166\uff97\167\uff97\001\002\000\016" +
    "\003\226\163\137\164\100\165\076\166\112\167\111\001" +
    "\002\000\016\003\uff96\163\uff96\164\uff96\165\uff96\166\uff96" +
    "\167\uff96\001\002\000\010\003\uff83\144\uff83\152\uff83\001" +
    "\002\000\010\003\uff82\144\uff82\152\uff82\001\002\000\006" +
    "\003\264\163\265\001\002\000\006\003\254\163\255\001" +
    "\002\000\044\003\uffb7\007\uffb7\010\uffb7\014\uffb7\020\uffb7" +
    "\021\uffb7\023\uffb7\025\uffb7\026\uffb7\032\uffb7\033\uffb7\050" +
    "\uffb7\150\uffb7\155\uffb7\156\uffb7\163\uffb7\170\uffb7\001\002" +
    "\000\010\003\234\105\233\163\235\001\002\000\006\003" +
    "\244\163\245\001\002\000\044\003\uffb9\007\uffb9\010\uffb9" +
    "\014\uffb9\020\uffb9\021\uffb9\023\uffb9\025\uffb9\026\uffb9\032" +
    "\uffb9\033\uffb9\050\uffb9\150\uffb9\155\uffb9\156\uffb9\163\uffb9" +
    "\170\uffb9\001\002\000\006\003\237\121\236\001\002\000" +
    "\006\003\240\165\241\001\002\000\044\003\uffbd\007\uffbd" +
    "\010\uffbd\014\uffbd\020\uffbd\021\uffbd\023\uffbd\025\uffbd\026" +
    "\uffbd\032\uffbd\033\uffbd\050\uffbd\150\uffbd\155\uffbd\156\uffbd" +
    "\163\uffbd\170\uffbd\001\002\000\044\003\uffc1\007\uffc1\010" +
    "\uffc1\014\uffc1\020\uffc1\021\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\032\uffc1\033\uffc1\050\uffc1\150\uffc1\155\uffc1\156\uffc1\163" +
    "\uffc1\170\uffc1\001\002\000\006\003\242\152\243\001\002" +
    "\000\044\003\uffc5\007\uffc5\010\uffc5\014\uffc5\020\uffc5\021" +
    "\uffc5\023\uffc5\025\uffc5\026\uffc5\032\uffc5\033\uffc5\050\uffc5" +
    "\150\uffc5\155\uffc5\156\uffc5\163\uffc5\170\uffc5\001\002\000" +
    "\044\003\uffc9\007\uffc9\010\uffc9\014\uffc9\020\uffc9\021\uffc9" +
    "\023\uffc9\025\uffc9\026\uffc9\032\uffc9\033\uffc9\050\uffc9\150" +
    "\uffc9\155\uffc9\156\uffc9\163\uffc9\170\uffc9\001\002\000\044" +
    "\003\uffb8\007\uffb8\010\uffb8\014\uffb8\020\uffb8\021\uffb8\023" +
    "\uffb8\025\uffb8\026\uffb8\032\uffb8\033\uffb8\050\uffb8\150\uffb8" +
    "\155\uffb8\156\uffb8\163\uffb8\170\uffb8\001\002\000\006\003" +
    "\247\121\246\001\002\000\006\003\250\164\251\001\002" +
    "\000\044\003\uffbc\007\uffbc\010\uffbc\014\uffbc\020\uffbc\021" +
    "\uffbc\023\uffbc\025\uffbc\026\uffbc\032\uffbc\033\uffbc\050\uffbc" +
    "\150\uffbc\155\uffbc\156\uffbc\163\uffbc\170\uffbc\001\002\000" +
    "\044\003\uffc0\007\uffc0\010\uffc0\014\uffc0\020\uffc0\021\uffc0" +
    "\023\uffc0\025\uffc0\026\uffc0\032\uffc0\033\uffc0\050\uffc0\150" +
    "\uffc0\155\uffc0\156\uffc0\163\uffc0\170\uffc0\001\002\000\006" +
    "\003\252\152\253\001\002\000\044\003\uffc4\007\uffc4\010" +
    "\uffc4\014\uffc4\020\uffc4\021\uffc4\023\uffc4\025\uffc4\026\uffc4" +
    "\032\uffc4\033\uffc4\050\uffc4\150\uffc4\155\uffc4\156\uffc4\163" +
    "\uffc4\170\uffc4\001\002\000\044\003\uffc8\007\uffc8\010\uffc8" +
    "\014\uffc8\020\uffc8\021\uffc8\023\uffc8\025\uffc8\026\uffc8\032" +
    "\uffc8\033\uffc8\050\uffc8\150\uffc8\155\uffc8\156\uffc8\163\uffc8" +
    "\170\uffc8\001\002\000\044\003\uffbb\007\uffbb\010\uffbb\014" +
    "\uffbb\020\uffbb\021\uffbb\023\uffbb\025\uffbb\026\uffbb\032\uffbb" +
    "\033\uffbb\050\uffbb\150\uffbb\155\uffbb\156\uffbb\163\uffbb\170" +
    "\uffbb\001\002\000\006\003\257\121\256\001\002\000\006" +
    "\003\260\166\261\001\002\000\044\003\uffbf\007\uffbf\010" +
    "\uffbf\014\uffbf\020\uffbf\021\uffbf\023\uffbf\025\uffbf\026\uffbf" +
    "\032\uffbf\033\uffbf\050\uffbf\150\uffbf\155\uffbf\156\uffbf\163" +
    "\uffbf\170\uffbf\001\002\000\044\003\uffc3\007\uffc3\010\uffc3" +
    "\014\uffc3\020\uffc3\021\uffc3\023\uffc3\025\uffc3\026\uffc3\032" +
    "\uffc3\033\uffc3\050\uffc3\150\uffc3\155\uffc3\156\uffc3\163\uffc3" +
    "\170\uffc3\001\002\000\006\003\262\152\263\001\002\000" +
    "\044\003\uffc7\007\uffc7\010\uffc7\014\uffc7\020\uffc7\021\uffc7" +
    "\023\uffc7\025\uffc7\026\uffc7\032\uffc7\033\uffc7\050\uffc7\150" +
    "\uffc7\155\uffc7\156\uffc7\163\uffc7\170\uffc7\001\002\000\044" +
    "\003\uffcb\007\uffcb\010\uffcb\014\uffcb\020\uffcb\021\uffcb\023" +
    "\uffcb\025\uffcb\026\uffcb\032\uffcb\033\uffcb\050\uffcb\150\uffcb" +
    "\155\uffcb\156\uffcb\163\uffcb\170\uffcb\001\002\000\044\003" +
    "\uffba\007\uffba\010\uffba\014\uffba\020\uffba\021\uffba\023\uffba" +
    "\025\uffba\026\uffba\032\uffba\033\uffba\050\uffba\150\uffba\155" +
    "\uffba\156\uffba\163\uffba\170\uffba\001\002\000\006\003\267" +
    "\121\266\001\002\000\006\003\270\167\271\001\002\000" +
    "\044\003\uffbe\007\uffbe\010\uffbe\014\uffbe\020\uffbe\021\uffbe" +
    "\023\uffbe\025\uffbe\026\uffbe\032\uffbe\033\uffbe\050\uffbe\150" +
    "\uffbe\155\uffbe\156\uffbe\163\uffbe\170\uffbe\001\002\000\044" +
    "\003\uffc2\007\uffc2\010\uffc2\014\uffc2\020\uffc2\021\uffc2\023" +
    "\uffc2\025\uffc2\026\uffc2\032\uffc2\033\uffc2\050\uffc2\150\uffc2" +
    "\155\uffc2\156\uffc2\163\uffc2\170\uffc2\001\002\000\006\003" +
    "\272\152\273\001\002\000\044\003\uffc6\007\uffc6\010\uffc6" +
    "\014\uffc6\020\uffc6\021\uffc6\023\uffc6\025\uffc6\026\uffc6\032" +
    "\uffc6\033\uffc6\050\uffc6\150\uffc6\155\uffc6\156\uffc6\163\uffc6" +
    "\170\uffc6\001\002\000\044\003\uffca\007\uffca\010\uffca\014" +
    "\uffca\020\uffca\021\uffca\023\uffca\025\uffca\026\uffca\032\uffca" +
    "\033\uffca\050\uffca\150\uffca\155\uffca\156\uffca\163\uffca\170" +
    "\uffca\001\002\000\044\003\uff4d\007\uff4d\010\uff4d\014\uff4d" +
    "\020\uff4d\021\uff4d\023\uff4d\025\uff4d\026\uff4d\032\uff4d\033" +
    "\uff4d\050\uff4d\150\uff4d\155\uff4d\156\uff4d\163\uff4d\170\uff4d" +
    "\001\002\000\044\003\uff51\007\uff51\010\uff51\014\uff51\020" +
    "\uff51\021\uff51\023\uff51\025\uff51\026\uff51\032\uff51\033\uff51" +
    "\050\uff51\150\uff51\155\uff51\156\uff51\163\uff51\170\uff51\001" +
    "\002\000\010\003\uff57\032\uff57\150\uff57\001\002\000\044" +
    "\003\uff6a\007\uff6a\010\uff6a\014\uff6a\020\uff6a\021\uff6a\023" +
    "\uff6a\025\uff6a\026\uff6a\032\uff6a\033\uff6a\050\uff6a\150\uff6a" +
    "\155\uff6a\156\uff6a\163\uff6a\170\uff6a\001\002\000\016\003" +
    "\304\163\305\164\100\165\076\166\112\167\111\001\002" +
    "\000\014\003\uff78\116\222\117\224\120\221\144\uff78\001" +
    "\002\000\006\003\uff77\144\uff77\001\002\000\006\003\306" +
    "\144\307\001\002\000\044\003\uff6b\007\uff6b\010\uff6b\014" +
    "\uff6b\020\uff6b\021\uff6b\023\uff6b\025\uff6b\026\uff6b\032\uff6b" +
    "\033\uff6b\050\uff6b\150\uff6b\155\uff6b\156\uff6b\163\uff6b\170" +
    "\uff6b\001\002\000\022\003\uff76\110\uff94\111\uff94\112\uff94" +
    "\113\uff94\114\uff94\115\uff94\144\uff76\001\002\000\044\003" +
    "\uff6c\007\uff6c\010\uff6c\014\uff6c\020\uff6c\021\uff6c\023\uff6c" +
    "\025\uff6c\026\uff6c\032\uff6c\033\uff6c\050\uff6c\150\uff6c\155" +
    "\uff6c\156\uff6c\163\uff6c\170\uff6c\001\002\000\006\003\310" +
    "\147\311\001\002\000\044\003\uff6d\007\uff6d\010\uff6d\014" +
    "\uff6d\020\uff6d\021\uff6d\023\uff6d\025\uff6d\026\uff6d\032\uff6d" +
    "\033\uff6d\050\uff6d\150\uff6d\155\uff6d\156\uff6d\163\uff6d\170" +
    "\uff6d\001\002\000\040\003\313\007\022\010\054\014\016" +
    "\020\023\021\061\023\050\025\031\026\012\033\021\050" +
    "\044\155\043\156\042\163\056\170\013\001\002\000\006" +
    "\003\314\150\315\001\002\000\044\003\uff6e\007\uff6e\010" +
    "\uff6e\014\uff6e\020\uff6e\021\uff6e\023\uff6e\025\uff6e\026\uff6e" +
    "\032\uff6e\033\uff6e\050\uff6e\150\uff6e\155\uff6e\156\uff6e\163" +
    "\uff6e\170\uff6e\001\002\000\044\003\uff6f\007\uff6f\010\uff6f" +
    "\014\uff6f\020\uff6f\021\uff6f\023\uff6f\025\uff6f\026\uff6f\032" +
    "\uff6f\033\uff6f\050\uff6f\150\uff6f\155\uff6f\156\uff6f\163\uff6f" +
    "\170\uff6f\001\002\000\046\003\uff74\007\uff74\010\uff74\014" +
    "\uff74\015\316\020\uff74\021\uff74\023\uff74\025\uff74\026\uff74" +
    "\032\uff74\033\uff74\050\uff74\150\uff74\155\uff74\156\uff74\163" +
    "\uff74\170\uff74\001\002\000\006\003\uff75\147\uff75\001\002" +
    "\000\006\003\320\147\321\001\002\000\044\003\uff70\007" +
    "\uff70\010\uff70\014\uff70\020\uff70\021\uff70\023\uff70\025\uff70" +
    "\026\uff70\032\uff70\033\uff70\050\uff70\150\uff70\155\uff70\156" +
    "\uff70\163\uff70\170\uff70\001\002\000\040\003\323\007\022" +
    "\010\054\014\016\020\023\021\061\023\050\025\031\026" +
    "\012\033\021\050\044\155\043\156\042\163\056\170\013" +
    "\001\002\000\006\003\324\150\325\001\002\000\044\003" +
    "\uff71\007\uff71\010\uff71\014\uff71\020\uff71\021\uff71\023\uff71" +
    "\025\uff71\026\uff71\032\uff71\033\uff71\050\uff71\150\uff71\155" +
    "\uff71\156\uff71\163\uff71\170\uff71\001\002\000\044\003\uff72" +
    "\007\uff72\010\uff72\014\uff72\020\uff72\021\uff72\023\uff72\025" +
    "\uff72\026\uff72\032\uff72\033\uff72\050\uff72\150\uff72\155\uff72" +
    "\156\uff72\163\uff72\170\uff72\001\002\000\044\003\uff73\007" +
    "\uff73\010\uff73\014\uff73\020\uff73\021\uff73\023\uff73\025\uff73" +
    "\026\uff73\032\uff73\033\uff73\050\uff73\150\uff73\155\uff73\156" +
    "\uff73\163\uff73\170\uff73\001\002\000\004\003\336\001\002" +
    "\000\010\003\333\151\332\152\334\001\002\000\044\003" +
    "\uffcc\007\uffcc\010\uffcc\014\uffcc\020\uffcc\021\uffcc\023\uffcc" +
    "\025\uffcc\026\uffcc\032\uffcc\033\uffcc\050\uffcc\150\uffcc\155" +
    "\uffcc\156\uffcc\163\uffcc\170\uffcc\001\002\000\010\003\uffd4" +
    "\151\uffd4\152\uffd4\001\002\000\004\163\335\001\002\000" +
    "\044\003\uffcd\007\uffcd\010\uffcd\014\uffcd\020\uffcd\021\uffcd" +
    "\023\uffcd\025\uffcd\026\uffcd\032\uffcd\033\uffcd\050\uffcd\150" +
    "\uffcd\155\uffcd\156\uffcd\163\uffcd\170\uffcd\001\002\000\044" +
    "\003\uffce\007\uffce\010\uffce\014\uffce\020\uffce\021\uffce\023" +
    "\uffce\025\uffce\026\uffce\032\uffce\033\uffce\050\uffce\150\uffce" +
    "\155\uffce\156\uffce\163\uffce\170\uffce\001\002\000\010\003" +
    "\uffd5\151\uffd5\152\uffd5\001\002\000\010\003\uffd3\151\uffd3" +
    "\152\uffd3\001\002\000\022\007\ufff6\014\ufff6\020\ufff6\025" +
    "\ufff6\026\ufff6\033\ufff6\046\ufff6\170\ufff6\001\002\000\044" +
    "\003\uff63\007\uff63\010\uff63\014\uff63\020\uff63\021\uff63\023" +
    "\uff63\025\uff63\026\uff63\032\uff63\033\uff63\050\uff63\150\uff63" +
    "\155\uff63\156\uff63\163\uff63\170\uff63\001\002\000\016\003" +
    "\343\163\137\164\100\165\076\166\112\167\111\001\002" +
    "\000\006\003\344\144\345\001\002\000\044\003\uff64\007" +
    "\uff64\010\uff64\014\uff64\020\uff64\021\uff64\023\uff64\025\uff64" +
    "\026\uff64\032\uff64\033\uff64\050\uff64\150\uff64\155\uff64\156" +
    "\uff64\163\uff64\170\uff64\001\002\000\044\003\uff65\007\uff65" +
    "\010\uff65\014\uff65\020\uff65\021\uff65\023\uff65\025\uff65\026" +
    "\uff65\032\uff65\033\uff65\050\uff65\150\uff65\155\uff65\156\uff65" +
    "\163\uff65\170\uff65\001\002\000\006\003\346\147\347\001" +
    "\002\000\044\003\uff66\007\uff66\010\uff66\014\uff66\020\uff66" +
    "\021\uff66\023\uff66\025\uff66\026\uff66\032\uff66\033\uff66\050" +
    "\uff66\150\uff66\155\uff66\156\uff66\163\uff66\170\uff66\001\002" +
    "\000\040\003\351\007\022\010\054\014\016\020\023\021" +
    "\061\023\050\025\031\026\012\033\021\050\044\155\043" +
    "\156\042\163\056\170\013\001\002\000\006\003\352\150" +
    "\353\001\002\000\044\003\uff67\007\uff67\010\uff67\014\uff67" +
    "\020\uff67\021\uff67\023\uff67\025\uff67\026\uff67\032\uff67\033" +
    "\uff67\050\uff67\150\uff67\155\uff67\156\uff67\163\uff67\170\uff67" +
    "\001\002\000\044\003\uff68\007\uff68\010\uff68\014\uff68\020" +
    "\uff68\021\uff68\023\uff68\025\uff68\026\uff68\032\uff68\033\uff68" +
    "\050\uff68\150\uff68\155\uff68\156\uff68\163\uff68\170\uff68\001" +
    "\002\000\044\003\uff69\007\uff69\010\uff69\014\uff69\020\uff69" +
    "\021\uff69\023\uff69\025\uff69\026\uff69\032\uff69\033\uff69\050" +
    "\uff69\150\uff69\155\uff69\156\uff69\163\uff69\170\uff69\001\002" +
    "\000\010\003\uff54\032\uff54\150\uff54\001\002\000\010\003" +
    "\uff55\032\uff55\150\uff55\001\002\000\010\003\ufffc\144\ufffc" +
    "\151\ufffc\001\002\000\010\003\ufffb\144\ufffb\151\ufffb\001" +
    "\002\000\036\007\022\010\054\014\016\020\023\021\061" +
    "\023\050\025\031\026\012\033\021\050\044\155\043\156" +
    "\042\163\056\170\013\001\002\000\004\150\362\001\002" +
    "\000\022\007\ufff5\014\ufff5\020\ufff5\025\ufff5\026\ufff5\033" +
    "\ufff5\046\ufff5\170\ufff5\001\002\000\010\003\ufff9\144\ufff9" +
    "\151\ufff9\001\002\000\004\143\365\001\002\000\022\007" +
    "\022\014\016\020\023\025\031\026\012\033\021\144\366" +
    "\170\013\001\002\000\004\147\377\001\002\000\006\144" +
    "\370\151\036\001\002\000\004\147\371\001\002\000\036" +
    "\007\022\010\054\014\016\020\023\021\061\023\050\025" +
    "\031\026\012\033\021\050\044\155\043\156\042\163\056" +
    "\170\013\001\002\000\004\032\373\001\002\000\004\163" +
    "\374\001\002\000\004\152\375\001\002\000\004\150\376" +
    "\001\002\000\022\007\ufff8\014\ufff8\020\ufff8\025\ufff8\026" +
    "\ufff8\033\ufff8\046\ufff8\170\ufff8\001\002\000\036\007\022" +
    "\010\054\014\016\020\023\021\061\023\050\025\031\026" +
    "\012\033\021\050\044\155\043\156\042\163\056\170\013" +
    "\001\002\000\004\032\u0101\001\002\000\004\163\u0102\001" +
    "\002\000\004\152\u0103\001\002\000\004\150\u0104\001\002" +
    "\000\022\007\ufff7\014\ufff7\020\ufff7\025\ufff7\026\ufff7\033" +
    "\ufff7\046\ufff7\170\ufff7\001\002\000\022\007\uffe0\014\uffe0" +
    "\020\uffe0\025\uffe0\026\uffe0\033\uffe0\046\uffe0\170\uffe0\001" +
    "\002\000\006\003\u0107\143\u0108\001\002\000\022\007\uffe1" +
    "\014\uffe1\020\uffe1\025\uffe1\026\uffe1\033\uffe1\046\uffe1\170" +
    "\uffe1\001\002\000\024\003\u010a\007\022\014\016\020\023" +
    "\025\031\026\012\033\021\144\u0109\170\013\001\002\000" +
    "\004\147\u0114\001\002\000\022\007\uffe2\014\uffe2\020\uffe2" +
    "\025\uffe2\026\uffe2\033\uffe2\046\uffe2\170\uffe2\001\002\000" +
    "\010\003\u010c\144\u010d\151\036\001\002\000\022\007\uffe3" +
    "\014\uffe3\020\uffe3\025\uffe3\026\uffe3\033\uffe3\046\uffe3\170" +
    "\uffe3\001\002\000\006\003\u010e\147\u010f\001\002\000\022" +
    "\007\uffe4\014\uffe4\020\uffe4\025\uffe4\026\uffe4\033\uffe4\046" +
    "\uffe4\170\uffe4\001\002\000\040\003\u0111\007\022\010\054" +
    "\014\016\020\023\021\061\023\050\025\031\026\012\033" +
    "\021\050\044\155\043\156\042\163\056\170\013\001\002" +
    "\000\006\003\u0112\150\u0113\001\002\000\022\007\uffe5\014" +
    "\uffe5\020\uffe5\025\uffe5\026\uffe5\033\uffe5\046\uffe5\170\uffe5" +
    "\001\002\000\022\007\uffe6\014\uffe6\020\uffe6\025\uffe6\026" +
    "\uffe6\033\uffe6\046\uffe6\170\uffe6\001\002\000\022\007\ufff2" +
    "\014\ufff2\020\ufff2\025\ufff2\026\ufff2\033\ufff2\046\ufff2\170" +
    "\ufff2\001\002\000\036\007\022\010\054\014\016\020\023" +
    "\021\061\023\050\025\031\026\012\033\021\050\044\155" +
    "\043\156\042\163\056\170\013\001\002\000\004\150\u0116" +
    "\001\002\000\022\007\ufff1\014\ufff1\020\ufff1\025\ufff1\026" +
    "\ufff1\033\ufff1\046\ufff1\170\ufff1\001\002\000\022\007\uffe7" +
    "\014\uffe7\020\uffe7\025\uffe7\026\uffe7\033\uffe7\046\uffe7\170" +
    "\uffe7\001\002\000\006\003\u0119\143\u011a\001\002\000\022" +
    "\007\uffe8\014\uffe8\020\uffe8\025\uffe8\026\uffe8\033\uffe8\046" +
    "\uffe8\170\uffe8\001\002\000\024\003\u011c\007\022\014\016" +
    "\020\023\025\031\026\012\033\021\144\u011b\170\013\001" +
    "\002\000\004\147\u012c\001\002\000\022\007\uffe9\014\uffe9" +
    "\020\uffe9\025\uffe9\026\uffe9\033\uffe9\046\uffe9\170\uffe9\001" +
    "\002\000\010\003\u011e\144\u011f\151\036\001\002\000\022" +
    "\007\uffea\014\uffea\020\uffea\025\uffea\026\uffea\033\uffea\046" +
    "\uffea\170\uffea\001\002\000\006\003\u0120\147\u0121\001\002" +
    "\000\022\007\uffeb\014\uffeb\020\uffeb\025\uffeb\026\uffeb\033" +
    "\uffeb\046\uffeb\170\uffeb\001\002\000\040\003\u0123\007\022" +
    "\010\054\014\016\020\023\021\061\023\050\025\031\026" +
    "\012\033\021\050\044\155\043\156\042\163\056\170\013" +
    "\001\002\000\006\003\u0125\032\u0124\001\002\000\022\007" +
    "\uffec\014\uffec\020\uffec\025\uffec\026\uffec\033\uffec\046\uffec" +
    "\170\uffec\001\002\000\006\003\u0126\163\u0127\001\002\000" +
    "\022\007\uffed\014\uffed\020\uffed\025\uffed\026\uffed\033\uffed" +
    "\046\uffed\170\uffed\001\002\000\022\007\uffee\014\uffee\020" +
    "\uffee\025\uffee\026\uffee\033\uffee\046\uffee\170\uffee\001\002" +
    "\000\006\003\u0128\152\u0129\001\002\000\022\007\uffef\014" +
    "\uffef\020\uffef\025\uffef\026\uffef\033\uffef\046\uffef\170\uffef" +
    "\001\002\000\006\003\u012a\150\u012b\001\002\000\022\007" +
    "\ufff0\014\ufff0\020\ufff0\025\ufff0\026\ufff0\033\ufff0\046\ufff0" +
    "\170\ufff0\001\002\000\022\007\ufff4\014\ufff4\020\ufff4\025" +
    "\ufff4\026\ufff4\033\ufff4\046\ufff4\170\ufff4\001\002\000\036" +
    "\007\022\010\054\014\016\020\023\021\061\023\050\025" +
    "\031\026\012\033\021\050\044\155\043\156\042\163\056" +
    "\170\013\001\002\000\004\032\u012e\001\002\000\004\163" +
    "\u012f\001\002\000\004\152\u0130\001\002\000\004\150\u0131" +
    "\001\002\000\022\007\ufff3\014\ufff3\020\ufff3\025\ufff3\026" +
    "\ufff3\033\ufff3\046\ufff3\170\ufff3\001\002\000\004\143\u0133" +
    "\001\002\000\004\144\u0134\001\002\000\004\147\u0135\001" +
    "\002\000\036\007\022\010\054\014\016\020\023\021\061" +
    "\023\050\025\031\026\012\033\021\050\044\155\043\156" +
    "\042\163\056\170\013\001\002\000\004\032\u0137\001\002" +
    "\000\004\166\u0138\001\002\000\004\152\u0139\001\002\000" +
    "\004\150\u013a\001\002\000\004\002\uffdf\001\002\000\004" +
    "\002\001\001\002\000\004\163\u013d\001\002\000\004\141" +
    "\u013e\001\002\000\004\163\u013f\001\002\000\004\113\u0140" +
    "\001\002\000\024\007\ufffd\014\ufffd\020\ufffd\025\ufffd\026" +
    "\ufffd\033\ufffd\046\ufffd\062\004\170\ufffd\001\002\000\022" +
    "\007\ufffe\014\ufffe\020\ufffe\025\ufffe\026\ufffe\033\ufffe\046" +
    "\ufffe\170\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013f\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\016\006\017\007\010" +
    "\010\006\011\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\025\007\023\010\006\011\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\031\010\006\011\013\012" +
    "\034\013\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\031\010\006\011\013\013\355\001\001\000\002" +
    "\001\001\000\032\007\046\010\006\011\013\015\056\016" +
    "\057\037\051\040\040\041\044\042\054\043\052\044\045" +
    "\045\050\001\001\000\002\001\001\000\032\007\046\010" +
    "\006\011\013\015\056\016\057\037\051\040\040\041\044" +
    "\042\054\043\052\044\354\045\050\001\001\000\032\007" +
    "\046\010\006\011\013\015\056\016\057\037\051\040\040" +
    "\041\044\042\054\043\052\044\353\045\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\326\001\001\000\002\001\001\000\032\007\046\010" +
    "\006\011\013\015\056\016\057\037\051\040\040\041\044" +
    "\042\054\043\052\044\275\045\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\226\011\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\065\046\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\017\101\020\067\022\076\026\107\027\105" +
    "\030\100\031\104\032\073\035\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\101\020\067\022\076\026\107" +
    "\027\117\001\001\000\022\017\101\020\067\022\114\026" +
    "\107\027\105\030\100\031\104\032\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\101" +
    "\020\067\026\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\101\020\067\026\115\001\001\000" +
    "\002\001\001\000\022\017\101\020\067\022\076\026\107" +
    "\027\105\030\100\031\104\032\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\133" +
    "\020\135\021\132\033\131\001\001\000\002\001\001\000" +
    "\006\023\162\024\161\001\001\000\006\023\152\024\150" +
    "\001\001\000\002\001\001\000\004\023\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\142\021\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\156\021\160\001\001\000" +
    "\002\001\001\000\006\017\153\021\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\167" +
    "\021\171\001\001\000\010\017\164\020\166\021\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\017\101\020\067" +
    "\022\076\026\107\027\105\030\100\031\104\032\073\035" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\046\010\006\011\013\015\056\016\057\037\051\040\040" +
    "\041\044\042\054\043\052\044\202\045\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\017\212\020\210\021\132\022\076\026" +
    "\107\027\105\030\100\031\104\032\073\033\211\034\213" +
    "\035\217\036\216\001\001\000\002\001\001\000\004\023" +
    "\141\001\001\000\004\025\222\001\001\000\006\023\152" +
    "\024\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\133\020\135\021" +
    "\132\033\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\133\020\135\021\132\033\300\034\301\051\302" +
    "\001\001\000\004\025\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\046\010\006\011\013\015\056\016\057\037\051\040\040" +
    "\041\044\042\054\043\052\044\311\045\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\046\010\006\011\013\015\056" +
    "\016\057\037\051\040\040\041\044\042\054\043\052\044" +
    "\321\045\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\133\020\135\021\132\033\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\046\010\006\011" +
    "\013\015\056\016\057\037\051\040\040\041\044\042\054" +
    "\043\052\044\347\045\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\046\010\006\011\013\015\056\016\057" +
    "\037\051\040\040\041\044\042\054\043\052\044\360\045" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\031\010\006\011" +
    "\013\012\366\013\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\046\010\006\011" +
    "\013\015\056\016\057\037\051\040\040\041\044\042\054" +
    "\043\052\044\371\045\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\046\010\006\011\013\015\056\016" +
    "\057\037\051\040\040\041\044\042\054\043\052\044\377" +
    "\045\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\031\010\006\011\013\012\u010a\013\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\046" +
    "\010\006\011\013\015\056\016\057\037\051\040\040\041" +
    "\044\042\054\043\052\044\u010f\045\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\046\010\006\011\013\015\056\016\057" +
    "\037\051\040\040\041\044\042\054\043\052\044\u0114\045" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\031\010\006\011\013\012\u011c\013\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\046" +
    "\010\006\011\013\015\056\016\057\037\051\040\040\041" +
    "\044\042\054\043\052\044\u0121\045\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\046\010\006\011\013\015\056\016\057\037\051" +
    "\040\040\041\044\042\054\043\052\044\u012c\045\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\046\010\006" +
    "\011\013\015\056\016\057\037\051\040\040\041\044\042" +
    "\054\043\052\044\u0135\045\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u0140\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolosC tabla = new TablaSimbolosC();
    public static GeneradorCodigoIntermedio cIntermedio = new GeneradorCodigoIntermedio();
    public static SimboloC simbolo;
    public static String tipoDato = "";
    public static String resultado = "";
    public static String resultadoExpresion = "";
    public static String resultadoParcial = "";
    public static String tipoActual = "";
    public static boolean booltexto = false;
    public static boolean boolchar = false;
    public static boolean boolint = false;
    public static boolean boolfloat = false;
    public static boolean boolbool = false;
    public static boolean boolcondicion = true;
    public static int cTemp = 1;
    public static int cLinea = 1;
    public static int cLineaTemp = 1;

    public static String directorioActual = System.getProperty("user.dir");
    public static String rutaArchivo = directorioActual + File.separator + "CodigoIntermedio.txt";

    /*Para guardar valores de variables formato string*/
    public static Stack<StringBuilder> stack = new Stack<StringBuilder>() {{
        push(new StringBuilder());
    }};
    public static Stack<StringBuilder> stack2 = new Stack<StringBuilder>() {{
        push(new StringBuilder());
    }};

    public static boolean esCompatible(boolean booltexto, boolean boolchar, boolean boolint, boolean boolfloat, boolean boolbool){
        int count = 0;
        if(booltexto){ count = count+1;}
        if(boolchar){ count = count+1;}
        if(boolint){ count = count+1;}
        if(boolfloat){ count = count+1;}
        if(boolbool){ count = count+1;}

        if(count != 1){
            return false;
        } else {
            return true;
        }
    }

    public static void reseteoDatos(){
        resultado = "";
        tipoActual = ""; 
        booltexto = false; 
        boolchar = false; 
        boolint = false; 
        boolfloat = false;
        boolbool = false; 
        stack.clear();
        stack.push(new StringBuilder());
        stack2.clear();
        stack2.push(new StringBuilder());
    }
    
    public static void reglaIdentificador(String id){
        if(boolcondicion){
            SimboloC simboloComparacion = tabla.obtenerSimbolo(id);
            stack.peek().append(simboloComparacion.getValor());
            switch (simboloComparacion.getTipo()){
                case "char*":
                    booltexto = true;
                    break;
                case "char":
                    boolchar = true;
                    break;
                case "int":
                    boolint = true;
                    break;
                case "float":
                    boolfloat = true;
                    break;
                case "bool":
                    boolbool = true;
                    break;
                default:
                    booltexto = true;
                    boolchar = true;
                    boolint = true;
                    boolfloat = true;
                    boolbool = true;
                    System.err.println("[SCASE-ERROR] Nos topamos con un identicador que tiene un tipo de dato desconocido.");
                    break;
            }
        }
        stack2.peek().append(id);
    }

    public static void generarCI(String expresion){
        cTemp = cIntermedio.generarCodigoIntermedio(expresion, cTemp);
    }

    public static void actualizarCI(String texto){
        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(rutaArchivo, true)))) {
            out.println(texto);
            System.out.println("Codigo intermedio agregado a: " + rutaArchivo);
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }
    }
    @Override
    public void syntax_error(Symbol s){
        System.err.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserC$actions {
  private final ParserC parser;

  /** Constructor */
  CUP$ParserC$actions(ParserC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserC$do_action(
    int                        CUP$ParserC$act_num,
    java_cup.runtime.lr_parser CUP$ParserC$parser,
    java.util.Stack            CUP$ParserC$stack,
    int                        CUP$ParserC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserC$result;

      /* select the action based on the action number */
      switch (CUP$ParserC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // inicializacion ::= lista_tipo_entero error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("inicializacion",36, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // inicializacion ::= lista_tipo_entero operaciones_validas1 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("inicializacion",36, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sentencia ::= operaciones error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sentencia ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // sentencia ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // sentencia ::= operaciones PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // bloque ::= COMENTARIOUNILINEA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // bloque ::= COMENTARIOMULTILINEA 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // bloque ::= COMENTARIOUNILINEA bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // bloque ::= COMENTARIOMULTILINEA bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // bloque ::= sentencia bloque 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // sentencia_for ::= FOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sentencia_for ::= FOR PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentencia_for ::= FOR PARENTESIS_IZQ inicializacion PUNTO_Y_COMA operacion_relacional PUNTO_Y_COMA operaciones_validas1 PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  System.out.println("[AS-EC-FOR] Esta es una estructura de control FOR"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_for",33, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentencia_while ::= WHILE error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentencia_while ::= WHILE PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentencia_while ::= WHILE PARENTESIS_IZQ operacion_relacional PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  System.out.println("[AS-EC-WHILE] Esta es una estructura de control WHILE"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_while",32, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentencia_if ::= IF error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentencia_if ::= IF PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sentencia_if ::= IF PARENTESIS_IZQ condicion error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentencia_if ::= IF PARENTESIS_IZQ condicion PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentencia_if ::= IF PARENTESIS_IZQ condicion PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencia_if ::= IF PARENTESIS_IZQ condicion PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencia_if ::= IF PARENTESIS_IZQ condicion PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER condicion_false error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia_if ::= IF PARENTESIS_IZQ condicion PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER condicion_false LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia_if ::= IF PARENTESIS_IZQ condicion PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER condicion_false LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia_if ::= IF PARENTESIS_IZQ condicion PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER condicion_false LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		  
                    parser.actualizarCI("goto L"+parser.cLinea);        /*Termina Linea False*/
                  /*parser.actualizarCI("*Termina sentencia IF ELSE*"); */
                    parser.cLinea = parser.cLinea + 1;                  
                    parser.actualizarCI("L"+parser.cLineaTemp+":");     /*Termina IF ELSE*/
                    parser.cLineaTemp = parser.cLineaTemp + 1;

                    parser.boolcondicion = true;
                    System.out.println("[AS-EC-IF] Esta es una estructura de control IF ELSE");
                    parser.reseteoDatos(); 
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia_if ::= IF PARENTESIS_IZQ condicion PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		     
                    parser.actualizarCI("goto L"+parser.cLinea);    /*Termina Linea True*/
                    parser.actualizarCI("L"+parser.cLineaTemp+":"); /*Empieza Linea False*/
                    parser.cLineaTemp = parser.cLineaTemp + 1;      
                    parser.actualizarCI("goto L"+parser.cLinea);    /*Termina Linea False*/
                  /*parser.actualizarCI("*Termina sentencia IF*");*/
                    parser.cLinea = parser.cLinea + 1;     
                    parser.actualizarCI("L"+parser.cLineaTemp+":"); /*Termina IF*/
                    parser.cLineaTemp = parser.cLineaTemp + 1;

                    parser.boolcondicion = true;
                    System.out.println("[AS-EC-IF] Esta es una estructura de control IF"); 
                    parser.reseteoDatos();
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // condicion_false ::= ELSE 
            {
              Object RESULT =null;
		
                    parser.actualizarCI("goto L"+parser.cLinea);    /*Termina Linea True*/

                    if(parser.boolcondicion == true){
                        parser.boolcondicion = false;
                    } else{
                        parser.boolcondicion = true;
                    }
                    parser.actualizarCI("L"+parser.cLineaTemp+":"); /*Empieza Linea False*/
                    parser.cLineaTemp = parser.cLineaTemp + 1;                   
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("condicion_false",40, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // condicion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		
                System.out.println("[[Condicion Identificador:]]");
                SimboloC simbolo = parser.tabla.obtenerSimbolo(id);
                if (simbolo != null) {
                    parser.tipoActual = simbolo.getTipo();
                    if(parser.tipoActual == "bool"){
                        parser.stack.peek().append(id);
                        if(simbolo.getValor() == "false") {
                            parser.boolcondicion = false;
                        }
                    } else { System.err.println("[ASEM-ERR] '"+id+"' debe ser tipo '_Bool'."); }
                } else { System.err.println("[ASEM-ERR] '"+id+"' no fué declarado."); }

                
              /*parser.resultadoExpresion = parser.stack2.pop().toString();
                System.out.println("["+parser.resultadoExpresion+"]");*/
                
                parser.actualizarCI("t"+parser.cTemp+"="+id);
                parser.actualizarCI("if t"+parser.cTemp+" goto L"+parser.cLinea);
                parser.cTemp = parser.cTemp + 1;
                parser.cLinea = parser.cLinea + 1;
                parser.actualizarCI("goto L"+parser.cLinea);
                parser.cLinea = parser.cLinea + 1;
                parser.actualizarCI("L"+parser.cLineaTemp+":");
                parser.cLineaTemp = parser.cLineaTemp + 1;

                parser.reseteoDatos();
            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("condicion",39, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // condicion ::= operacion_logica 
            {
              Object RESULT =null;
		
                System.err.println("[[Condicion Logica:]]");
                parser.resultado = parser.stack.pop().toString();

                Calculadora1 calcular = new Calculadora1();
                String valorbool = calcular.evaluar(parser.resultado, "bool");
                if(valorbool == "false") {
                    parser.boolcondicion = false;
                }
                
                parser.resultadoExpresion = parser.stack2.pop().toString();
                /*System.out.println("["+parser.resultadoExpresion+"]");*/
                parser.actualizarCI("t"+parser.cTemp+"="+parser.resultadoExpresion);
                parser.actualizarCI("if t"+parser.cTemp+" goto L"+parser.cLinea);
                parser.cTemp = parser.cTemp + 1;
                parser.cLinea = parser.cLinea + 1;
                parser.actualizarCI("goto L"+parser.cLinea);
                parser.cLinea = parser.cLinea + 1;
                parser.actualizarCI("L"+parser.cLineaTemp+":");
                parser.cLineaTemp = parser.cLineaTemp + 1;

                parser.reseteoDatos();
            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("condicion",39, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // condicion ::= operacion_relacional 
            {
              Object RESULT =null;
		
                System.err.println("[[Condicion Relacional:]]");
                parser.resultado = parser.stack.pop().toString();
                Calculadora1 calcular = new Calculadora1();
                String valorbool = calcular.evaluar(parser.resultado, "bool");
                if(valorbool == "false") {
                    parser.boolcondicion = false;
                }

                parser.resultadoExpresion = parser.stack2.pop().toString();
                /*System.out.println("["+parser.resultadoExpresion+"]");*/
                parser.actualizarCI("t"+parser.cTemp+"="+parser.resultadoExpresion);
                parser.actualizarCI("if t"+parser.cTemp+" goto L"+parser.cLinea);
                parser.cTemp = parser.cTemp + 1;
                parser.cLinea = parser.cLinea + 1;
                parser.actualizarCI("goto L"+parser.cLinea);
                parser.cLinea = parser.cLinea + 1;
                parser.actualizarCI("L"+parser.cLineaTemp+":");
                parser.cLineaTemp = parser.cLineaTemp + 1;
                
                parser.reseteoDatos();
            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("condicion",39, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("estructura_control",30, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operaciones ::= IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operaciones ::= IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operaciones ::= IDENTIFICADOR ASIGNACION operaciones_validas2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		
                    if(parser.boolcondicion){
                        SimboloC simbolo = parser.tabla.obtenerSimbolo(id);
                        if (simbolo != null) {                                  /*Simbolo no declarado*/
                            /*parser.stack.push(new StringBuilder());*/
                            parser.tipoActual = simbolo.getTipo();
                            if(parser.tipoActual == "bool"){
                                if(!simbolo.isConstante()){                         /*Simbolo es constante*/
                                    if(parser.esCompatible(parser.booltexto,parser.boolchar,parser.boolint,parser.boolfloat, parser.boolbool)){  /*Tipo de dato distinto*/
                                        parser.resultado = parser.stack.pop().toString();
                                        /*System.out.println(parser.resultado+" [...] "+parser.resultadoExpresion);*/
                                        
                                        Calculadora1 calcular = new Calculadora1();
                                        String valorint = calcular.evaluar(parser.resultado, parser.tipoActual);
                                        parser.simbolo = new SimboloC(id, parser.tipoDato, valorint,"metodo",false);
                                        /*System.out.println("[***_ _ _***]"+simbolo);*/
                                        if(parser.tabla.actualizarValor(id, parser.simbolo.getValor())){
                                            System.out.println("[ACTUALIZAR]Identificador actualizado '"+id+"'");
                                            System.out.println(parser.tabla.mostrar());
                                        } else {
                                            System.out.println("[ACTUALIZAR-ERR]Identificador NO actualizado '"+id+"'");
                                        }
                                    } else{
                                        System.err.println("[ASEM-ERROR] '"+id+"' espera tipos de dato "+parser.tipoActual);
                                    }
                                } else {
                                    System.err.println("[ASEM-ERROR] No puedes modificar el valor de una constante.");
                                }
                            } else {
                                System.err.println("[ASEM-ERROR] No puedes asignar un valor booleano a esta variable. '"+id+"', no es tipo '_Bool'");
                            }
                        } else {
                            System.err.println("[ASEM-ERROR] El identifiador '"+id+"' no fue declarado.");
                        }
                        /*System.out.println("[AS-OV-1] Esta es una operacion aritmetica");*/

                    }
                    parser.resultadoExpresion = parser.stack2.pop().toString();
                    parser.resultadoExpresion = id+""+igual+""+parser.resultadoExpresion;
                    parser.generarCI(parser.resultadoExpresion);
                    
                    parser.reseteoDatos();
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operaciones ::= IDENTIFICADOR ASIGNACION operaciones_validas1 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    if(parser.boolcondicion){
                        /*System.out.println("OPERACIONES_VALIDAS_1");*/
                        SimboloC simbolo = parser.tabla.obtenerSimbolo(id);
                        if (simbolo != null) {                                  /*Simbolo no declarado*/
                            /*parser.stack.push(new StringBuilder());*/
                            parser.tipoActual = simbolo.getTipo();
                            switch (parser.tipoActual){
                                case "char*":
                                    parser.booltexto = true;
                                    break;
                                case "char":
                                    parser.boolchar = true;
                                    break;
                                case "int":
                                    parser.boolint = true;
                                    break;
                                case "float":
                                    parser.boolfloat = true;
                                    break;
                                case "bool":
                                    parser.boolbool = true;
                                    break;
                                default:
                                    parser.booltexto = true;
                                    parser.boolchar = true;
                                    parser.boolint = true;
                                    parser.boolfloat = true;
                                    parser.boolbool = true;
                                    System.err.println("[SCASE-ERROR] El identicador que tiene un tipo de dato desconocido.");
                                    break;
                            }
                            if(!simbolo.isConstante()){                         /*Simbolo es constante*/
                                if(parser.esCompatible(parser.booltexto,parser.boolchar,parser.boolint,parser.boolfloat, parser.boolbool)){  /*Tipo de dato distinto*/
                                    parser.resultado = parser.stack.pop().toString();

                                    switch (parser.tipoActual){
                                        case "int":
                                        case "float":
                                            Calculadora1 calcular = new Calculadora1();
                                            String valorint = calcular.evaluar(parser.resultado, parser.tipoActual);
                                            parser.simbolo = new SimboloC(id, parser.tipoDato, valorint,"metodo",false);
                                            if(parser.tabla.actualizarValor(id, parser.simbolo.getValor())){
                                                System.out.println("[ACTUALIZAR]Identificador actualizado '"+id+"'");
                                                System.out.println(parser.tabla.mostrar());
                                            } else {
                                                System.out.println("[ACTUALIZAR-ERR]Identificador NO actualizado '"+id+"'");
                                            }                                              
                                            break;
                                        default:
                                            parser.simbolo = new SimboloC(id, parser.tipoDato, parser.resultado,"metodo",false);
                                            /*System.out.println("[***_ _ _***]"+simbolo);*/
                                            if(parser.tabla.actualizarValor(id, parser.simbolo.getValor())){
                                                System.out.println("[ACTUALIZAR]Identificador actualizado '"+id+"'");
                                                System.out.println(parser.tabla.mostrar());
                                            } else {
                                                System.out.println("[ACTUALIZAR-ERR]Identificador NO actualizado '"+id+"'");
                                            }                                              
                                            break;
                                    }
                                } else{
                                    System.err.println("[ASEM-ERROR] '"+id+"' espera tipos de dato "+parser.tipoActual);
                                }
                            } else {
                                System.err.println("[ASEM-ERROR] No puedes modificar el valor de una constante.");
                            }
                        } else {
                            System.err.println("[ASEM-ERROR] El identifiador '"+id+"' no fue declarado.");
                        }
                        /*System.out.println("[AS-OV-1] Esta es una operacion aritmetica");*/

                    }
                    parser.resultadoExpresion = parser.stack2.pop().toString();
                    parser.resultadoExpresion = id+""+igual+""+parser.resultadoExpresion;
                    parser.generarCI(parser.resultadoExpresion);

                    parser.reseteoDatos();
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones",29, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operaciones_validas2 ::= operacion_logica 
            {
              Object RESULT =null;
		  /*System.out.println("[AS-OV-2] Esta es una operacion logica");*/ 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operaciones_validas2 ::= operacion_relacional 
            {
              Object RESULT =null;
		  /*System.out.println("[AS-OV-2] Esta es una operacion relacional");*/ 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas2",28, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacion_logica ::= operacion_relacional operadores_logicos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacion_logica ::= operacion_relacional operadores_logicos operacion_relacional 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_logica",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacion_relacional ::= valor_identificador operadores_relacionales2 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacion_relacional ::= valor_identificador operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operacion_relacional ::= valor_identificador operadores_relacionales2 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operacion_relacional ::= valor_identificador operadores_relacionales2 valor_identificador 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 valor_identificador 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operacion_relacional ::= valores_validos_numero operadores_relacionales2 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operacion_relacional ::= valor_identificador operadores_relacionales1 valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operacion_relacional ::= valor_identificador operadores_relacionales1 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operacion_relacional ::= valor_identificador operadores_relacionales1 valor_identificador 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 valor_identificador 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operacion_relacional ::= valores_validos_texto operadores_relacionales1 valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 valor_identificador 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operacion_relacional ::= valores_validos_numero operadores_relacionales1 valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_relacional",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valor_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  parser.reglaIdentificador(id); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valor_identificador",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadores_logicos ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(not);  
                            }
                            parser.stack2.peek().append(not);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadores_logicos ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(or);  
                            }
                            parser.stack2.peek().append(or);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadores_logicos ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(and);  
                            }
                            parser.stack2.peek().append(and);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_logicos",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadores_relacionales2 ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int menor_igualleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int menor_igualright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object menor_igual = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(menor_igual);  
                            }
                            parser.stack2.peek().append(menor_igual);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadores_relacionales2 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int mayor_igualleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int mayor_igualright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object mayor_igual = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(mayor_igual);  
                            }
                            parser.stack2.peek().append(mayor_igual);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadores_relacionales2 ::= MENOR_QUE 
            {
              Object RESULT =null;
		int menor_queleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int menor_queright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object menor_que = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(menor_que);  
                            }
                            parser.stack2.peek().append(menor_que);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadores_relacionales2 ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int mayor_queleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int mayor_queright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object mayor_que = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(mayor_que);  
                            }
                            parser.stack2.peek().append(mayor_que);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales2",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadores_relacionales1 ::= DIFERENTE 
            {
              Object RESULT =null;
		int diferenteleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int diferenteright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object diferente = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(diferente);  
                            }
                            parser.stack2.peek().append(diferente);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales1",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadores_relacionales1 ::= IGUALDAD 
            {
              Object RESULT =null;
		int igualdadleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int igualdadright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object igualdad = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  
                            if(parser.boolcondicion){
                                parser.stack.peek().append(igualdad);  
                            }
                            parser.stack2.peek().append(igualdad);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_relacionales1",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones_validas1 ::= operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operaciones_validas1",27, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operacion_aritmetica_compuesta ::= operacion_aritmetica_parentesis operadores_aritmeticos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operacion_aritmetica_compuesta ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operacion_aritmetica_compuesta ::= operacion_aritmetica operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operacion_aritmetica_compuesta ::= operacion_aritmetica_parentesis 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operacion_aritmetica_compuesta ::= operacion_aritmetica_parentesis operadores_aritmeticos operacion_aritmetica_compuesta 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_compuesta",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operacion_aritmetica_parentesis ::= operacion_aritmetica_parentesis_izq error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_parentesis",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operacion_aritmetica_parentesis ::= operacion_aritmetica_parentesis_izq operacion_aritmetica error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_parentesis",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operacion_aritmetica_parentesis ::= operacion_aritmetica_parentesis_izq operacion_aritmetica PARENTESIS_DER 
            {
              Object RESULT =null;
		   
                                    if(parser.boolcondicion){
                                        StringBuilder contenido = parser.stack.pop(); 
                                        parser.stack.peek().append("(").append(contenido).append(")");
                                    }
                                    StringBuilder contenido2 = parser.stack2.pop(); 
                                    parser.stack2.peek().append("(").append(contenido2).append(")");
                                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_parentesis",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operacion_aritmetica_parentesis_izq ::= PARENTESIS_IZQ 
            {
              Object RESULT =null;
		  
                                        if(parser.boolcondicion){
                                            parser.stack.push(new StringBuilder()); 
                                        }    
                                        parser.stack2.push(new StringBuilder());
                                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_parentesis_izq",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operacion_aritmetica ::= operadores_aritmeticos error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operacion_aritmetica ::= operacion_aritmetica_simple 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operacion_aritmetica ::= operacion_aritmetica operadores_aritmeticos operacion_aritmetica_simple 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operacion_aritmetica_simple ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+id;*/ 
                                parser.reglaIdentificador(id);
                            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operacion_aritmetica_simple ::= valores_validos_texto 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operacion_aritmetica_simple ::= valores_validos_numero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica_simple",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadores_aritmeticos ::= MODULO 
            {
              Object RESULT =null;
		int moduloleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int moduloright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object modulo = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+modulo;   */ 
                                                if(parser.boolcondicion){
                                                    parser.stack.peek().append(modulo); 
                                                }
                                                parser.stack2.peek().append(modulo); 
                                            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadores_aritmeticos ::= DIVISION 
            {
              Object RESULT =null;
		int divisionleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int divisionright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object division = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+division;   */
                                                if(parser.boolcondicion){
                                                    parser.stack.peek().append(division); 
                                                }
                                                parser.stack2.peek().append(division); 
                                            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadores_aritmeticos ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int productoleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int productoright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object producto = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+producto; */ 
                                                        if(parser.boolcondicion){ 
                                                            parser.stack.peek().append(producto); 
                                                        }   
                                                        parser.stack2.peek().append(producto);
                                                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_aritmeticos ::= RESTA 
            {
              Object RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+resta;*/ 
                                                if(parser.boolcondicion){
                                                    parser.stack.peek().append(resta);  
                                                }     
                                                parser.stack2.peek().append(resta);
                                            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_aritmeticos ::= SUMA 
            {
              Object RESULT =null;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		Object suma = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+suma;   */
                                                if(parser.boolcondicion){
                                                    parser.stack.peek().append(suma);   
                                                } 
                                                parser.stack2.peek().append(suma);
                                            
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valores_validos_numero ::= NUMFLOTANTEDEC 
            {
              Object RESULT =null;
		int numfloatdecleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int numfloatdecright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String numfloatdec = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+numfloatdec;*/      
                            if(parser.boolcondicion){
                                parser.stack.peek().append(numfloatdec);    
                                parser.boolfloat = true;
                            }     
                            parser.stack2.peek().append(numfloatdec); 
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_numero",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valores_validos_numero ::= NUMDECIMAL 
            {
              Object RESULT =null;
		int numdecleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int numdecright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String numdec = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+numdec;*/   
                            if(parser.boolcondicion){
                                parser.stack.peek().append(numdec);   
                                parser.boolint = true;
                            }
                            parser.stack2.peek().append(numdec);   
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_numero",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valores_validos_texto ::= CADENACHAR 
            {
              Object RESULT =null;
		int ccharleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ccharright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String cchar = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+cchar;*/ 
                            if(parser.boolcondicion){
                                parser.stack.peek().append(cchar);      
                                parser.boolchar = true;
                            }   
                            parser.stack2.peek().append(cchar); 
                       
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_texto",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valores_validos_texto ::= CADENATEXTO 
            {
              Object RESULT =null;
		int ctextoleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ctextoright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String ctexto = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		  /*parser.resultado = parser.resultado+""+ctexto;*/
                            if(parser.boolcondicion){
                                parser.stack.peek().append(ctexto);
                                parser.booltexto = true;
                            }
                            parser.stack2.peek().append(ctexto);
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("valores_validos_texto",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion_constante ::= CONST error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion_constante ::= CONST CHAR MULTIPLICACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion_constante ::= CONST CHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_constante ::= CONST lista_tipo_flotante error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion_constante ::= CONST lista_tipo_entero error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion_constante ::= CONST CHAR IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    if(parser.boolcondicion){
                        parser.simbolo = new SimboloC(id, "char*", texto,"metodo",true);
                        if(parser.tabla.agregar(id, parser.simbolo)){
                            System.out.println("[AGREGAR]Constante agregada '"+id+"'");
                                    System.out.println(parser.tabla.mostrar());
                                    parser.resultadoExpresion = id+""+igual+""+texto;
                                    parser.generarCI(parser.resultadoExpresion);
                                    parser.resultadoExpresion = "";
                        } else {
                            System.out.println("[AGREGAR-ERR]Constante NO agregada '"+id+"'");
                        }  
                    }
                    /*System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char*"); */
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int ccharleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int ccharright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String cchar = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    if(parser.boolcondicion){
                        /*String charValue = String.valueOf(((Character) cchar).charValue());*/
                        parser.simbolo = new SimboloC(id, "char", cchar,"metodo",true);
                        if(parser.tabla.agregar(id, parser.simbolo)){
                            System.out.println("[AGREGAR]Constante agregada '"+id+"'");
                                    System.out.println(parser.tabla.mostrar());
                                    parser.resultadoExpresion = id+""+igual+""+cchar;
                                    parser.generarCI(parser.resultadoExpresion);
                                    parser.resultadoExpresion = "";
                        } else {
                            System.out.println("[AGREGAR-ERR]Constante NO agregada '"+id+"'");
                        }  
                    }
                    /*System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char"); */
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int numfloatdecleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int numfloatdecright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String numfloatdec = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    if(parser.boolcondicion){
                        parser.simbolo = new SimboloC(id, parser.tipoDato, ""+numfloatdec,"metodo",true);
                        if(parser.tabla.agregar(id, parser.simbolo)){
                            System.out.println("[AGREGAR]Constante agregada '"+id+"'");
                                    System.out.println(parser.tabla.mostrar());
                                    parser.resultadoExpresion = id+""+igual+""+numfloatdec;
                                    parser.generarCI(parser.resultadoExpresion);
                                    parser.resultadoExpresion = "";
                        } else {
                            System.out.println("[AGREGAR-ERR]Constante NO agregada '"+id+"'");
                        }  
                    }
                    /*System.out.println("[AS-DEC-CONST] Esta es una declaración de constante flotante"); */
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int numdecleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int numdecright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String numdec = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		  
                    if(parser.boolcondicion){
                        parser.simbolo = new SimboloC(id, parser.tipoDato,""+numdec,"metodo",true);
                        if(parser.tabla.agregar(id, parser.simbolo)){
                            System.out.println("[AGREGAR]Constante agregada '"+id+"'");
                                    System.out.println(parser.tabla.mostrar());
                                    parser.resultadoExpresion = id+""+igual+""+numdec;
                                    parser.generarCI(parser.resultadoExpresion);
                                    parser.resultadoExpresion = "";
                        } else {
                            System.out.println("[AGREGAR-ERR]Constante NO agregada '"+id+"'");
                        }  
                    }
                    /*System.out.println("[AS-DEC-CONST] Esta es una declaración de constante entero"); */
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_variable ::= lista_tipo_dato error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_variable ::= lista_tipo_dato lista_identificador error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_variable ::= lista_tipo_dato lista_identificador PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  
                    if(parser.boolcondicion){
                        parser.reseteoDatos();
                    }
                    /*System.out.println("[AS-DEC-TD] Esta es una declaración de variables");*/
                
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaraciones ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaraciones ::= declaracion_constante declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaraciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaraciones ::= declaracion_variable declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_identificador ::= COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		
                            if(parser.boolcondicion){
                                if(parser.tipoDato == "bool"){
                                    parser.simbolo = new SimboloC(id, parser.tipoDato, "false","metodo",false);
                                } else {
                                    parser.simbolo = new SimboloC(id, parser.tipoDato, "0","metodo",false);
                                }
                                if(parser.tabla.agregar(id, parser.simbolo)){
                                    System.out.println("[AGREGAR]Variable agregada '"+id+"'");
                                    System.out.println(parser.tabla.mostrar());
                                } else {
                                    System.out.println("[AGREGAR-ERR]Variable NO agregada '"+id+"'");
                                }  
                            }
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_identificador ::= lista_identificador COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_tipo_dato ::= _Bool 
            {
              Object RESULT =null;
		  
                        if(parser.boolcondicion){
                            parser.tipoDato = "bool"; 
                        }  
                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		  
                        if(parser.boolcondicion){
                            parser.tipoDato = "char"; 
                        }  
                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_tipo_dato ::= lista_tipo_flotante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_tipo_dato ::= lista_tipo_entero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_tipo_flotante ::= DOUBLE 
            {
              Object RESULT =null;
		  
                        if(parser.boolcondicion){
                            parser.tipoDato = "float";
                        }   
                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_tipo_flotante ::= FLOAT 
            {
              Object RESULT =null;
		  
                        if(parser.boolcondicion){
                            parser.tipoDato = "float";
                        }   
                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_tipo_entero ::= LONG 
            {
              Object RESULT =null;
		  
                        if(parser.boolcondicion){
                            parser.tipoDato = "int";  
                        } 
                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_tipo_entero ::= SHORT 
            {
              Object RESULT =null;
		  
                        if(parser.boolcondicion){
                            parser.tipoDato = "int";   
                        }
                    
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_tipo_entero ::= INT 
            {
              Object RESULT =null;
		  
                        if(parser.boolcondicion){
                            parser.tipoDato = "int";  
                        } 
                        
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion_main ::= INT MAIN PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque RETURN NUMDECIMAL PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-MAIN] Esta es la funcion main"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("funcion_main",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_funciones ::= VOID error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_funciones ::= VOID IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_funciones ::= lista_tipo_dato error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		/* System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion void"); */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_funciones ::= VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		/* System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion void"); */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		/* System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion retornable"); */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-9)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_funciones ::= lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		/* System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion retornable"); */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_funciones ::= dec_funciones VOID IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		/* System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion void"); */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_funciones ::= dec_funciones VOID IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque LLAVE_DER 
            {
              Object RESULT =null;
		/* System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion void"); */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-8)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_funciones ::= dec_funciones lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		/* System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion retornable"); */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_funciones ::= dec_funciones lista_tipo_dato IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER LLAVE_IZQ bloque RETURN IDENTIFICADOR PUNTO_Y_COMA LLAVE_DER 
            {
              Object RESULT =null;
		/* System.out.println("[AS-DEC-FUNCION] Esta es una declaracion de funcion retornable"); */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_funciones",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-11)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametro ::= lista_tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= parametros COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_include ::= DIRECTIVA_INCLUDE MENOR_QUE IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR_QUE 
            {
              Object RESULT =null;
		/*  System.out.println("[AS-INCLUDE] Esta es una directiva #include");  */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_include",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_include ::= DIRECTIVA_INCLUDE MENOR_QUE IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR_QUE dec_include 
            {
              Object RESULT =null;
		/*  System.out.println("[AS-INCLUDE] Esta es una directiva #include");  */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_include",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= dec_include dec_funciones funcion_main 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= dec_include funcion_main 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		RESULT = start_val;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserC$parser.done_parsing();
          return CUP$ParserC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

