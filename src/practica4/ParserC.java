
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 03 14:56:11 CST 2025
//----------------------------------------------------

package practica4;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 03 14:56:11 CST 2025
  */
public class ParserC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserC() {super();}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\004\010\000\002\005\011\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\007\003\000" +
    "\002\007\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\011\005\000\002\011\003\000\002\011" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\004\000\002\013\010\000\002\013\010\000\002" +
    "\013\010\000\002\013\011\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\011\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\010\000" +
    "\002\013\006\000\002\013\006\000\002\013\006\000\002" +
    "\013\007\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\063\004\001\002\000\004\113\115\001" +
    "\002\000\006\002\114\063\004\001\002\000\004\025\010" +
    "\001\002\000\006\002\uffff\063\uffff\001\002\000\004\027" +
    "\011\001\002\000\004\144\012\001\002\000\004\145\013" +
    "\001\002\000\004\150\014\001\002\000\020\007\027\010" +
    "\031\014\024\020\026\025\016\026\017\033\030\001\002" +
    "\000\010\003\ufff6\152\ufff6\160\ufff6\001\002\000\010\003" +
    "\ufffc\152\ufffc\160\ufffc\001\002\000\010\003\ufffa\152\ufffa" +
    "\160\ufffa\001\002\000\010\003\104\152\102\160\105\001" +
    "\002\000\022\007\027\010\031\014\024\020\026\025\016" +
    "\026\017\033\030\151\uffee\001\002\000\010\003\ufff7\152" +
    "\ufff7\160\ufff7\001\002\000\004\151\100\001\002\000\010" +
    "\003\ufff8\152\ufff8\160\ufff8\001\002\000\022\007\027\010" +
    "\031\014\024\020\026\025\016\026\017\033\030\151\ufff0" +
    "\001\002\000\010\003\ufff9\152\ufff9\160\ufff9\001\002\000" +
    "\010\003\ufff5\152\ufff5\160\ufff5\001\002\000\010\003\ufffb" +
    "\152\ufffb\160\ufffb\001\002\000\020\003\034\007\035\014" +
    "\024\020\026\025\016\026\017\033\030\001\002\000\006" +
    "\003\067\160\070\001\002\000\006\003\057\160\060\001" +
    "\002\000\022\007\uffd6\010\uffd6\014\uffd6\020\uffd6\025\uffd6" +
    "\026\uffd6\033\uffd6\151\uffd6\001\002\000\010\003\037\106" +
    "\036\160\040\001\002\000\006\003\047\160\050\001\002" +
    "\000\022\007\uffd8\010\uffd8\014\uffd8\020\uffd8\025\uffd8\026" +
    "\uffd8\033\uffd8\151\uffd8\001\002\000\006\003\042\122\041" +
    "\001\002\000\006\003\043\170\044\001\002\000\022\007" +
    "\uffdc\010\uffdc\014\uffdc\020\uffdc\025\uffdc\026\uffdc\033\uffdc" +
    "\151\uffdc\001\002\000\022\007\uffe0\010\uffe0\014\uffe0\020" +
    "\uffe0\025\uffe0\026\uffe0\033\uffe0\151\uffe0\001\002\000\006" +
    "\003\045\153\046\001\002\000\022\007\uffe4\010\uffe4\014" +
    "\uffe4\020\uffe4\025\uffe4\026\uffe4\033\uffe4\151\uffe4\001\002" +
    "\000\022\007\uffe8\010\uffe8\014\uffe8\020\uffe8\025\uffe8\026" +
    "\uffe8\033\uffe8\151\uffe8\001\002\000\022\007\uffd7\010\uffd7" +
    "\014\uffd7\020\uffd7\025\uffd7\026\uffd7\033\uffd7\151\uffd7\001" +
    "\002\000\006\003\052\122\051\001\002\000\006\003\053" +
    "\167\054\001\002\000\022\007\uffdb\010\uffdb\014\uffdb\020" +
    "\uffdb\025\uffdb\026\uffdb\033\uffdb\151\uffdb\001\002\000\022" +
    "\007\uffdf\010\uffdf\014\uffdf\020\uffdf\025\uffdf\026\uffdf\033" +
    "\uffdf\151\uffdf\001\002\000\006\003\055\153\056\001\002" +
    "\000\022\007\uffe3\010\uffe3\014\uffe3\020\uffe3\025\uffe3\026" +
    "\uffe3\033\uffe3\151\uffe3\001\002\000\022\007\uffe7\010\uffe7" +
    "\014\uffe7\020\uffe7\025\uffe7\026\uffe7\033\uffe7\151\uffe7\001" +
    "\002\000\022\007\uffda\010\uffda\014\uffda\020\uffda\025\uffda" +
    "\026\uffda\033\uffda\151\uffda\001\002\000\006\003\062\122" +
    "\061\001\002\000\006\003\063\164\064\001\002\000\022" +
    "\007\uffde\010\uffde\014\uffde\020\uffde\025\uffde\026\uffde\033" +
    "\uffde\151\uffde\001\002\000\022\007\uffe2\010\uffe2\014\uffe2" +
    "\020\uffe2\025\uffe2\026\uffe2\033\uffe2\151\uffe2\001\002\000" +
    "\006\003\065\153\066\001\002\000\022\007\uffe6\010\uffe6" +
    "\014\uffe6\020\uffe6\025\uffe6\026\uffe6\033\uffe6\151\uffe6\001" +
    "\002\000\022\007\uffea\010\uffea\014\uffea\020\uffea\025\uffea" +
    "\026\uffea\033\uffea\151\uffea\001\002\000\022\007\uffd9\010" +
    "\uffd9\014\uffd9\020\uffd9\025\uffd9\026\uffd9\033\uffd9\151\uffd9" +
    "\001\002\000\006\003\072\122\071\001\002\000\006\003" +
    "\073\165\074\001\002\000\022\007\uffdd\010\uffdd\014\uffdd" +
    "\020\uffdd\025\uffdd\026\uffdd\033\uffdd\151\uffdd\001\002\000" +
    "\022\007\uffe1\010\uffe1\014\uffe1\020\uffe1\025\uffe1\026\uffe1" +
    "\033\uffe1\151\uffe1\001\002\000\006\003\075\153\076\001" +
    "\002\000\022\007\uffe5\010\uffe5\014\uffe5\020\uffe5\025\uffe5" +
    "\026\uffe5\033\uffe5\151\uffe5\001\002\000\022\007\uffe9\010" +
    "\uffe9\014\uffe9\020\uffe9\025\uffe9\026\uffe9\033\uffe9\151\uffe9" +
    "\001\002\000\004\151\ufff1\001\002\000\006\002\ufffd\063" +
    "\ufffd\001\002\000\004\151\uffef\001\002\000\004\003\112" +
    "\001\002\000\010\003\107\152\106\153\110\001\002\000" +
    "\022\007\uffeb\010\uffeb\014\uffeb\020\uffeb\025\uffeb\026\uffeb" +
    "\033\uffeb\151\uffeb\001\002\000\010\003\ufff3\152\ufff3\153" +
    "\ufff3\001\002\000\004\160\111\001\002\000\022\007\uffec" +
    "\010\uffec\014\uffec\020\uffec\025\uffec\026\uffec\033\uffec\151" +
    "\uffec\001\002\000\022\007\uffed\010\uffed\014\uffed\020\uffed" +
    "\025\uffed\026\uffed\033\uffed\151\uffed\001\002\000\010\003" +
    "\ufff4\152\ufff4\153\ufff4\001\002\000\010\003\ufff2\152\ufff2" +
    "\153\ufff2\001\002\000\006\002\000\063\000\001\002\000" +
    "\004\002\001\001\002\000\004\160\116\001\002\000\004" +
    "\142\117\001\002\000\004\160\120\001\002\000\004\114" +
    "\121\001\002\000\010\002\ufffe\025\ufffe\063\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\004\004\112\001\001\000\004\005\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\022\006\017" +
    "\007\014\010\021\012\024\013\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\102" +
    "\001\001\000\016\003\100\006\017\007\014\010\021\012" +
    "\024\013\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\076\006\017\007\014\010" +
    "\021\012\024\013\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\031\010\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void syntax_error(Symbol s){
        System.err.println("Error sintactico en ["+s.left+":"+(s.right-1)+"], token inesperado "+s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserC$actions {
  private final ParserC parser;

  /** Constructor */
  CUP$ParserC$actions(ParserC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserC$do_action(
    int                        CUP$ParserC$act_num,
    java_cup.runtime.lr_parser CUP$ParserC$parser,
    java.util.Stack            CUP$ParserC$stack,
    int                        CUP$ParserC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserC$result;

      /* select the action based on the action number */
      switch (CUP$ParserC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_constante ::= CONST error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_constante ::= CONST CHAR MULTIPLICACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_constante ::= CONST CHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_constante ::= CONST lista_tipo_flotante error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_constante ::= CONST lista_tipo_entero error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_constante ::= CONST CHAR IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_constante ::= CONST CHAR MULTIPLICACION IDENTIFICADOR ASIGNACION CADENATEXTO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char*"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_constante ::= CONST CHAR IDENTIFICADOR ASIGNACION CADENACHAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante char"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_constante ::= CONST lista_tipo_flotante IDENTIFICADOR ASIGNACION NUMFLOTANTEDEC PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante flotante"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_constante ::= CONST lista_tipo_entero IDENTIFICADOR ASIGNACION NUMDECIMAL PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-CONST] Esta es una declaración de constante entero"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_constante",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_variable ::= lista_tipo_dato error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_variable ::= lista_tipo_dato lista_identificador error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_variable ::= lista_tipo_dato lista_identificador PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  System.out.println("[AS-DEC-TD] Esta es una declaración de variables"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaracion_variable",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaraciones ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaraciones ::= declaracion_constante declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaraciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraciones ::= declaracion_variable declaraciones 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_identificador ::= COMA error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_identificador ::= lista_identificador COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_identificador",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		/*     System.out.println("[AS-DEC-TD] Esta es un tipo de dato char");     */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_tipo_dato ::= lista_tipo_flotante 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_tipo_dato ::= lista_tipo_entero 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_dato",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_tipo_flotante ::= DOUBLE 
            {
              Object RESULT =null;
		/*   System.out.println("[AS-DEC-TD] Esta es un tipo de dato double");   */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_tipo_flotante ::= FLOAT 
            {
              Object RESULT =null;
		/*    System.out.println("[AS-DEC-TD] Esta es un tipo de dato float");    */
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_flotante",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_tipo_entero ::= LONG 
            {
              Object RESULT =null;
		/*     System.out.println("[AS-DEC-TD] Esta es un tipo de dato long");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_tipo_entero ::= SHORT 
            {
              Object RESULT =null;
		/*    System.out.println("[AS-DEC-TD] Esta es un tipo de dato short");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_tipo_entero ::= INT 
            {
              Object RESULT =null;
		/*      System.out.println("[AS-DEC-TD] Esta es un tipo de dato int");*/
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("lista_tipo_entero",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcion_main ::= INT MAIN PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ declaraciones LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("[AS-MAIN] Esta es la funcion main"); 
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_include ::= DIRECTIVA_INCLUDE MENOR_QUE IDENTIFICADOR PUNTO IDENTIFICADOR MAYOR_QUE 
            {
              Object RESULT =null;
		  System.out.println("[AS-INCLUDE] Esta es una directiva #include");  
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("dec_include",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= dec_include funcion_main 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= programa dec_include 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		RESULT = start_val;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserC$parser.done_parsing();
          return CUP$ParserC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

