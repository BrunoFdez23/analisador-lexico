/* The following code was generated by JFlex 1.6.1 */

/* Barrera Alaniz Jose Angel */
/* Fern√°ndez Flores Bruno Eduardo */
/* Sanchez Mora Jose Alfredo */

/* Paquete de ubicacion del archivo en el proyecto */
package practica4;

/* Importaciones necesarias */
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/practica4/lexico.jflex</tt>
 */
public class LexerC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\2\1\5\1\6\1\1\22\0\1\3\1\102\1\24"+
    "\1\75\1\33\1\76\1\105\1\26\1\112\1\31\1\7\1\100\1\117"+
    "\1\22\1\20\1\4\1\12\1\16\6\17\2\11\1\111\1\27\1\103"+
    "\1\101\1\104\1\30\1\33\1\66\1\15\1\67\1\14\1\21\1\77"+
    "\1\70\1\10\1\71\4\10\1\72\1\10\1\23\2\10\1\73\1\74"+
    "\3\10\1\13\2\10\1\113\1\25\1\114\1\107\1\63\1\0\1\34"+
    "\1\40\1\44\1\51\1\42\1\52\1\56\1\46\1\50\1\10\1\43"+
    "\1\53\1\54\1\47\1\37\1\62\1\64\1\41\1\45\1\36\1\35"+
    "\1\65\1\60\1\55\1\61\1\57\1\115\1\106\1\116\1\110\6\0"+
    "\1\5\u1fa2\0\1\5\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\1\1\4\1\1\1\5\1\6"+
    "\2\7\1\10\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\21\6\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\2\1\3\1\40\1\41\1\42"+
    "\1\43\2\44\2\7\1\45\2\44\1\46\1\47\2\46"+
    "\1\0\1\50\1\51\1\52\1\53\1\0\1\54\1\55"+
    "\1\0\1\56\2\0\20\6\1\57\1\60\20\6\3\2"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\40\1\0"+
    "\1\44\1\2\1\0\1\50\1\44\3\46\2\0\1\107"+
    "\1\110\1\0\2\111\1\112\2\0\1\113\24\6\1\114"+
    "\3\6\1\115\20\6\5\2\1\116\1\44\1\50\1\45"+
    "\1\50\1\44\1\46\1\50\1\117\1\120\1\111\1\56"+
    "\1\121\7\6\1\122\1\123\1\6\1\124\2\6\1\125"+
    "\12\6\1\126\1\127\1\130\12\6\1\131\1\6\6\2"+
    "\1\45\3\50\1\0\2\120\1\111\1\6\1\132\2\6"+
    "\1\133\5\6\1\134\2\6\1\135\6\6\1\136\1\137"+
    "\1\140\11\6\1\2\1\141\4\2\1\45\2\50\1\0"+
    "\2\120\1\117\1\120\1\6\1\142\1\6\1\143\2\6"+
    "\1\144\1\6\1\145\1\146\1\147\1\150\1\151\1\152"+
    "\1\153\12\6\1\154\2\2\1\155\1\2\1\0\1\120"+
    "\1\117\2\120\2\6\1\156\3\6\1\157\1\160\11\6"+
    "\1\2\1\161\1\162\1\0\1\117\1\120\1\163\1\6"+
    "\1\164\1\165\1\166\1\167\1\170\1\171\1\172\4\6"+
    "\1\173\1\174\2\6\1\175\3\6\1\176\10\6\1\177"+
    "\1\6\1\200\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\120\0\u04b0\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690"+
    "\0\u06e0\0\u0730\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910"+
    "\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90"+
    "\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\120\0\120\0\120"+
    "\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u0d70\0\u04b0"+
    "\0\u0dc0\0\u0e10\0\120\0\u04b0\0\u0e60\0\u0eb0\0\u0f00\0\u0f50"+
    "\0\u0fa0\0\u0ff0\0\u1040\0\u1090\0\u10e0\0\u1130\0\u1180\0\u0370"+
    "\0\u11d0\0\120\0\120\0\u04b0\0\u0410\0\u04b0\0\u04b0\0\u1220"+
    "\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0\0\u1400\0\u1450\0\u14a0"+
    "\0\u14f0\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u1720"+
    "\0\u1770\0\u17c0\0\u1810\0\u0280\0\u1860\0\u18b0\0\u1900\0\u1950"+
    "\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0"+
    "\0\u1c20\0\u1c70\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u1e50"+
    "\0\u0d70\0\u0d70\0\u0d70\0\u0d70\0\u0d70\0\u0d70\0\u0d70\0\u0d70"+
    "\0\u0d70\0\u0d70\0\u0d70\0\120\0\120\0\120\0\120\0\120"+
    "\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\120\0\120\0\u1ea0\0\u1ef0"+
    "\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170"+
    "\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u1180"+
    "\0\u23f0\0\u2440\0\u04b0\0\u2490\0\u24e0\0\u2530\0\u2580\0\u25d0"+
    "\0\u2620\0\u2670\0\u26c0\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850"+
    "\0\u28a0\0\u28f0\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u0280"+
    "\0\u2ad0\0\u2b20\0\u2b70\0\u0280\0\u2bc0\0\u2c10\0\u2c60\0\u2cb0"+
    "\0\u2d00\0\u2d50\0\u2da0\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30"+
    "\0\u2f80\0\u2fd0\0\u3020\0\u3070\0\u30c0\0\u3110\0\u3160\0\u31b0"+
    "\0\u3200\0\u04b0\0\u3250\0\u04b0\0\u32a0\0\u32f0\0\u3340\0\u3390"+
    "\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u04b0\0\u0280\0\u3520\0\u3570"+
    "\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u0280\0\u0280\0\u3750"+
    "\0\u0280\0\u37a0\0\u37f0\0\u0280\0\u3840\0\u3890\0\u38e0\0\u3930"+
    "\0\u3980\0\u39d0\0\u3a20\0\u3a70\0\u3ac0\0\u3b10\0\u0280\0\u0280"+
    "\0\u0280\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0\0\u3cf0\0\u3d40"+
    "\0\u3d90\0\u3de0\0\u3e30\0\u0280\0\u3e80\0\u3ed0\0\u3f20\0\u3f70"+
    "\0\u3fc0\0\u4010\0\u4060\0\u40b0\0\u4100\0\u4150\0\u41a0\0\u41f0"+
    "\0\u4240\0\u4290\0\u42e0\0\u4330\0\u0280\0\u4380\0\u43d0\0\u0280"+
    "\0\u4420\0\u4470\0\u44c0\0\u4510\0\u4560\0\u0280\0\u45b0\0\u4600"+
    "\0\u0280\0\u4650\0\u46a0\0\u46f0\0\u4740\0\u4790\0\u47e0\0\u0280"+
    "\0\u0280\0\u0280\0\u4830\0\u4880\0\u48d0\0\u4920\0\u4970\0\u49c0"+
    "\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u0d70\0\u4b50\0\u4ba0\0\u4bf0"+
    "\0\u4c40\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0\0\u04b0\0\u4e20"+
    "\0\u4e70\0\u4ec0\0\u4f10\0\u4f60\0\u0280\0\u4fb0\0\u5000\0\u0280"+
    "\0\u5050\0\u0280\0\u0280\0\u0280\0\u0280\0\u0280\0\u0280\0\u0280"+
    "\0\u50a0\0\u50f0\0\u5140\0\u5190\0\u51e0\0\u5230\0\u5280\0\u52d0"+
    "\0\u5320\0\u5370\0\u0d70\0\u53c0\0\u5410\0\u0d70\0\u5460\0\u54b0"+
    "\0\u5500\0\u5550\0\u55a0\0\u41f0\0\u55f0\0\u5640\0\u0280\0\u5690"+
    "\0\u56e0\0\u5730\0\u0280\0\u0280\0\u5780\0\u57d0\0\u5820\0\u5870"+
    "\0\u58c0\0\u5910\0\u5960\0\u59b0\0\u5a00\0\u5a50\0\u0d70\0\u0d70"+
    "\0\u5aa0\0\u5af0\0\u5b40\0\u0280\0\u5b90\0\u0280\0\u0280\0\u0280"+
    "\0\u0280\0\u0280\0\u0280\0\u0280\0\u5be0\0\u5c30\0\u5c80\0\u5cd0"+
    "\0\u0280\0\u0d70\0\u5d20\0\u5d70\0\u0280\0\u5dc0\0\u5e10\0\u5e60"+
    "\0\u0280\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0\0\u6040\0\u6090"+
    "\0\u60e0\0\u0280\0\u6130\0\u0280\0\u0280";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\3\11\2\12\1\14\1\11\1\15"+
    "\1\11\1\16\1\2\1\17\1\20\1\21\1\22\1\5"+
    "\1\23\1\24\1\25\1\26\1\11\1\27\1\30\1\31"+
    "\1\11\1\32\1\33\2\11\1\34\1\35\1\36\1\37"+
    "\1\40\1\11\1\41\1\11\1\42\2\11\1\43\1\11"+
    "\1\44\7\11\1\45\1\46\1\11\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\2\3\0\3\2"+
    "\1\0\10\67\1\0\1\67\1\2\1\67\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\41\67\2\2\1\67\3\2"+
    "\2\0\5\2\10\0\1\70\116\0\1\70\121\0\1\5"+
    "\2\0\1\5\23\0\1\5\65\0\1\2\3\0\1\71"+
    "\2\2\1\72\10\67\1\0\1\67\1\2\1\67\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\41\67\2\2\1\67"+
    "\1\2\1\73\1\2\2\0\5\2\6\0\1\2\2\0"+
    "\1\5\2\2\1\7\1\0\10\67\1\0\1\67\1\2"+
    "\1\67\1\0\1\2\2\0\1\2\1\0\1\5\1\2"+
    "\41\67\2\2\1\67\3\2\2\0\5\2\107\0\1\74"+
    "\16\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\41\11\2\2\1\11\3\2\2\0\5\2\6\0\1\75"+
    "\3\0\3\75\1\0\1\76\1\77\1\100\3\76\2\77"+
    "\1\101\1\76\1\75\1\76\1\0\1\75\2\0\1\75"+
    "\2\0\1\75\41\76\2\75\1\76\3\75\2\0\5\75"+
    "\6\0\1\102\3\0\3\102\1\0\1\103\1\104\1\105"+
    "\1\106\1\103\1\107\2\105\1\101\1\103\1\102\1\103"+
    "\1\0\1\102\2\0\1\102\2\0\1\102\4\103\1\107"+
    "\14\103\1\106\17\103\2\102\1\103\3\102\2\0\5\102"+
    "\17\0\2\110\3\0\2\110\1\0\1\111\20\0\1\111"+
    "\55\0\1\2\3\0\3\2\1\0\10\67\1\0\1\67"+
    "\1\112\1\67\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\41\67\2\2\1\67\1\2\1\113\1\2\1\0\1\114"+
    "\5\2\6\0\2\115\1\116\21\115\1\117\1\120\72\115"+
    "\2\121\1\122\22\121\1\123\1\0\71\121\120\0\1\2"+
    "\3\0\3\2\1\0\10\67\1\0\1\67\1\2\1\67"+
    "\1\0\1\2\2\0\1\2\2\0\1\23\41\67\1\23"+
    "\1\2\1\67\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\1\11\1\124\37\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\13\11\1\125\25\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\25\11\1\126\13\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\5\11\1\127\33\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\6\11\1\130\32\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\13\11\1\131\3\11"+
    "\1\132\1\11\1\133\17\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\1\134\2\11\1\135\6\11\1\136\26\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\11\1\137\7\11\1\140"+
    "\1\11\1\141\7\11\1\142\14\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\13\11\1\143\2\11\1\144\22\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\3\11\1\145\2\11\1\146"+
    "\32\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\3\11\1\147"+
    "\13\11\1\150\21\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\3\11\1\151\35\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\1\152\40\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\3\11"+
    "\1\153\35\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\12\11"+
    "\1\154\26\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\5\11\1\155\2\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\32\11\1\156\1\157\1\160\1\161\1\162\1\163"+
    "\1\164\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\3\11\1\165"+
    "\35\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\67\1\0\1\67\1\2\1\67"+
    "\1\0\1\2\2\0\1\2\2\0\1\23\6\67\1\166"+
    "\5\67\1\167\1\170\23\67\1\23\1\2\1\67\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\3\67"+
    "\1\171\4\67\1\0\1\172\1\2\1\67\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\1\67\1\173\1\67\1\174"+
    "\2\67\1\172\1\67\1\175\1\176\1\67\1\177\2\200"+
    "\1\201\2\67\1\171\1\202\3\67\1\203\5\67\1\202"+
    "\4\67\2\2\1\201\1\2\1\204\1\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\67\1\0\1\67"+
    "\1\2\1\67\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\41\67\2\2\1\67\1\205\1\206\1\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\67\1\0\1\67"+
    "\1\2\1\67\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\41\67\2\2\1\67\1\2\1\207\1\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\67\1\0\1\67"+
    "\1\2\1\67\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\41\67\2\2\1\67\1\2\1\210\1\2\2\0\5\2"+
    "\107\0\1\211\1\0\1\212\115\0\1\213\2\0\1\214"+
    "\13\0\1\2\3\0\3\2\1\0\10\67\1\0\1\67"+
    "\1\2\1\67\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\41\67\2\2\1\67\3\2\2\0\1\215\4\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\67\1\0\1\67\1\2"+
    "\1\67\1\0\1\2\2\0\1\2\2\0\1\2\41\67"+
    "\2\2\1\67\3\2\2\0\1\2\1\216\3\2\16\0"+
    "\10\67\1\0\1\67\1\0\1\67\10\0\41\67\2\0"+
    "\1\67\20\0\1\71\2\0\1\217\1\71\2\2\13\217"+
    "\1\71\2\217\1\71\2\217\1\71\2\217\1\71\41\217"+
    "\2\71\1\217\3\71\2\217\5\71\6\217\7\72\1\220"+
    "\110\72\1\75\3\0\3\75\1\0\1\221\2\67\3\221"+
    "\2\67\1\0\1\221\1\75\1\221\1\0\1\75\2\0"+
    "\1\75\2\0\1\75\41\221\2\75\1\221\3\75\2\0"+
    "\5\75\6\0\1\75\3\0\3\75\1\0\1\76\2\222"+
    "\3\76\2\222\1\0\1\76\1\75\1\76\1\0\1\75"+
    "\2\0\1\75\2\0\1\75\41\76\2\75\1\76\3\75"+
    "\2\0\5\75\6\0\1\2\3\0\3\2\1\0\1\222"+
    "\1\77\1\100\3\222\2\77\1\101\1\222\1\2\1\222"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\41\222\2\2"+
    "\1\222\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\1\223\2\100\3\223\2\100\1\101\1\223\1\2"+
    "\1\223\1\0\1\2\2\0\1\2\2\0\1\2\41\223"+
    "\2\2\1\223\3\2\2\0\5\2\6\0\1\111\3\0"+
    "\3\111\1\0\1\111\2\101\3\111\2\101\1\111\1\224"+
    "\1\0\1\111\1\0\1\111\5\0\7\111\1\224\35\111"+
    "\1\0\2\111\2\0\5\111\6\0\1\102\3\0\3\102"+
    "\1\0\1\225\1\226\1\67\1\226\1\225\1\226\2\67"+
    "\1\0\1\225\1\102\1\225\1\0\1\102\2\0\1\102"+
    "\2\0\1\102\4\225\1\226\14\225\1\226\17\225\2\102"+
    "\1\225\3\102\2\0\5\102\6\0\1\102\3\0\3\102"+
    "\1\0\1\103\1\227\1\223\1\227\1\103\1\227\2\223"+
    "\1\0\1\103\1\102\1\103\1\0\1\102\2\0\1\102"+
    "\2\0\1\102\4\103\1\227\14\103\1\227\17\103\2\102"+
    "\1\103\3\102\2\0\5\102\6\0\1\230\3\0\3\230"+
    "\1\0\1\227\1\104\1\231\3\227\2\231\1\232\1\227"+
    "\1\230\1\227\1\0\1\230\2\0\1\230\2\0\1\230"+
    "\41\227\2\230\1\227\3\230\2\0\5\230\6\0\1\230"+
    "\3\0\3\230\1\0\1\227\1\104\1\105\3\227\2\105"+
    "\1\232\1\227\1\230\1\227\1\0\1\230\2\0\1\230"+
    "\2\0\1\230\41\227\2\230\1\227\3\230\2\0\5\230"+
    "\6\0\1\233\3\0\3\233\1\0\1\233\2\234\1\233"+
    "\4\234\1\235\1\234\2\233\1\0\1\233\2\0\1\233"+
    "\2\0\1\233\1\234\3\233\1\234\1\233\1\234\1\233"+
    "\1\234\4\233\2\234\13\233\2\234\7\233\1\234\3\233"+
    "\2\0\5\233\6\0\1\236\3\0\3\236\1\0\2\237"+
    "\1\240\3\237\1\240\1\237\1\0\1\237\1\236\1\237"+
    "\1\0\1\236\2\0\1\236\2\0\1\236\41\237\2\236"+
    "\1\237\3\236\2\0\5\236\6\0\1\111\3\0\3\111"+
    "\1\0\10\111\1\0\3\111\1\0\1\111\2\0\1\111"+
    "\2\0\50\111\2\0\5\111\6\0\1\115\2\0\2\115"+
    "\2\0\111\115\2\241\1\0\22\241\1\242\1\243\71\241"+
    "\26\0\1\243\71\0\1\121\2\0\2\121\2\0\111\121"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\2\11"+
    "\1\244\36\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\11\11"+
    "\1\245\2\11\1\246\24\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\26\11\1\247\12\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\6\11\1\250\32\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\2\11\1\251\6\11\1\252\10\11\1\253\16\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\1\11\1\254\37\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\11\11\1\255\27\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\2\11\1\256\36\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\11\11\1\257\27\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\13\11\1\260\25\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\1\261\40\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\1\262\4\11\1\263\33\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\3\11\1\264\35\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\22\11\1\265\1\266"+
    "\15\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\14\11\1\267"+
    "\24\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\2\11\1\270"+
    "\14\11\1\271\21\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\1\11\1\272\37\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\16\11\1\273\22\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\5\11\1\274\33\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\3\11\1\275\35\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\13\11\1\276\25\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\14\11\1\277\24\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\2\11\1\300\36\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\14\11\1\301\24\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\3\11\1\302\35\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\2\11\1\303\14\11\1\304\21\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\3\11\1\305\35\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\6\11\1\306\32\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\20\11\1\307\20\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\3\11\1\310\35\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\2\11\1\311\36\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\12\11\1\312\26\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\14\11\1\313\2\11\1\314\21\11\2\2"+
    "\1\11\3\2\2\0\5\2\16\0\10\67\1\0\1\67"+
    "\1\0\1\67\10\0\13\67\1\315\3\67\1\316\21\67"+
    "\2\0\1\67\30\0\10\67\1\0\1\67\1\0\1\67"+
    "\10\0\13\67\1\317\2\67\1\320\22\67\2\0\1\67"+
    "\30\0\10\67\1\0\1\67\1\0\1\67\10\0\6\67"+
    "\1\321\32\67\2\0\1\67\20\0\1\217\2\0\2\217"+
    "\2\0\111\217\4\72\1\322\2\72\1\220\110\72\1\323"+
    "\3\0\3\323\1\0\1\221\2\67\3\221\2\67\1\0"+
    "\1\221\1\323\1\221\1\0\1\323\2\0\1\323\2\0"+
    "\1\323\41\221\2\323\1\221\3\323\2\0\5\323\6\0"+
    "\1\2\3\0\3\2\1\0\10\222\1\0\1\222\1\2"+
    "\1\222\1\0\1\2\2\0\1\2\2\0\1\2\41\222"+
    "\2\2\1\222\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\223\1\0\1\223\1\2\1\223\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\41\223\2\2\1\223"+
    "\3\2\2\0\5\2\6\0\1\111\3\0\3\111\1\324"+
    "\1\111\2\325\3\111\2\325\1\324\1\111\1\326\1\111"+
    "\1\324\1\111\2\324\1\111\1\324\1\0\45\111\1\326"+
    "\2\111\2\324\5\111\6\324\1\327\3\0\3\327\1\0"+
    "\1\225\1\226\1\67\1\226\1\225\1\226\2\67\1\0"+
    "\1\225\1\327\1\225\1\0\1\327\2\0\1\327\2\0"+
    "\1\327\4\225\1\226\14\225\1\226\17\225\2\327\1\225"+
    "\3\327\2\0\5\327\6\0\1\330\3\0\3\330\1\0"+
    "\2\226\1\67\3\226\2\67\1\0\1\226\1\330\1\226"+
    "\1\0\1\330\2\0\1\330\2\0\1\330\41\226\2\330"+
    "\1\226\3\330\2\0\5\330\6\0\1\230\3\0\3\230"+
    "\1\0\2\227\1\223\3\227\2\223\1\0\1\227\1\230"+
    "\1\227\1\0\1\230\2\0\1\230\2\0\1\230\41\227"+
    "\2\230\1\227\3\230\2\0\5\230\6\0\1\230\3\0"+
    "\3\230\1\0\2\226\1\67\3\226\2\67\1\0\1\226"+
    "\1\230\1\226\1\0\1\230\2\0\1\230\2\0\1\230"+
    "\41\226\2\230\1\226\3\230\2\0\5\230\6\0\1\2"+
    "\3\0\3\2\1\0\1\223\2\231\3\223\2\231\1\232"+
    "\1\223\1\2\1\223\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\41\223\2\2\1\223\3\2\2\0\5\2\6\0"+
    "\1\111\3\0\3\111\1\0\1\111\2\232\3\111\2\232"+
    "\1\111\1\331\1\0\1\111\1\0\1\111\5\0\7\111"+
    "\1\331\35\111\1\0\2\111\2\0\5\111\6\0\1\233"+
    "\3\0\3\233\1\0\10\233\1\0\3\233\1\0\1\233"+
    "\2\0\1\233\2\0\50\233\2\0\5\233\6\0\1\233"+
    "\3\0\3\233\1\0\1\233\2\234\1\233\4\234\1\332"+
    "\1\234\2\233\1\0\1\233\2\0\1\233\2\0\1\233"+
    "\1\234\3\233\1\234\1\233\1\234\1\233\1\234\4\233"+
    "\2\234\13\233\2\234\7\233\1\234\3\233\2\0\5\233"+
    "\17\0\2\235\1\0\4\235\1\0\1\235\1\0\1\333"+
    "\10\0\1\235\3\0\1\235\1\0\1\235\1\0\1\235"+
    "\4\0\2\235\7\0\1\333\3\0\2\235\7\0\1\235"+
    "\20\0\1\236\3\0\3\236\1\0\2\334\1\67\3\334"+
    "\1\67\1\334\1\0\1\334\1\236\1\334\1\0\1\236"+
    "\2\0\1\236\2\0\1\236\41\334\2\236\1\334\3\236"+
    "\2\0\5\236\6\0\1\236\3\0\3\236\1\0\2\237"+
    "\1\223\3\237\1\223\1\237\1\0\1\237\1\236\1\237"+
    "\1\0\1\236\2\0\1\236\2\0\1\236\41\237\2\236"+
    "\1\237\3\236\2\0\5\236\6\0\2\241\1\0\22\241"+
    "\1\242\1\335\72\241\2\0\2\241\2\0\111\241\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\3\11\1\336"+
    "\35\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\14\11\1\337"+
    "\24\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\3\11\1\340"+
    "\35\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\6\11\1\341"+
    "\32\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\1\342\40\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\1\11\1\343\37\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\2\11\1\344\36\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\14\11\1\345\24\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\20\11\1\346\20\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\6\11\1\347\32\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\6\11\1\350\32\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\6\11\1\351\32\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\2\11\1\352\6\11"+
    "\1\353\27\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\5\11"+
    "\1\354\33\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\2\11"+
    "\1\355\36\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\1\11"+
    "\1\356\37\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\5\11"+
    "\1\357\33\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\13\11"+
    "\1\360\25\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\6\11"+
    "\1\361\32\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\2\11"+
    "\1\362\36\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\14\11"+
    "\1\363\24\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\4\11"+
    "\1\364\34\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\1\365"+
    "\40\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\1\366\40\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\22\11\1\367\16\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\13\11\1\370\25\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\3\11\1\371\35\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\17\11\1\372\21\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\3\11\1\373\35\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\3\11\1\374\35\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\14\11\1\375\24\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\20\11\1\376\20\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\13\11\1\377\25\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\1\u0100\40\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\5\11\1\u0101\33\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\1\u0102\40\11\2\2\1\11"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\3\2\1\0"+
    "\10\11\1\0\1\11\1\2\1\11\1\0\1\2\2\0"+
    "\1\2\2\0\1\2\5\11\1\u0103\33\11\2\2\1\11"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\3\2\1\0"+
    "\10\11\1\0\1\11\1\2\1\11\1\0\1\2\2\0"+
    "\1\2\2\0\1\2\15\11\1\u0104\23\11\2\2\1\11"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\3\2\1\0"+
    "\10\11\1\0\1\11\1\2\1\11\1\0\1\2\2\0"+
    "\1\2\2\0\1\2\1\u0105\40\11\2\2\1\11\3\2"+
    "\2\0\5\2\16\0\10\67\1\0\1\67\1\0\1\67"+
    "\10\0\15\67\1\u0106\23\67\2\0\1\67\30\0\10\67"+
    "\1\0\1\67\1\0\1\67\10\0\11\67\1\u0107\27\67"+
    "\2\0\1\67\30\0\10\67\1\0\1\67\1\0\1\67"+
    "\10\0\10\67\1\u0108\30\67\2\0\1\67\30\0\10\67"+
    "\1\0\1\67\1\0\1\67\10\0\13\67\1\u0109\1\67"+
    "\1\u010a\23\67\2\0\1\67\30\0\10\67\1\0\1\67"+
    "\1\0\1\67\10\0\16\67\1\u010b\22\67\2\0\1\67"+
    "\20\0\1\323\3\0\3\323\1\0\1\323\2\0\3\323"+
    "\3\0\3\323\1\0\1\323\2\0\1\323\2\0\50\323"+
    "\2\0\5\323\6\0\1\111\3\0\3\111\1\324\1\111"+
    "\2\u010c\3\111\2\u010c\1\111\1\u010d\2\111\1\324\1\111"+
    "\2\324\1\111\1\324\1\0\7\111\1\u010d\40\111\2\324"+
    "\5\111\6\324\1\111\3\0\3\111\1\324\1\111\2\325"+
    "\3\111\2\325\1\324\3\111\1\324\1\111\2\324\1\111"+
    "\1\324\1\0\50\111\2\324\5\111\6\324\1\327\3\0"+
    "\3\327\1\0\1\327\1\330\1\0\1\330\1\327\1\330"+
    "\3\0\3\327\1\0\1\327\2\0\1\327\2\0\5\327"+
    "\1\330\14\327\1\330\25\327\2\0\5\327\6\0\1\330"+
    "\3\0\3\330\1\0\2\330\1\0\3\330\3\0\3\330"+
    "\1\0\1\330\2\0\1\330\2\0\50\330\2\0\5\330"+
    "\6\0\1\111\3\0\3\111\1\324\1\111\2\u010e\3\111"+
    "\2\u010e\1\324\1\111\1\u010f\1\111\1\324\1\111\2\324"+
    "\1\111\1\324\1\0\45\111\1\u010f\2\111\2\324\5\111"+
    "\6\324\7\u0110\1\0\1\u0110\2\332\1\u0110\4\332\1\u0111"+
    "\1\332\1\0\1\u0112\4\u0110\2\0\2\u0110\1\332\3\u0110"+
    "\1\332\1\u0110\1\332\1\u0110\1\332\4\u0110\2\332\7\u0110"+
    "\1\u0112\3\u0110\2\332\7\u0110\1\332\1\0\11\u0110\1\0"+
    "\5\u0110\1\333\3\0\3\333\1\0\10\333\1\0\3\333"+
    "\1\0\1\333\2\0\1\333\2\0\50\333\2\0\5\333"+
    "\6\0\1\u0113\3\0\3\u0113\1\0\2\334\1\67\3\334"+
    "\1\67\1\334\1\0\1\334\1\u0113\1\334\1\0\1\u0113"+
    "\2\0\1\u0113\2\0\1\u0113\41\334\2\u0113\1\334\3\u0113"+
    "\2\0\5\u0113\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\22\11\1\u0114\16\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\13\11\1\u0115\25\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\3\11\1\u0116\11\11\1\u0117\23\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\7\11\1\u0118\31\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\5\11\1\u0119\33\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\5\11\1\u011a\33\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\11\11\1\u011b\27\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\5\11\1\u011c\33\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\14\11\1\u011d\24\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\11\1\u011e\36\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\14\11\1\u011f\24\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\10\11\1\u0120\30\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\11\1\u0121\36\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\6\11\1\u0122\32\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\3\11\1\u0123\35\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\10\11\1\u0124\30\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\13\11\1\u0125\25\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\17\11\1\u0126\21\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\1\11\1\u0127\37\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\11\1\u0128\36\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\6\11\1\u0129\32\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\17\11\1\u012a\21\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\20\11\1\u012b\20\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\22\11\1\u012c\16\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\26\11\1\u012d\12\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\6\11\1\u012e\32\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\22\11\1\u012f\16\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\6\11\1\u0130\32\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\11\1\u0131\36\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\6\11\1\u0132\32\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\11\1\u0133\36\11\2\2"+
    "\1\11\3\2\2\0\5\2\16\0\10\67\1\0\1\67"+
    "\1\0\1\67\10\0\14\67\1\u0134\24\67\2\0\1\67"+
    "\30\0\10\67\1\0\1\67\1\0\1\67\10\0\6\67"+
    "\1\u0135\32\67\2\0\1\67\30\0\10\67\1\0\1\67"+
    "\1\0\1\67\10\0\17\67\1\u0136\21\67\2\0\1\67"+
    "\30\0\10\67\1\0\1\67\1\0\1\67\10\0\15\67"+
    "\1\u0137\23\67\2\0\1\67\30\0\10\67\1\0\1\67"+
    "\1\0\1\67\10\0\6\67\1\u0138\32\67\2\0\1\67"+
    "\30\0\10\67\1\0\1\67\1\0\1\67\10\0\14\67"+
    "\1\u0139\24\67\2\0\1\67\20\0\1\111\3\0\3\111"+
    "\1\324\1\111\2\u010c\3\111\2\u010c\1\324\1\u010d\2\111"+
    "\1\324\1\111\2\324\1\111\1\324\1\0\7\111\1\u010d"+
    "\40\111\2\324\5\111\6\324\1\111\3\0\3\111\1\0"+
    "\1\111\2\u013a\3\111\2\u013a\1\0\1\111\1\u013b\1\111"+
    "\1\0\1\111\2\0\1\111\2\0\45\111\1\u013b\2\111"+
    "\2\0\5\111\6\0\1\111\3\0\3\111\1\324\1\111"+
    "\2\u013c\3\111\2\u013c\4\111\1\324\1\111\2\324\1\111"+
    "\1\324\1\0\50\111\2\324\5\111\6\324\1\111\3\0"+
    "\3\111\1\324\1\111\2\u010e\3\111\2\u010e\1\324\3\111"+
    "\1\324\1\111\2\324\1\111\1\324\1\0\50\111\2\324"+
    "\5\111\6\324\2\0\1\u013d\115\0\1\u013e\1\0\1\u013d"+
    "\1\0\2\u013e\1\0\23\u013e\1\0\65\u013e\1\333\3\0"+
    "\3\333\1\u013f\1\333\2\u0140\3\333\2\u0140\1\u013f\1\333"+
    "\1\u0141\1\333\1\u013f\1\333\2\u013f\1\333\1\u013f\1\0"+
    "\45\333\1\u0141\2\333\2\u013f\5\333\6\u013f\1\u0113\3\0"+
    "\3\u0113\1\0\2\u0113\1\0\3\u0113\1\0\1\u0113\1\0"+
    "\3\u0113\1\0\1\u0113\2\0\1\u0113\2\0\50\u0113\2\0"+
    "\5\u0113\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\13\11\1\u0142\25\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\16\11\1\u0143\22\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\6\11\1\u0144\32\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\13\11\1\u0145\25\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\14\11\1\u0146\24\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\2\11\1\u0147\36\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\13\11\1\u0148\25\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\13\11\1\u0149\25\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\10\11\1\u014a\30\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\2\11\1\u014b\36\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\15\11\1\u014c\23\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\16\11\1\u014d\22\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\12\11\1\u014e\26\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\6\11\1\u014f\32\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\6\11\1\u0150\32\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\17\11\1\u0151\21\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\14\11\1\u0152\24\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\13\11\1\u0153\25\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\17\11\1\u0154\21\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\5\11\1\u0155\33\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\14\11\1\u0156\24\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\2\11\1\u0157\36\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\14\11\1\u0158\24\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\1\u0159\40\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\14\11\1\u015a\24\11\2\2\1\11\3\2\2\0\5\2"+
    "\16\0\10\67\1\0\1\67\1\0\1\67\10\0\16\67"+
    "\1\u015b\22\67\2\0\1\67\30\0\10\67\1\0\1\67"+
    "\1\0\1\67\10\0\1\67\1\u015c\37\67\2\0\1\67"+
    "\30\0\10\67\1\0\1\67\1\0\1\67\10\0\6\67"+
    "\1\u015d\32\67\2\0\1\67\30\0\10\67\1\0\1\67"+
    "\1\0\1\67\10\0\16\67\1\u015e\22\67\2\0\1\67"+
    "\30\0\10\67\1\0\1\67\1\0\1\67\10\0\13\67"+
    "\1\u015f\25\67\2\0\1\67\20\0\1\111\3\0\3\111"+
    "\1\0\1\111\2\u013a\3\111\2\u013a\1\0\1\u010d\2\111"+
    "\1\0\1\111\2\0\1\111\2\0\7\111\1\u010d\40\111"+
    "\2\0\5\111\6\0\1\111\3\0\3\111\1\0\1\111"+
    "\2\u013a\3\111\2\u013a\1\0\3\111\1\0\1\111\2\0"+
    "\1\111\2\0\50\111\2\0\5\111\6\0\1\111\3\0"+
    "\3\111\1\324\1\111\2\u013c\3\111\2\u013c\1\324\3\111"+
    "\1\324\1\111\2\324\1\111\1\324\1\0\50\111\2\324"+
    "\5\111\6\324\6\0\1\u0160\111\0\1\u013e\3\0\2\u013e"+
    "\1\0\23\u013e\1\0\65\u013e\1\u0161\3\u0110\3\u0161\1\u013f"+
    "\1\u0161\2\u0162\1\u0161\2\333\2\u0162\1\u0111\2\333\1\u0163"+
    "\1\u0164\1\u0161\2\u0164\1\333\1\u013f\1\u0110\1\u0161\1\333"+
    "\3\u0161\1\333\1\u0161\1\333\1\u0161\1\333\4\u0161\2\333"+
    "\7\u0161\1\u0163\3\u0161\2\333\7\u0161\2\333\2\u0161\2\u0164"+
    "\5\u0161\1\u013f\5\u0164\1\333\3\0\3\333\1\u013f\1\333"+
    "\2\u0140\3\333\2\u0140\1\u013f\3\333\1\u013f\1\333\2\u013f"+
    "\1\333\1\u013f\1\0\50\333\2\u013f\5\333\6\u013f\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\6\11\1\u0165"+
    "\32\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\27\11\1\u0166"+
    "\11\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\16\11\1\u0167"+
    "\22\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\10\11\1\u0168"+
    "\30\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\6\11\1\u0169"+
    "\32\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\1\11\1\u016a"+
    "\37\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\2\11\1\u016b"+
    "\36\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\10\11\1\u016c"+
    "\30\11\2\2\1\11\3\2\2\0\5\2\6\0\1\2"+
    "\3\0\3\2\1\0\10\11\1\0\1\11\1\2\1\11"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\1\u016d\2\11"+
    "\1\u016e\35\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\6\11"+
    "\1\u016f\32\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\14\11"+
    "\1\u0170\24\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\13\11"+
    "\1\u0171\25\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\1\11"+
    "\1\u0172\37\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\10\11"+
    "\1\u0173\30\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\15\11"+
    "\1\u0174\23\11\2\2\1\11\3\2\2\0\5\2\6\0"+
    "\1\2\3\0\3\2\1\0\10\11\1\0\1\11\1\2"+
    "\1\11\1\0\1\2\2\0\1\2\2\0\1\2\17\11"+
    "\1\u0175\21\11\2\2\1\11\3\2\2\0\5\2\16\0"+
    "\10\67\1\0\1\67\1\0\1\67\10\0\15\67\1\u0176"+
    "\23\67\2\0\1\67\30\0\10\67\1\0\1\67\1\0"+
    "\1\67\10\0\16\67\1\u0177\22\67\2\0\1\67\30\0"+
    "\10\67\1\0\1\67\1\0\1\67\10\0\6\67\1\u0178"+
    "\32\67\2\0\1\67\21\0\1\u0179\116\0\1\333\1\0"+
    "\1\u013d\1\0\3\333\1\0\10\333\1\0\3\333\1\0"+
    "\1\333\2\0\1\333\2\0\50\333\2\0\5\333\6\0"+
    "\1\333\3\0\3\333\1\u013f\1\333\2\u0162\3\333\2\u0162"+
    "\1\u013f\2\333\1\u0163\1\u013f\1\333\2\u013f\1\333\1\u013f"+
    "\1\0\27\333\1\u0163\20\333\2\u013f\5\333\6\u013f\1\333"+
    "\3\0\3\333\1\0\1\333\2\u017a\3\333\2\u017a\1\0"+
    "\1\333\1\u017b\1\333\1\0\1\333\2\0\1\333\2\0"+
    "\45\333\1\u017b\2\333\2\0\5\333\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\15\11\1\u017c\23\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\1\11\1\u017d\37\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\2\11\1\u017e\36\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\5\11\1\u017f\33\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\6\11\1\u0180\32\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\11\11\1\u0181\27\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\16\11\1\u0182\22\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\21\11\1\u0183\17\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\10\11\1\u0184\30\11"+
    "\2\2\1\11\3\2\2\0\5\2\6\0\1\2\3\0"+
    "\3\2\1\0\10\11\1\0\1\11\1\2\1\11\1\0"+
    "\1\2\2\0\1\2\2\0\1\2\1\u0185\40\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\5\11\1\u0186\33\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\27\11\1\u0187\11\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\27\11\1\u0188\11\11\2\2"+
    "\1\11\3\2\2\0\5\2\6\0\1\2\3\0\3\2"+
    "\1\0\10\11\1\0\1\11\1\2\1\11\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\6\11\1\u0189\32\11\2\2"+
    "\1\11\3\2\2\0\5\2\16\0\10\67\1\0\1\67"+
    "\1\0\1\67\10\0\6\67\1\u018a\32\67\2\0\1\67"+
    "\52\0\1\u013e\65\0\1\333\3\0\3\333\1\0\1\333"+
    "\2\u017a\3\333\2\u017a\1\0\2\333\1\u0163\1\0\1\333"+
    "\2\0\1\333\2\0\27\333\1\u0163\20\333\2\0\5\333"+
    "\6\0\1\333\3\0\3\333\1\0\1\333\2\u017a\3\333"+
    "\2\u017a\1\0\3\333\1\0\1\333\2\0\1\333\2\0"+
    "\50\333\2\0\5\333\6\0\1\2\3\0\3\2\1\0"+
    "\10\11\1\0\1\11\1\2\1\11\1\0\1\2\2\0"+
    "\1\2\2\0\1\2\13\11\1\u018b\25\11\2\2\1\11"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\3\2\1\0"+
    "\10\11\1\0\1\11\1\2\1\11\1\0\1\2\2\0"+
    "\1\2\2\0\1\2\5\11\1\u018c\33\11\2\2\1\11"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\3\2\1\0"+
    "\10\11\1\0\1\11\1\2\1\11\1\0\1\2\2\0"+
    "\1\2\2\0\1\2\13\11\1\u018d\25\11\2\2\1\11"+
    "\3\2\2\0\5\2\6\0\1\2\3\0\3\2\1\0"+
    "\10\11\1\0\1\11\1\2\1\11\1\0\1\2\2\0"+
    "\1\2\2\0\1\2\1\u018e\40\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\17\11\1\u018f\21\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\30\11\1\u0190\10\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\25\11\1\u0191\13\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\11\11\1\u0192\27\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\3\11\1\u0193\35\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\1\11\1\u0194\37\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\11\11\1\u0195\27\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\10\11\1\u0196\30\11\2\2\1\11\3\2"+
    "\2\0\5\2\6\0\1\2\3\0\3\2\1\0\10\11"+
    "\1\0\1\11\1\2\1\11\1\0\1\2\2\0\1\2"+
    "\2\0\1\2\1\u0197\40\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\6\11\1\u0198\32\11\2\2\1\11\3\2\2\0"+
    "\5\2\6\0\1\2\3\0\3\2\1\0\10\11\1\0"+
    "\1\11\1\2\1\11\1\0\1\2\2\0\1\2\2\0"+
    "\1\2\1\u0199\40\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\17\11\1\u019a\21\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\5\11\1\u019b\33\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\17\11\1\u019c\21\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0\1\2\3\0\3\2\1\0\10\11\1\0\1\11"+
    "\1\2\1\11\1\0\1\2\2\0\1\2\2\0\1\2"+
    "\2\11\1\u019d\36\11\2\2\1\11\3\2\2\0\5\2"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\1\1\11\1\1\1\11\36\1\6\11\1\1\1\11"+
    "\3\1\1\11\13\1\1\0\3\1\1\11\1\0\2\11"+
    "\1\0\1\1\2\0\65\1\4\11\3\1\1\0\2\1"+
    "\1\0\5\1\2\0\2\1\1\0\3\1\2\0\1\11"+
    "\56\1\1\11\1\1\1\11\10\1\1\11\62\1\1\0"+
    "\54\1\1\0\1\1\1\11\40\1\1\0\30\1\1\0"+
    "\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol symbol (int type, Object value) {
	return new Symbol(type, yyline+1, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Ignorar*/
            }
          case 130: break;
          case 2: 
            { System.err.println("Error l√©xico: [ERRIDENTIFICADOR] Caracter inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRIDENTIFICADOR]");
            }
          case 131: break;
          case 3: 
            { /* Ignorar */
            }
          case 132: break;
          case 4: 
            { /*System.out.println("Operador: DIVISION");*/ 
            return symbol(sym.DIVISION, yytext());
            }
          case 133: break;
          case 5: 
            { /*System.out.println("Operador: MULTIPLICACION");*/ 
            return symbol(sym.MULTIPLICACION, yytext());
            }
          case 134: break;
          case 6: 
            { /*System.out.println("Identificador: " + yytext());*/
                        return symbol(sym.IDENTIFICADOR, yytext());
            }
          case 135: break;
          case 7: 
            { /*System.out.println("Literal Numerico: INT_LITERAL");*/
                        return symbol(sym.NUMDECIMAL, yytext());
            }
          case 136: break;
          case 8: 
            { /*System.out.println("Operador: PUNTO");*/ 
            return symbol(sym.PUNTO, yytext());
            }
          case 137: break;
          case 9: 
            { /*System.out.println("Operador: RESTA");*/ 
            return symbol(sym.RESTA, yytext());
            }
          case 138: break;
          case 10: 
            { System.err.println("Error l√©xico: Car√°cter desconocido '" + yytext() + "' en la l√≠nea " + (yyline + 1));
            }
          case 139: break;
          case 11: 
            { /*System.out.println("Simbolo: PUNTO Y COMA");*/ 
            return symbol(sym.PUNTO_Y_COMA, yytext());
            }
          case 140: break;
          case 12: 
            { /*System.out.println("Operador: CONDICIONAL");*/ 
            return symbol(sym.CONDICIONAL, yytext());
            }
          case 141: break;
          case 13: 
            { /*System.out.println("Simbolo: PARENTESIS DER");*/ 
            return symbol(sym.PARENTESIS_DER, yytext());
            }
          case 142: break;
          case 14: 
            { System.err.println("Error l√©xico: [ERROPERADOR] Operador no v√°lido '" + yytext() + "' en la linea " + (yyline + 1) + " [ERROPERADOR]");
            }
          case 143: break;
          case 15: 
            { /*System.out.println("Operador: MODULO");*/ 
            return symbol(sym.MODULO, yytext());
            }
          case 144: break;
          case 16: 
            { /*System.out.println("Operador: SUMA");*/ 
            return symbol(sym.SUMA, yytext());
            }
          case 145: break;
          case 17: 
            { /*System.out.println("Operador: ASIGNACION");*/ 
            return symbol(sym.ASIGNACION, yytext());
            }
          case 146: break;
          case 18: 
            { /*System.out.println("Operador: NOT LOGICO");*/ 
            return symbol(sym.NOT, yytext());
            }
          case 147: break;
          case 19: 
            { /*System.out.println("Operador: MENOR QUE");*/ 
            return symbol(sym.MENOR_QUE, yytext());
            }
          case 148: break;
          case 20: 
            { /*System.out.println("Operador: MAYOR QUE");*/ 
            return symbol(sym.MAYOR_QUE, yytext());
            }
          case 149: break;
          case 21: 
            { /*System.out.println("Operador: AND BIT A BIT");*/ 
            return symbol(sym.AND_BIT, yytext());
            }
          case 150: break;
          case 22: 
            { /*System.out.println("Operador: OR BIT A BIT");*/ 
            return symbol(sym.OR_BIT, yytext());
            }
          case 151: break;
          case 23: 
            { /*System.out.println("Operador: XOR BIT A BIT");*/ 
            return symbol(sym.XOR_BIT, yytext());
            }
          case 152: break;
          case 24: 
            { /*System.out.println("Operador: NOT BIT A BIT");*/ 
            return symbol(sym.NOT_BIT, yytext());
            }
          case 153: break;
          case 25: 
            { /*System.out.println("Operador: DOS PUNTOS");*/ 
            return symbol(sym.DOS_PUNTOS, yytext());
            }
          case 154: break;
          case 26: 
            { /*System.out.println("Simbolo: PARENTESIS IZQ");*/ 
            return symbol(sym.PARENTESIS_IZQ, yytext());
            }
          case 155: break;
          case 27: 
            { /*System.out.println("Simbolo: CORCHETE IZQ");*/ 
            return symbol(sym.CORCHETE_IZQ, yytext());
            }
          case 156: break;
          case 28: 
            { /*System.out.println("Simbolo: CORCHETE DER");*/ 
            return symbol(sym.CORCHETE_DER, yytext());
            }
          case 157: break;
          case 29: 
            { /*System.out.println("Simbolo: LLAVE IZQ");*/ 
            return symbol(sym.LLAVE_IZQ, yytext());
            }
          case 158: break;
          case 30: 
            { /*System.out.println("Simbolo: LLAVE DER");*/ 
            return symbol(sym.LLAVE_DER, yytext());
            }
          case 159: break;
          case 31: 
            { /*System.out.println("Simbolo: COMA");*/ 
            return symbol(sym.COMA, yytext());
            }
          case 160: break;
          case 32: 
            { /*System.out.println("Comentario: UNILINEA");*/
                                return symbol(sym.COMENTARIOUNILINEA,yytext());
            }
          case 161: break;
          case 33: 
            { System.err.println("Error l√©xico: [ERRCOMMULTILINEA] Comentario multilinea sin cerrar '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRCOMMULTILINEA]");
            }
          case 162: break;
          case 34: 
            { /*System.out.println("Operador: DIVISION Y ASIGNACION");*/ 
            return symbol(sym.DIV_ASIGNACION, yytext());
            }
          case 163: break;
          case 35: 
            { /*System.out.println("Operador: MULTIPLICACION Y ASIGNACION");*/ 
            return symbol(sym.MULT_ASIGNACION, yytext());
            }
          case 164: break;
          case 36: 
            { System.err.println("Error l√©xico: [ERRNUMDECIMAL] N√∫mero decimal inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMDECIMAL]");
            }
          case 165: break;
          case 37: 
            { /*System.out.println("Literal Numerico: DEC_FLOAT_LITERAL en la linea " + (yyline + 1));*/
                        return symbol(sym.NUMFLOTANTEDEC, yytext());
            }
          case 166: break;
          case 38: 
            { System.err.println("Error l√©xico: [ERRNUMOCTAL] N√∫mero octal inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMOCTAL]");
            }
          case 167: break;
          case 39: 
            { /*System.out.println("Literal Numerico: OCT_LITERAL");*/
                        return symbol(sym.NUMOCTAL, yytext());
            }
          case 168: break;
          case 40: 
            { System.err.println("Error l√©xico: [ERRNUMFLOTANTE] N√∫mero flotante mal formado '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMFLOTANTE]");
            }
          case 169: break;
          case 41: 
            { /*System.out.println("Operador: DECREMENTO");*/ 
            return symbol(sym.DECREMENTO, yytext());
            }
          case 170: break;
          case 42: 
            { /*System.out.println("Operador: RESTA Y ASIGNACION");*/ 
            return symbol(sym.RESTA_ASIGNACION, yytext());
            }
          case 171: break;
          case 43: 
            { /*System.out.println("Operador: ACCESO PUNTERO");*/ 
            return symbol(sym.ACCESO_PUNTERO, yytext());
            }
          case 172: break;
          case 44: 
            { System.err.println("Error l√©xico: [ERRCADENATEXTO] Cadena de texto sin cerrar '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRCADENATEXTO]");
            }
          case 173: break;
          case 45: 
            { /*System.out.println("Cadena String: " + yytext());*/ 
                        return symbol(sym.CADENATEXTO, yytext());
            }
          case 174: break;
          case 46: 
            { System.err.println("Error l√©xico: [ERRCADENACHAR] Cadena de char sin cerrar '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRCADENACHAR]");
            }
          case 175: break;
          case 47: 
            { /*System.out.println("Palabra Reservada: IF");*/
                    return symbol(sym.IF,yytext());
            }
          case 176: break;
          case 48: 
            { /*System.out.println("Palabra Reservada: DO");*/
                    return symbol(sym.DO,yytext());
            }
          case 177: break;
          case 49: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir numeros hexadecimales: " + yytext());*/
            return symbol(sym.CFORMATO_HEXADECIMAL, yytext());
            }
          case 178: break;
          case 50: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir numeros en notacion cientifica: " + yytext());*/
            return symbol(sym.CFORMATO_NOTACION_EXPONENCIAL, yytext());
            }
          case 179: break;
          case 51: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir numeros enteros SIN SIGNO: " + yytext());*/
            return symbol(sym.CFORMATO_UNSIGNED, yytext());
            }
          case 180: break;
          case 52: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir numeros octales: " + yytext());*/
            return symbol(sym.CFORMATO_OCTAL, yytext());
            }
          case 181: break;
          case 53: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir un solo caracter: " + yytext());*/
            return symbol(sym.CFORMATO_CHAR, yytext());
            }
          case 182: break;
          case 54: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir cadenas de caracteres: " + yytext());*/
            return symbol(sym.CFORMATO_STRING, yytext());
            }
          case 183: break;
          case 55: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir el numero de caracteres que han sido procesados hasta ese momento: " + yytext());*/
            return symbol(sym.CFORMATO_NUM_CARACTERES_PROCESADOS, yytext());
            }
          case 184: break;
          case 56: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir numeros enteros: " + yytext());*/
            return symbol(sym.CFORMATO_INTEGER, yytext());
            }
          case 185: break;
          case 57: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir numeros de punto flotante (decimales): " + yytext());*/
            return symbol(sym.CFORMATO_FLOTANTE_DECIMAL, yytext());
            }
          case 186: break;
          case 58: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir numeros en formato general: " + yytext());*/
            return symbol(sym.CFORMATO_GENERAL, yytext());
            }
          case 187: break;
          case 59: 
            { /*System.out.println("[CARACTER DE FORMATO] Para imprimir una direccion de memoria: " + yytext());*/
            return symbol(sym.CFORMATO_POINTER, yytext());
            }
          case 188: break;
          case 60: 
            { /*System.out.println("Operador: MODULO Y ASIGNACION");*/ 
            return symbol(sym.MOD_ASIGNACION, yytext());
            }
          case 189: break;
          case 61: 
            { /*System.out.println("Operador: INCREMENTO");*/ 
            return symbol(sym.INCREMENTO, yytext());
            }
          case 190: break;
          case 62: 
            { /*System.out.println("Operador: SUMA Y ASIGNACION");*/ 
            return symbol(sym.SUMA_ASIGNACION, yytext());
            }
          case 191: break;
          case 63: 
            { /*System.out.println("Operador: IGUALDAD");*/ 
            return symbol(sym.IGUALDAD, yytext());
            }
          case 192: break;
          case 64: 
            { /*System.out.println("Operador: DIFERENTE");*/ 
            return symbol(sym.DIFERENTE, yytext());
            }
          case 193: break;
          case 65: 
            { /*System.out.println("Operador: MENOR O IGUAL");*/ 
            return symbol(sym.MENOR_IGUAL, yytext());
            }
          case 194: break;
          case 66: 
            { /*System.out.println("Operador: DESPLAZAMIENTO IZQUIERDA");*/ 
            return symbol(sym.DESPLAZA_IZQ, yytext());
            }
          case 195: break;
          case 67: 
            { /*System.out.println("Operador: MAYOR O IGUAL");*/ 
            return symbol(sym.MAYOR_IGUAL, yytext());
            }
          case 196: break;
          case 68: 
            { /*System.out.println("Operador: DESPLAZAMIENTO DERECHA");*/ 
            return symbol(sym.DESPLAZA_DER, yytext());
            }
          case 197: break;
          case 69: 
            { /*System.out.println("Operador: AND LOGICO");*/ 
            return symbol(sym.AND, yytext());
            }
          case 198: break;
          case 70: 
            { /*System.out.println("Operador: OR LOGICO");*/ 
            return symbol(sym.OR, yytext());
            }
          case 199: break;
          case 71: 
            { System.err.println("Error l√©xico: [ERRNUMHEXADECIMAL] N√∫mero hexadecimal inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMHEXADECIMAL]");
            }
          case 200: break;
          case 72: 
            { /*System.out.println("Literal Numerico: HEX_LITERAL");*/
                        return symbol(sym.NUMHEXADECIMAL, yytext());
            }
          case 201: break;
          case 73: 
            { System.err.println("Error l√©xico: [ERRNUMBINARIO] N√∫mero binario inv√°lido '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMBINARIO]");
            }
          case 202: break;
          case 74: 
            { /*System.out.println("Literal Numerico: BIN_LITERAL");*/
                        return symbol(sym.NUMBINARIO, yytext());
            }
          case 203: break;
          case 75: 
            { /*System.out.println("Cadena Char: " + yytext());*/ 
                        return symbol(sym.CADENACHAR, yytext());
            }
          case 204: break;
          case 76: 
            { /*System.out.println("Palabra Reservada: INT");*/
                    return symbol(sym.INT,yytext());
            }
          case 205: break;
          case 77: 
            { /*System.out.println("Palabra Reservada: FOR");*/
                    return symbol(sym.FOR,yytext());
            }
          case 206: break;
          case 78: 
            { /*System.out.println("Comentario: MULTILINEA");*/
                                return symbol(sym.COMENTARIOMULTILINEA,yytext());
            }
          case 207: break;
          case 79: 
            { /*System.out.println("Literal Numerico: HEX_FLOAT_LITERAL");*/
                        return symbol(sym.NUMFLOTANTEHEX, yytext());
            }
          case 208: break;
          case 80: 
            { System.err.println("Error l√©xico: [ERRNUMHEXFLOTANTE] N√∫mero flotante mal formado '" + yytext() + "' en la l√≠nea " + (yyline + 1) + " [ERRNUMHEXFLOTANTE]");
            }
          case 209: break;
          case 81: 
            { /*System.out.println("Palabra Reservada: AUTO");*/
                    return symbol(sym.AUTO,yytext());
            }
          case 210: break;
          case 82: 
            { /*System.out.println("Palabra Reservada: ENUM");*/
                    return symbol(sym.ENUM,yytext());
            }
          case 211: break;
          case 83: 
            { /*System.out.println("Palabra Reservada: ELSE");*/
                    return symbol(sym.ELSE,yytext());
            }
          case 212: break;
          case 84: 
            { System.out.println("Palabra Reservada: CASE");
                    return symbol(sym.CASE,yytext());
            }
          case 213: break;
          case 85: 
            { /*System.out.println("Palabra Reservada: CHAR");*/
                    return symbol(sym.CHAR,yytext());
            }
          case 214: break;
          case 86: 
            { /*System.out.println("Palabra Reservada: LONG");*/
                    return symbol(sym.LONG,yytext());
            }
          case 215: break;
          case 87: 
            { /*System.out.println("Palabra Reservada: MAIN");*/
                    return symbol(sym.MAIN,yytext());
            }
          case 216: break;
          case 88: 
            { /*System.out.println("Palabra Reservada: GOTO");*/
                    return symbol(sym.GOTO,yytext());
            }
          case 217: break;
          case 89: 
            { /*System.out.println("Palabra Reservada: VOID");*/
                    return symbol(sym.VOID,yytext());
            }
          case 218: break;
          case 90: 
            { /*System.out.println("Palabra Reservada: UNION");*/
                    return symbol(sym.UNION,yytext());
            }
          case 219: break;
          case 91: 
            { /*System.out.println("Palabra Reservada: BREAK");*/
                    return symbol(sym.BREAK,yytext());
            }
          case 220: break;
          case 92: 
            { /*System.out.println("Palabra Reservada: CONST");*/
                    return symbol(sym.CONST,yytext());
            }
          case 221: break;
          case 93: 
            { /*System.out.println("Palabra Reservada: SHORT");*/
                    return symbol(sym.SHORT,yytext());
            }
          case 222: break;
          case 94: 
            { /*System.out.println("Palabra Reservada: FLOAT");*/
                    return symbol(sym.FLOAT,yytext());
            }
          case 223: break;
          case 95: 
            { /*System.out.println("Palabra Reservada: WHILE");*/
                    return symbol(sym.WHILE,yytext());
            }
          case 224: break;
          case 96: 
            { /*System.out.println("Palabra Reservada: _Bool");*/
                    return symbol(sym._Bool,yytext());
            }
          case 225: break;
          case 97: 
            { /*System.out.println("[DIRECTIVA] Parte de una estructura condicional del preprocesador: " + yytext());*/
            return symbol(sym.DIRECTIVA_ELSE, yytext());
            }
          case 226: break;
          case 98: 
            { /*System.out.println("Palabra Reservada: TYPEOF");*/
                    return symbol(sym.TYPEOF,yytext());
            }
          case 227: break;
          case 99: 
            { /*System.out.println("Palabra Reservada: RETURN");*/
                    return symbol(sym.RETURN,yytext());
            }
          case 228: break;
          case 100: 
            { /*System.out.println("Palabra Reservada: EXTERN");*/
                    return symbol(sym.EXTERN,yytext());
            }
          case 229: break;
          case 101: 
            { /*System.out.println("Palabra Reservada: STATIC");*/
                    return symbol(sym.STATIC,yytext());
            }
          case 230: break;
          case 102: 
            { /*System.out.println("Palabra Reservada: STRUCT");*/
                    return symbol(sym.STRUCT,yytext());
            }
          case 231: break;
          case 103: 
            { /*System.out.println("Palabra Reservada: SIGNED");*/
                    return symbol(sym.SIGNED,yytext());
            }
          case 232: break;
          case 104: 
            { /*System.out.println("Palabra Reservada: SIZEOF");*/
                    return symbol(sym.SIZEOF,yytext());
            }
          case 233: break;
          case 105: 
            { /*System.out.println("Palabra Reservada: SWITCH");*/
                    return symbol(sym.SWITCH,yytext());
            }
          case 234: break;
          case 106: 
            { /*System.out.println("Palabra Reservada: INLINE");*/
                    return symbol(sym.INLINE,yytext());
            }
          case 235: break;
          case 107: 
            { /*System.out.println("Palabra Reservada: DOUBLE");*/
                    return symbol(sym.DOUBLE,yytext());
            }
          case 236: break;
          case 108: 
            { /*System.out.println("[DIRECTIVA] Para cerrar una estructura condicional del preprocesador: " + yytext());*/
            return symbol(sym.DIRECTIVA_ENDIF, yytext());
            }
          case 237: break;
          case 109: 
            { /*System.out.println("[DIRECTIVA] Para comprobar si una macro est√° definida: " + yytext());*/
            return symbol(sym.DIRECTIVA_IFDEF, yytext());
            }
          case 238: break;
          case 110: 
            { /*System.out.println("Palabra Reservada: TYPEDEF");*/
                    return symbol(sym.TYPEDEF,yytext());
            }
          case 239: break;
          case 111: 
            { /*System.out.println("Palabra Reservada: DEFAULT");*/
                    return symbol(sym.DEFAULT,yytext());
            }
          case 240: break;
          case 112: 
            { /*System.out.println("Palabra Reservada: _Atomic");*/
                    return symbol(sym._Atomic,yytext());
            }
          case 241: break;
          case 113: 
            { /*System.out.println("[DIRECTIVA] Para comprobar si una macro NO est√° definida: " + yytext());*/
            return symbol(sym.DIRECTIVA_IFNDEF, yytext());
            }
          case 242: break;
          case 114: 
            { /*System.out.println("[DIRECTIVA] Para definir macros: " + yytext());*/
            return symbol(sym.DIRECTIVA_DEFINE, yytext());
            }
          case 243: break;
          case 115: 
            { /*System.out.println("Palabra Reservada: UNSIGNED");*/
                    return symbol(sym.UNSIGNED,yytext());
            }
          case 244: break;
          case 116: 
            { /*System.out.println("Palabra Reservada: RESTRICT");*/
                    return symbol(sym.RESTRICT,yytext());
            }
          case 245: break;
          case 117: 
            { /*System.out.println("Palabra Reservada: REGISTER");*/
                    return symbol(sym.REGISTER,yytext());
            }
          case 246: break;
          case 118: 
            { /*System.out.println("Palabra Reservada: CONTINUE");*/
                    return symbol(sym.CONTINUE,yytext());
            }
          case 247: break;
          case 119: 
            { /*System.out.println("Palabra Reservada: _Alignas");*/
                    return symbol(sym._Alignas,yytext());
            }
          case 248: break;
          case 120: 
            { /*System.out.println("Palabra Reservada: _Alignof");*/
                    return symbol(sym._Alignof,yytext());
            }
          case 249: break;
          case 121: 
            { /*System.out.println("Palabra Reservada: _Complex");*/
                    return symbol(sym._Complex,yytext());
            }
          case 250: break;
          case 122: 
            { /*System.out.println("Palabra Reservada: _Generic");*/
                    return symbol(sym._Generic,yytext());
            }
          case 251: break;
          case 123: 
            { /*System.out.println("Palabra Reservada: VOLATILE");*/
                    return symbol(sym.VOLATILE,yytext());
            }
          case 252: break;
          case 124: 
            { /*System.out.println("[DIRECTIVA] Para incluir archivos: " + yytext());*/
            return symbol(sym.DIRECTIVA_INCLUDE, yytext());
            }
          case 253: break;
          case 125: 
            { /*System.out.println("Palabra Reservada: _Noreturn");*/
                    return symbol(sym._Noreturn,yytext());
            }
          case 254: break;
          case 126: 
            { /*System.out.println("Palabra Reservada: _Imaginary");*/
                    return symbol(sym._Imaginary,yytext());
            }
          case 255: break;
          case 127: 
            { /*System.out.println("Palabra Reservada: TYPEOF_UNQUAL");*/
                    return symbol(sym.TYPEOF_UNQUAL,yytext());
            }
          case 256: break;
          case 128: 
            { /*System.out.println("Palabra Reservada: _Thread_local");*/
                    return symbol(sym._Thread_local,yytext());
            }
          case 257: break;
          case 129: 
            { /*System.out.println("Palabra Reservada: _Static_assert");*/
                    return symbol(sym._Static_assert,yytext());
            }
          case 258: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
